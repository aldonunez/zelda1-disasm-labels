<?xml version="1.0" encoding="utf-8"?>
<DebugWorkspace xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Breakpoints>
    <Breakpoint>
      <BreakOnRead>true</BreakOnRead>
      <BreakOnWrite>true</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>true</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>23</Address>
      <StartAddress>0</StartAddress>
      <EndAddress>0</EndAddress>
      <AddressType>SingleAddress</AddressType>
      <Condition>PC != $E49F</Condition>
      <MemoryType>CpuMemory</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>true</BreakOnRead>
      <BreakOnWrite>true</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>true</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>243</Address>
      <StartAddress>0</StartAddress>
      <EndAddress>0</EndAddress>
      <AddressType>SingleAddress</AddressType>
      <Condition>(PC &lt; $E9AD || PC &gt;= $E9B3) &amp;&amp; (PC != $EB6E)</Condition>
      <MemoryType>CpuMemory</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>true</BreakOnRead>
      <BreakOnWrite>true</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>false</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>0</Address>
      <StartAddress>1131</StartAddress>
      <EndAddress>1143</EndAddress>
      <AddressType>AddressRange</AddressType>
      <Condition>PC != $B2A2 &amp;&amp; PC != $B2AD &amp;&amp; PC != $E610</Condition>
      <MemoryType>CpuMemory</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>true</BreakOnRead>
      <BreakOnWrite>true</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>false</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>0</Address>
      <StartAddress>1144</StartAddress>
      <EndAddress>1156</EndAddress>
      <AddressType>AddressRange</AddressType>
      <Condition>PC != $B2B8 &amp;&amp; PC != $B2C3 &amp;&amp; PC != $E610</Condition>
      <MemoryType>CpuMemory</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>true</BreakOnRead>
      <BreakOnWrite>false</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>false</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>126074</Address>
      <StartAddress>126074</StartAddress>
      <EndAddress>126074</EndAddress>
      <AddressType>SingleAddress</AddressType>
      <Condition />
      <MemoryType>PrgRom</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>false</BreakOnRead>
      <BreakOnWrite>false</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>false</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>126188</Address>
      <StartAddress>0</StartAddress>
      <EndAddress>0</EndAddress>
      <AddressType>SingleAddress</AddressType>
      <Condition />
      <MemoryType>PrgRom</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>false</BreakOnRead>
      <BreakOnWrite>false</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>false</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>129969</Address>
      <StartAddress>0</StartAddress>
      <EndAddress>0</EndAddress>
      <AddressType>SingleAddress</AddressType>
      <Condition />
      <MemoryType>PrgRom</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>false</BreakOnRead>
      <BreakOnWrite>false</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>false</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>129915</Address>
      <StartAddress>0</StartAddress>
      <EndAddress>0</EndAddress>
      <AddressType>SingleAddress</AddressType>
      <Condition />
      <MemoryType>PrgRom</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>false</BreakOnRead>
      <BreakOnWrite>false</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>false</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>67634</Address>
      <StartAddress>0</StartAddress>
      <EndAddress>0</EndAddress>
      <AddressType>SingleAddress</AddressType>
      <Condition />
      <MemoryType>PrgRom</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>true</BreakOnRead>
      <BreakOnWrite>true</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>false</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>1082</Address>
      <StartAddress>1080</StartAddress>
      <EndAddress>1083</EndAddress>
      <AddressType>AddressRange</AddressType>
      <Condition>PC != $883B &amp;&amp; PC != $E610</Condition>
      <MemoryType>CpuMemory</MemoryType>
    </Breakpoint>
    <Breakpoint>
      <BreakOnRead>false</BreakOnRead>
      <BreakOnWrite>false</BreakOnWrite>
      <BreakOnExec>true</BreakOnExec>
      <Enabled>true</Enabled>
      <MarkEvent>false</MarkEvent>
      <ProcessDummyReadWrites>false</ProcessDummyReadWrites>
      <Address>70543</Address>
      <StartAddress>0</StartAddress>
      <EndAddress>0</EndAddress>
      <AddressType>SingleAddress</AddressType>
      <Condition />
      <MemoryType>PrgRom</MemoryType>
    </Breakpoint>
  </Breakpoints>
  <WatchValues>
    <string>[$0397]</string>
    <string>[$0398]</string>
  </WatchValues>
  <Labels>
    <CodeLabel>
      <Address>8192</Address>
      <AddressType>Register</AddressType>
      <Label>PpuControl_2000</Label>
      <Comment>7  bit  0&#xD;
---- ----&#xD;
VPHB SINN&#xD;
|||| ||||&#xD;
|||| ||++- Base nametable address&#xD;
|||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)&#xD;
|||| |+--- VRAM address increment per CPU read/write of PPUDATA&#xD;
|||| |     (0: add 1, going across; 1: add 32, going down)&#xD;
|||| +---- Sprite pattern table address for 8x8 sprites&#xD;
||||       (0: $0000; 1: $1000; ignored in 8x16 mode)&#xD;
|||+------ Background pattern table address (0: $0000; 1: $1000)&#xD;
||+------- Sprite size (0: 8x8; 1: 8x16)&#xD;
|+-------- PPU master/slave select&#xD;
|          (0: read backdrop from EXT pins; 1: output color on EXT pins)&#xD;
+--------- Generate an NMI at the start of the&#xD;
           vertical blanking interval (0: off; 1: on)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8193</Address>
      <AddressType>Register</AddressType>
      <Label>PpuMask_2001</Label>
      <Comment>7  bit  0&#xD;
---- ----&#xD;
BGRs bMmG&#xD;
|||| ||||&#xD;
|||| |||+- Display type: (0: color, 1: grayscale)&#xD;
|||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide&#xD;
|||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide&#xD;
|||| +---- 1: Show background&#xD;
|||+------ 1: Show sprites&#xD;
||+------- Emphasize red&#xD;
|+-------- Emphasize green&#xD;
+--------- Emphasize blue</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8194</Address>
      <AddressType>Register</AddressType>
      <Label>PpuStatus_2002</Label>
      <Comment>7  bit  0&#xD;
---- ----&#xD;
VSO. ....&#xD;
|||| ||||&#xD;
|||+-++++- Least significant bits previously written into a PPU register&#xD;
|||        (due to register not being updated for this address)&#xD;
||+------- Sprite overflow. The intent was for this flag to be set&#xD;
||         whenever more than eight sprites appear on a scanline, but a&#xD;
||         hardware bug causes the actual behavior to be more complicated&#xD;
||         and generate false positives as well as false negatives; see&#xD;
||         PPU sprite evaluation. This flag is set during sprite&#xD;
||         evaluation and cleared at dot 1 (the second dot) of the&#xD;
||         pre-render line.&#xD;
|+-------- Sprite 0 Hit.  Set when a nonzero pixel of sprite 0 overlaps&#xD;
|          a nonzero background pixel; cleared at dot 1 of the pre-render&#xD;
|          line.  Used for raster timing.&#xD;
+--------- Vertical blank has started (0: not in vblank; 1: in vblank).&#xD;
           Set at dot 1 of line 241 (the line *after* the post-render&#xD;
           line, false); cleared after reading $2002 and at dot 1 of the&#xD;
           pre-render line.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8195</Address>
      <AddressType>Register</AddressType>
      <Label>OamAddr_2003</Label>
      <Comment>Set OAM address - Write only</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8196</Address>
      <AddressType>Register</AddressType>
      <Label>OamData_2004</Label>
      <Comment>Read/Write OAM data</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8197</Address>
      <AddressType>Register</AddressType>
      <Label>PpuScroll_2005</Label>
      <Comment>Set PPU scroll, write twice - Write only</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8198</Address>
      <AddressType>Register</AddressType>
      <Label>PpuAddr_2006</Label>
      <Comment>Set PPU address, write twice - Write only</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8199</Address>
      <AddressType>Register</AddressType>
      <Label>PpuData_2007</Label>
      <Comment>Read/Write VRAM</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16384</Address>
      <AddressType>Register</AddressType>
      <Label>Sq0Duty_4000</Label>
      <Comment>DDLC VVVV&#xD;
Duty (D), envelope loop / length counter halt (L), constant volume (C), volume/envelope (V)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16385</Address>
      <AddressType>Register</AddressType>
      <Label>Sq0Sweep_4001</Label>
      <Comment>EPPP NSSS&#xD;
Sweep unit: enabled (E), period (P), negate (N), shift (S)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16386</Address>
      <AddressType>Register</AddressType>
      <Label>Sq0Timer_4002</Label>
      <Comment>TTTT TTTT&#xD;
Timer low (T)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16387</Address>
      <AddressType>Register</AddressType>
      <Label>Sq0Length_4003</Label>
      <Comment>LLLL LTTT&#xD;
Length counter load (L), timer high (T)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16388</Address>
      <AddressType>Register</AddressType>
      <Label>Sq1Duty_4004</Label>
      <Comment>DDLC VVVV&#xD;
Duty (D), envelope loop / length counter halt (L), constant volume (C), volume/envelope (V)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16389</Address>
      <AddressType>Register</AddressType>
      <Label>Sq1Sweep_4005</Label>
      <Comment>EPPP NSSS&#xD;
Sweep unit: enabled (E), period (P), negate (N), shift (S)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16390</Address>
      <AddressType>Register</AddressType>
      <Label>Sq1Timer_4006</Label>
      <Comment>TTTT TTTT&#xD;
Timer low (T)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16391</Address>
      <AddressType>Register</AddressType>
      <Label>Sq1Length_4007</Label>
      <Comment>LLLL LTTT&#xD;
Length counter load (L), timer high (T)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16392</Address>
      <AddressType>Register</AddressType>
      <Label>TrgLinear_4008</Label>
      <Comment>CRRR RRRR&#xD;
Length counter halt / linear counter control (C), linear counter load (R)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16394</Address>
      <AddressType>Register</AddressType>
      <Label>TrgTimer_400A</Label>
      <Comment>TTTT TTTT&#xD;
Timer low (T)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16395</Address>
      <AddressType>Register</AddressType>
      <Label>TrgLength_400B</Label>
      <Comment>LLLL LTTT&#xD;
Length counter load (L), timer high (T)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16396</Address>
      <AddressType>Register</AddressType>
      <Label>NoiseVolume_400C</Label>
      <Comment>--LC VVVV&#xD;
Envelope loop / length counter halt (L), constant volume (C), volume/envelope (V)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16398</Address>
      <AddressType>Register</AddressType>
      <Label>NoisePeriod_400E</Label>
      <Comment>L--- PPPP&#xD;
Loop noise (L), noise period (P)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16399</Address>
      <AddressType>Register</AddressType>
      <Label>NoiseLength_400F</Label>
      <Comment>LLLL L---&#xD;
Length counter load (L)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16400</Address>
      <AddressType>Register</AddressType>
      <Label>DmcFreq_4010</Label>
      <Comment>IL-- RRRR&#xD;
IRQ enable (I), loop (L), frequency (R)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16401</Address>
      <AddressType>Register</AddressType>
      <Label>DmcCounter_4011</Label>
      <Comment>-DDD DDDD&#xD;
Load counter (D)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16402</Address>
      <AddressType>Register</AddressType>
      <Label>DmcAddress_4012</Label>
      <Comment>AAAA AAAA&#xD;
Sample address (A)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16403</Address>
      <AddressType>Register</AddressType>
      <Label>DmcLength_4013</Label>
      <Comment>LLLL LLLL&#xD;
Sample length (L)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16404</Address>
      <AddressType>Register</AddressType>
      <Label>SpriteDma_4014</Label>
      <Comment>Writing $XX will upload 256 bytes of data from CPU page $XX00-$XXFF to the internal PPU OAM.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16405</Address>
      <AddressType>Register</AddressType>
      <Label>ApuStatus_4015</Label>
      <Comment>Read:&#xD;
IF-D NT21&#xD;
DMC interrupt (I), frame interrupt (F), DMC active (D), length counter &gt; 0 (N/T/2/1)&#xD;
&#xD;
Write:&#xD;
---D NT21&#xD;
Enable DMC (D), noise (N), triangle (T), and pulse channels (2/1)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16406</Address>
      <AddressType>Register</AddressType>
      <Label>Ctrl1_4016</Label>
      <Comment>Read (NES - input):&#xD;
---4 3210&#xD;
Read data from controller port #1.&#xD;
&#xD;
Write:&#xD;
---- ---A&#xD;
Output data (strobe) to both controllers.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16407</Address>
      <AddressType>Register</AddressType>
      <Label>Ctrl2_FrameCtr_4017</Label>
      <Comment>Read (NES - input):&#xD;
---4 3210&#xD;
Read data from controller port #2.&#xD;
&#xD;
Write (Frame counter): MI-- ----&#xD;
Mode (M, 0 = 4-step, 1 = 5-step), IRQ inhibit flag (I)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>123995</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LoopForever</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>112</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>132</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>152</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>19</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GameMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GameSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1645</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvRupees</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1644</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvClock</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1635</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvLadder</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1647</Address>
      <AddressType>InternalRam</AddressType>
      <Label>HeartValues</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1623</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Items</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1622</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SelectedItemSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1648</Address>
      <AddressType>InternalRam</AddressType>
      <Label>HeartPartial</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1636</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvMagicKey</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1624</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvBombs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>172</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>847</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjType</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>21</Address>
      <AddressType>InternalRam</AddressType>
      <Label>FrameCounter</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19712</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyCommonCodeToRam</Label>
      <Comment> Source address $A500.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130988</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwitchBank</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124386</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TableJump</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125822</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode10Stairs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125866</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode3Unfurl</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125547</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode5Play</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125521</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetPlayerState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125744</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125979</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode5Play</Label>
      <Comment> While the flute timer has not expired, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125888</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode4and6EnterLeave</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125794</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125814</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode8ContinueQuestion</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125846</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode2Load</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36896</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode0Demo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42385</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode1Menu</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42394</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode1Menu_Sub0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42463</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode1Menu_Sub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36923</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode0Demo_Sub0</Label>
      <Comment> If Start is not pressed,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41632</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode0Demo_Sub1</Label>
      <Comment> For each save slot:&#xD;
   If file B is uncommitted and valid, then&#xD;
     Copy file B to file A (also marks file B committed)&#xD;
   If file A's static markers are wrong or file is invalid, then&#xD;
     Format file A&#xD;
&#xD;
 TODO: This is also mode 1 submode 0 init.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36957</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode0Demo_Sub2</Label>
      <Comment> Copy data from each save file A to save slot info.&#xD;
 Most of the game will deal with save slot info.&#xD;
 Format each inactive file A, to make sure it's clear.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40688</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateModeERegister</Label>
      <Comment> If didn't press Start,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40901</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateModeFElimination</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42669</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateModeDSave</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125830</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125838</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode12EndLevel</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43536</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode13WinGame</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43555</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode13WinGame_Sub0_Flash</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43689</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode13WinGame_Sub1</Label>
      <Comment> DASM.EXPR: EndingFlashLongTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43972</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode13WinGame_Sub3</Label>
      <Comment> After scrolling 8 pixels, draw another tile row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43903</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode13WinGame_Sub4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125259</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125295</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125303</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125400</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83835</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94330</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125345</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83456</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode8</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86282</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode9</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94460</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86144</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeB</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86167</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeC</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83482</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeD</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125379</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeEandF</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83496</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode10</Label>
      <Comment> Get the tile the player is standing on (on the hotspot).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84527</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode11</Label>
      <Comment> Decrease Link's invincibility timer. This is needed in submode 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92211</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode12</Label>
      <Comment> Play "End Level" song.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125387</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode13</Label>
      <Comment> Make sure horizontal mirroring is on.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1569</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomHistory</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1568</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurRoomHistoryIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124407</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HideAllSprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3638</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CycleCurSpriteIndex</Label>
      <Comment> From 0 to $27.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3648</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ResetCurSpriteIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurLevel</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1630</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Potion</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1626</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Bow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126452</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetCollidableTileStill</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 A: tile&#xD;
 [049E][X]: tile&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126458</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetCollidingTileMoving</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 [0F]: direction&#xD;
&#xD;
 Returns:&#xD;
 A: tile&#xD;
 [049E][X]: tile&#xD;
&#xD;
&#xD;
 Use -8 ($F8) for the hotspot offset, if it's Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127305</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetMovingDir</Label>
      <Comment> Returns:&#xD;
 A: 0&#xD;
 [0F]: 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127203</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Walker_CheckTileCollision</Label>
      <Comment> Params:&#xD;
 [0E]: $FF, if blocked by a door&#xD;
 [0F]: movement direction&#xD;
&#xD;
 Returns:&#xD;
 [0F]: untouched, or changed if blocked or need to change&#xD;
&#xD;
 Summary:&#xD;
&#xD;
 For the player: if at a doorway or walkable tile, check the screen edge.&#xD;
 Then allow movement or go to the next room. Otherwise,&#xD;
 check passive tile objects and stop moving.&#xD;
&#xD;
 For other objects: First, if moving, test the colliding tile for&#xD;
 walkability. Otherwise search for a walkable direction starting&#xD;
 from input direction.&#xD;
&#xD;
 When you find a walkable direction, see if it makes the object&#xD;
 cross a boundary. If it doesn't, then make this direction&#xD;
 the objection direction. Otherwise, keep looping.&#xD;
&#xD;
 If no walkable direction is found, then stop moving.&#xD;
&#xD;
&#xD;
 if is player&#xD;
   if at doorway&#xD;
     go handle a walkable direction&#xD;
   if blocked by door&#xD;
     return&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125209</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1157</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjHP</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1264</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjInvincibilityTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>123904</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayAreaColumnAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>64</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91908</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnDirectoryUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126368</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePlayer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129908</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateObject</Label>
      <Comment> Params:&#xD;
 A: object type&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70519</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateStalfos</Label>
      <Comment> Turn rate $80</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66689</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateKeese</Label>
      <Comment> If the magic clock is missing and Link is not lifting an item,&#xD;
 then fly.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1029</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjMetastate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68607</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateOctorock</Label>
      <Comment> If the monster is a fast octorock, use turn rate $A0.&#xD;
 Else use turn rate $70.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65817</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGoriya</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67519</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMoblin</Label>
      <Comment> Set turn rate to $A0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67532</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateLynel</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72523</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDarknut</Label>
      <Comment> Turn rate $80</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67832</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateTektiteOrBoulder</Label>
      <Comment> If the monster is shoved, then keep shoving it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68197</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBlueLeever</Label>
      <Comment> Turn rate $A0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68361</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRedLeever</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67480</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZora</Label>
      <Comment> If we have the magic clock, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73047</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateVire</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66763</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZol</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66920</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGel</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72610</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePolsVoice</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72905</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateLikeLike</Label>
      <Comment> If the monster captured Link, then go handle it.&#xD;
&#xD;
 DASM.EXPR: ObjCaptureTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71152</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDigdogger</Label>
      <Comment> If we have the magic clock, or the monster is stunned,&#xD;
 then go check room boundaries and object collisions, and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69672</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePeahat</Label>
      <Comment> If the object is being shoved, then shove it and go draw&#xD;
 and check for collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68944</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateArmos</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67718</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBoulderSet</Label>
      <Comment> If the object timer has not expired, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68715</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGhini</Label>
      <Comment> Pass in turn rate $FF to turn as often as possible.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69615</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateFlyingGhini</Label>
      <Comment> If we have the magic clock, then don't move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73187</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBlueWizzrobe</Label>
      <Comment> Description:&#xD;
 Blue Wizzrobe has two states: walking and teleporting.&#xD;
 When walking, the object timer is set. When teleporting,&#xD;
 the teleporting distance remaining is set.&#xD;
&#xD;
 If we have the magic clock, then only go draw and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73641</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRedWizzrobe</Label>
      <Comment> If we have the magic clock, then go check collisions and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76762</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePatraChild</Label>
      <Comment> If state = 1, then go orbit.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69860</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateWallmaster</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70358</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRope</Label>
      <Comment> Set the input direction to the facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66622</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBubble</Label>
      <Comment> Turn rate $40</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130624</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateWhirlwind</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69008</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePondFairy</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72502</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGibdo</Label>
      <Comment> Turn rate $80</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71849</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74518</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGohma</Label>
      <Comment> If flagged not to continue straight, then choose a random facing direction.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjGoStraight&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130640</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRupeeStash</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130704</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGrumble</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76167</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZelda</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76267</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateLamnola</Label>
      <Comment> If the direction of this segment is not set, then it has not started&#xD;
 moving yet. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74119</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateManhandla</Label>
      <Comment> If this segment is not the base, then skip turning and speeding up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71558</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateAquamentus</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76925</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGanon</Label>
      <Comment> DASM.EXPR: Ganon_ScenePhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76248</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGuardFire</Label>
      <Comment> Animation counter 6</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65615</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateStandingFire</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70808</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMoldorm</Label>
      <Comment> If facing direction = 0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74974</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGleeok</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74871</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGleeokHead</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76646</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePatra</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130656</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateTrap</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130688</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPerson</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130696</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonLifeOrMoney</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66263</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMonsterShot</Label>
      <Comment> Set moving direction to facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66457</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateFireball</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67647</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMonsterArrow</Label>
      <Comment> Set q-speed $80 (2 pixels a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128281</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateArrowOrBoomerang</Label>
      <Comment> If not active (state = 0), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130726</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDeadDummy</Label>
      <Comment> Monster died sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130804</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateFluteSecret</Label>
      <Comment> If secret color cycle &gt;= $C, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78076</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateItem</Label>
      <Comment> Every other frame, decrement the item lifetime.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69494</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDock</Label>
      <Comment> If missing the raft, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69188</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRockOrGravestone</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69355</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRockWall</Label>
      <Comment> If the secret in this room does not apply to the current quest,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69390</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateTree</Label>
      <Comment> If the secret in this room does not apply to the current quest,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66039</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBlock</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1639</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvCompass</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1640</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvMap</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1641</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvCompass9</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1642</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvMap9</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1646</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvKeys</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1649</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvTriforce</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1652</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvBoomerang</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1653</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvMagicBoomerang</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1654</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvMagicShield</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1660</Address>
      <AddressType>InternalRam</AddressType>
      <Label>MaxBombs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1661</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RupeesToAdd</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1662</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RupeesToSubtract</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130712</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DecrementInvincibilityTimer</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>248</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ButtonsPressed</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>250</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ButtonsDown</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>225</Address>
      <AddressType>InternalRam</AddressType>
      <Label>MenuState</Label>
      <Comment> else start scrolling the menu.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1016</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjInputDir</Label>
      <Comment> At the beginning of a frame, this will be set to 0 to 2 directions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38</Address>
      <AddressType>InternalRam</AddressType>
      <Label>StunCycle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124219</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E53B_CheckInput</Label>
      <Comment> Sprite 0 is used for scrolling. Input isn't checked while scrolling.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124207</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E52F_DecTimers</Label>
      <Comment> Decrement timers (object and optionally stun timers).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124190</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the stun cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>61</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjStunTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1540</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Tune0Request</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1538</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Tune1Request</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1536</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongRequest</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1542</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Effect</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1545</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Song</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1543</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Tune1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1541</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Tune0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>224</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Paused</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126012</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then toggle pause.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95577</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MaskCurPpuMaskGrayscale</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126074</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BeginUpdateWorld</Label>
      <Comment> If we have the clock, then&#xD;
 force the player's invincibility.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126020</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then enable sound.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126043</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save current direction from input buttons.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>512</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Sprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>256</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3613</Address>
      <AddressType>SaveRam</AddressType>
      <Label>HideObjectSprites</Label>
      <Comment> Hide all sprites $18 and on.&#xD;
 Cycle the starting sprite index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126065</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EC71_NotInMenu</Label>
      <Comment> Not in submenu.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>834</Address>
      <AddressType>InternalRam</AddressType>
      <Label>FirstSpriteIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>833</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RollingSpriteIndex</Label>
      <Comment> Cycles from 0 to $27.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3641</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CycleSpriteIndexInA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126069</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Start not pressed, go update the world.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126071</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else set menu state 1 to start scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126093</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not updating anymore,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126018</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not paused,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126004</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If involuntarily paused, skip checking Select button here. But go do pause actions.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126006</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Not paused or paused voluntarily.&#xD;
 Check Select button.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126010</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If pressed Select,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126027</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not paused, go update the submenu or world.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126040</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EC58_CheckMenu</Label>
      <Comment> Not paused.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81926</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenu</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82032</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuScrollDownOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82038</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuScrollDownUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82132</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuActive</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82191</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuScrollUp</Label>
      <Comment> Move position marker's and vertical scroll up 3 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82330</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuStartOW</Label>
      <Comment> Put the tiles into the submenu triforce transfer buffers that&#xD;
 make it look completely empty, and no piece has been won.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81976</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuCommon1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82007</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuCommon2</Label>
      <Comment> Cue the transfer of first set of submenu nametable attributes to NT 2.&#xD;
 Advance state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82014</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuCommon3</Label>
      <Comment> Cue the transfer of second set of submenu nametable attributes to NT 2.&#xD;
 Advance state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82018</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuCommon4</Label>
      <Comment> Cue the transfer of a blank row of tiles to the bottom of NT 2.&#xD;
 Advance state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82028</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenu5OW</Label>
      <Comment> Cue the transfer of "TRIFORCE" text.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82022</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenu5UW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>255</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurPpuControl_2000</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SwitchNameTablesReq</Label>
      <Comment>TODO: Or call it UseOtherNameTable?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124044</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E48C</Label>
      <Comment> Disable NMI.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124042</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to the other name table ($2000 &lt;-&gt; $2800).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124040</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If need to switch name tables,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124048</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make sure table is 0 or 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>254</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurPpuMask_2001</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124067</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E4A3_EnableAllVideo</Label>
      <Comment> then make sure all video is on.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124074</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy all our sprites to OAM.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124053</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set PPUMASK.&#xD;
 Start with curren mask value, but ...</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124084</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset scroll register.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124100</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset PPUADDR.&#xD;
 I believe that the write of $3F00 is unneeded.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17</Address>
      <AddressType>InternalRam</AddressType>
      <Label>IsUpdatingMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124116</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E4D4_WaitVBlankEnd</Label>
      <Comment> If Sprite 0 Hit is set,&#xD;
 then wait for it to be cleared by the ending of VBLANK.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124123</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear shift register.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124126</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wait for Sprite 0 hit, if needed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124184</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E518_UpdateTimers</Label>
      <Comment> If paused or in menu, then don't decrement timers.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124138</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E4EA_CheckScroll</Label>
      <Comment> If updating a game mode instead of initializing one,&#xD;
 then simply scroll for game modes 0, 5, 9, $B, $C, $13.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>253</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurHScroll</Label>
      <Comment> Update nametable scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>252</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurVScroll</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3735</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> At this point,&#xD;
 [$00] = $F - hearts&#xD;
 [$01] = $F - heart containers&#xD;
 [$0D] = Y parameter (starting offset in tile buf)&#xD;
&#xD;
 Also, Y is still set to the value passed in.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3741</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set [$0B] to offset of last heart in top row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3745</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6711_LoopHeartSlot</Label>
      <Comment> For X in 0..$10 (all hearts spots):&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3743</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Y keeps track of index of heart in row.&#xD;
 Start at the end of the first row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3705</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FormatHeartsInTextBuf</Label>
      <Comment> [$0E]: hearts value&#xD;
 [$0F]: heart partial&#xD;
 Y: The offset of first character in buffer&#xD;
&#xD;
 The end of the bottom row is $12 bytes after the&#xD;
 start of the top row. We're writing to two transfer&#xD;
 records. We write the top row in the first transfer&#xD;
 record wherever the caller chooses. The second&#xD;
 transfer record has to begin with the heart tiles.&#xD;
 So, 7 (offset to end of first row) + 3 (size of transfer&#xD;
 header) + 8 (length of bottom row) = 18 ($12).&#xD;
&#xD;
 Store the starting offset in [$0D].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3694</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DivideBy10</Label>
      <Comment> Params:&#xD;
 A: value&#xD;
&#xD;
 Returns:&#xD;
 Y: result&#xD;
 A: remainder&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3669</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FormatDecimalByte</Label>
      <Comment> Formats a decimal byte. Spaces are used for missing digits.&#xD;
&#xD;
 Params:&#xD;
 A: value&#xD;
&#xD;
 Returns:&#xD;
 Y: First character&#xD;
 A: Second character&#xD;
 [$01]: First character&#xD;
 [$02]: Second character&#xD;
 [$03]: Third character&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3428</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FormatDecimalCountByte</Label>
      <Comment> Formats a byte:&#xD;
 123 -&gt; "123"&#xD;
  23 -&gt; "X23"&#xD;
   3 -&gt; "X3 "&#xD;
&#xD;
 Params:&#xD;
 A: value&#xD;
&#xD;
 Returns:&#xD;
 [$01]: First character&#xD;
 [$02]: Second character&#xD;
 [$03]: Third character&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3408</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FormatDecimalCountByteInTextBuf</Label>
      <Comment> Params:&#xD;
 A: value&#xD;
 Y: offset of first character in buffer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3445</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FormatCharDoublet</Label>
      <Comment> Params:&#xD;
 A: character&#xD;
&#xD;
 Returns:&#xD;
 [$02]: character&#xD;
 [$03]: space&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3413</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CopyTripletToTextBuf</Label>
      <Comment> Params:&#xD;
 [$00]: offset to first character in buffer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3328</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FormatStatusBarText</Label>
      <Comment> Copy transfer buf template for status bar text to dynamic buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>770</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DynTileBuf</Label>
      <Comment>TODO: Not sure if the length is 51.</Comment>
      <Flags>None</Flags>
      <Length>51</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106695</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the count was 0 (bottom 6 bits),&#xD;
 then make it 64.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94850</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Submenu_CueTransferRowOW</Label>
      <Comment>&#xD;
&#xD;
 If menu scroll value is negative, then we transferred everything.&#xD;
 So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106677</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If high bit is set, then auto-increment VRAM address by 32.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106702</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A0CE_Loop</Label>
      <Comment> If the original bit 6 is clear,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106704</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then increment Y index (not repeating).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106689</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If bit 6 is set, then repeat one tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106693</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> increment Y index to point to first byte of text.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106701</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We pulled the flags out, and we're left with a count in A.&#xD;
 Move it to X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106742</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferTileBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106714</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we wrote to $3Fxx, then set PPUADDR to $3F00, then $0000.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106749</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> End when we read a negative VRAM address.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106747</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Read high byte of VRAM address.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106663</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Read low byte of VRAM address.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106669</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Read count and attribute byte.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106658</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ContinueTransferTileBuf</Label>
      <Comment>&#xD;
&#xD;
 Save VRAM address high byte.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Empty the tile buffer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106730</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A0EA_AdvanceSource</Label>
      <Comment> Advance the source address to one after the last byte read.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1314</Address>
      <AddressType>InternalRam</AddressType>
      <Label>WhirlwindTeleportingState</Label>
      <Comment> 0: not teleporting&#xD;
 1: in source room&#xD;
 2: in destination room&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3754</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set [$0B] to offset of last heart in bottom row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3747</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If finished first row,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3758</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L671E_FinishedFirstRow</Label>
      <Comment> If there are no hearts,&#xD;
 or still processing missing heart containers;</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3766</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6726_EmitSpace</Label>
      <Comment> Use a blank tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3768</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Go emit it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3801</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Emit chosen tile to buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3772</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> At the boundary heart, go check the partial heart.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3776</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6730_EmitFullHeart</Label>
      <Comment> Use a full heart tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3778</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Go emit it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3774</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If no longer processing missing hearts,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3782</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If partial heart is 0, go emit an empty heart tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3786</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If partial heart at least half full, go emit a full heart tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3790</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> TODO: else, clear [$0529]</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3793</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> and use a half heart tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3797</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6745_EmitEmptyHeart</Label>
      <Comment> Use an empty heart tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124036</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IsrNmi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82568</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ScrollWorldRight</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82538</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scroll left.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82540</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move player right by [00] if not at edge.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82550</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14276</Label>
      <Comment> Update nametable X scroll by speed in [00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82557</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Stop when you've scrolled to the end (CurHScroll=0).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129615</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateObjectWalking</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 Y: animation frame&#xD;
 [00]: object X&#xD;
 [01]: object Y&#xD;
 [0F]: flip horizontal&#xD;
&#xD;
 As the object walks, the animation counter rolls down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82532</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If player does not face left,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82517</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ScrollWorldH</Label>
      <Comment> Use the default scroll speed: 2 pixels a frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82525</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scroll twice as fast if in the overworld.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82528</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14260</Label>
      <Comment> [00] holds the speed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82565</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start basing the horizontal scroll position on NT 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82530</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds the X position where we must start using NT 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82569</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player isn't facing right either,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82571</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then quit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95</Address>
      <AddressType>InternalRam</AddressType>
      <Label>OddBaseNameTableOverride</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82579</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move player left by [00] if not at edge.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82585</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14299</Label>
      <Comment> Update nametable X scroll by speed in [00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82592</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If scroll position hasn't reached 0, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130968</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetMMC1Control</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82980</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7ScrollSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83108</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll_Sub3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83001</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll_Sub0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83070</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll_Sub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83090</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll_Sub2</Label>
      <Comment> Calculates a VScrollingStartFrame value that enables&#xD;
 immediate vertical scrolling in the next frame and submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83167</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll_Sub4</Label>
      <Comment> Transfer new room's attributes to NT 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83176</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll_Sub4And5_TransferNTAttrs</Label>
      <Comment> This will be PPU address $23D0, attributes for top half of play area in NT 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83130</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll_Sub6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83148</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7Scroll_Sub7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82472</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ScrollWorldDownOrH</Label>
      <Comment> If the player is facing down,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82397</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ScrollWorld</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82399</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The purpose of this is to delay vertical scrolling.&#xD;
 OW: once every two frames&#xD;
 UW: once every four frames&#xD;
 Horizontal scrolling happens every frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82411</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player is facing up,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82417</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then scroll up.&#xD;
 Scrolling up starts from the top of NT 2 at $2800.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82419</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the player down 1 tile length if not at edge.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82429</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L141FD</Label>
      <Comment> Subtract $20 from VScroll address for a row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82477</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then scroll down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82479</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the player up 1 tile length, if not at edge.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82489</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14239</Label>
      <Comment> Add $20 to VScroll address for a row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125808</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set horizontal mirroring and our normal PRG ROM bank mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92500</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put an end marker.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92507</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1695B</Label>
      <Comment> Copy a tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4726</Address>
      <AddressType>SaveRam</AddressType>
      <Label>AddToInt16At0</Label>
      <Comment> Params:&#xD;
 A: value 1&#xD;
 [$00:01]: value 2&#xD;
&#xD;
 Returns:&#xD;
 [$00:01]: sum&#xD;
 A: low byte of sum&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>769</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DynTileBufLen</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92495</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Indicate 32 bytes to copy.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>233</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurRow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92452</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyRowToTileBuf</Label>
      <Comment> Put in 00:01 the address of the&#xD;
 first tile of current row in play area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92468</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16934</Label>
      <Comment> Indicate the target VRAM address:&#xD;
 $2100 + (CurRow * $20)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92514</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance to the tile in the same row, but next column of play area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1328</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlayAreaTiles</Label>
      <Comment> Tile map arranged by columns.</Comment>
      <Flags>None</Flags>
      <Length>704</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92382</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyColumnToTileBuf</Label>
      <Comment> Params:&#xD;
 CurColumn: target column + 1&#xD;
&#xD;
 Put $651A in [$00:01]; $16 before $6530 which is the tile map address.&#xD;
&#xD;
 The first iteration of the loop below will add $16 to it before using it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>232</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurColumn</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83206</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyColumnOrRowToTileBuf</Label>
      <Comment> Copies a row if CurRow is valid. Otherwise, tries to copy a column.&#xD;
&#xD;
 If CurRow = PrevRow, does nothing. After a row is copied,&#xD;
 PrevRow is assigned CurRow.&#xD;
&#xD;
&#xD;
 If CurRow is valid, then copy row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83118</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the submode has advanced,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83120</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then invalidate current and previous row, and reset the current column.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>20</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TileBufSelector</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83212</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> unless CurRow = LastRow, then don't repeat</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83221</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14515_CheckColumn</Label>
      <Comment> If 0 &lt; CurColumn &lt; $21, then copy column.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>237</Address>
      <AddressType>InternalRam</AddressType>
      <Label>PrevRow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83233</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WaitAndScrollToSplitBottom</Label>
      <Comment> Wait for Sprite 0 Hit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83270</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If GameSubmode is 0, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83276</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: If facing horizontally, then go update scroll registers.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83292</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set PPUADDR mid-frame to &#xD;
 achieve split-frame scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>227</Address>
      <AddressType>InternalRam</AddressType>
      <Label>IsSprite0CheckActive</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83243</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wait cycles.&#xD;
 TODO: Why do these differ?&#xD;
 (cycle at 8535 - cycle at 852b) = 1005  (see CPU status in debugger)&#xD;
 (multiply instruction timing appropriately) = 1010</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83253</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wait 18 cycles.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124453</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TurnOffAllVideo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83342</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If GameMode &lt; $11,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83344</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then turn off video and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83347</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14593</Label>
      <Comment> else change base nametable (0 -&gt; 1 or 2 -&gt; 3).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83278</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scrolling vertically, will set PPUADDR instead of PPUSCROLL.&#xD;
 Wait about 666 cycles.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83284</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wait 10 cycles.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>88</Address>
      <AddressType>InternalRam</AddressType>
      <Label>VScrollAddrHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>226</Address>
      <AddressType>InternalRam</AddressType>
      <Label>VScrollAddrLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83289</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Prepare for writing to PPUADDR.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124055</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If checking for sprite 0,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124059</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: or TileBufSelector = 0 and [$17] = 0,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106624</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferCurTileBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124461</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ReadInputs</Label>
      <Comment> Signal the controllers to poll.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124466</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Finish polling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124480</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ReadOneController</Label>
      <Comment> Read over and over until you get &#xD;
 two of the same readings in a row&#xD;
 (three from the very beginning).&#xD;
 [02] : previous reading in this loop&#xD;
 [03]/2 : successive matching readings (for each controller)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124482</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Why poll again?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124510</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we didn't get the same reading, then try again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124501</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The expansion port reading will be in [$00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Combine the controller and expansion inputs.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124518</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we didn't get at least two of the same readings, then try again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124531</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now ButtonsPressed means "down now instead of before".</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124498</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Roll the button bits in. Here ButtonsPressed means "down now".</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Random</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124226</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E542_ScrambleRandom</Label>
      <Comment> Scramble the random array.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6181</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DriveAudio</Label>
      <Comment> If the game is paused, then silence all channels&#xD;
 by first disabling them, then enabling them.&#xD;
&#xD;
 Then go drive tune channel 0 only.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32847</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferPatternBlock_Bank2</Label>
      <Comment> Params:&#xD;
 [00:01]: source address&#xD;
 [03:02]: size&#xD;
 A: low byte of desination VRAM address&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124275</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E573_EnableNMI</Label>
      <Comment> Enable NMI.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>235</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4574</Address>
      <AddressType>SaveRam</AddressType>
      <Label>UpdatePlayerPositionMarker</Label>
      <Comment> Return if mode 9 or whirlwind teleporting.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4590</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Sanitize the row of the room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4592</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The rows in status bar map are 4 pixels tall.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4596</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Place the position marker vertically.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4607</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Store the appropriate status bar map left coordinate in [$00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4610</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Isolate the column of the room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4609</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Pop the room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4589</Address>
      <AddressType>SaveRam</AddressType>
      <Label>UpdatePositionMarker</Label>
      <Comment> Params:&#xD;
 A: room ID&#xD;
&#xD;
&#xD;
 Push the room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4616</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> In UW, columns in status bar map are 8 pixels wide.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4617</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> In OW, they are 4 pixels wide.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4619</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Add the status bar map left coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4594</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Add $17 pixels to Y coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4624</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Place the position marker horizontally.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4629</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Use the position marker tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2990</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_TriforceRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124539</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4636</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If we're updating the triforce marker,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124606</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelMasks</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4653</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If player hasn't gotten the piece,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4661</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> then every 16 frames,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4664</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> switch between two palettes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4638</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set up a default "inactive" palette (attribute), which means "not gotten".</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4645</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If you're in level 9, use the "active" palette only.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124549</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If player hasn't gotten the compass, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124537</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateTriforcePositionMarker</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95731</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95723</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HasCompass</Label>
      <Comment> Returns:&#xD;
 A: 0 if compass of current level is missing.&#xD;
&#xD;
&#xD;
 Check compasses.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95727</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HasMap</Label>
      <Comment> Returns:&#xD;
 A: 0 if map of current level is missing.&#xD;
&#xD;
&#xD;
 Check maps.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95738</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in level 9,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95740</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then check the level 9 variables.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95742</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L175FE</Label>
      <Comment> Sanitize the zero-based level number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95734</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Base the level number on zero.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95748</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return the item value for the current level.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>244</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InitializedGame</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125176</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitializeGameOrMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveRamBegin</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8191</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveRamEnd</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125196</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mark Save RAM initialized, so we can check after reset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98519</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyBlock</Label>
      <Comment> Params:&#xD;
 [$00:01]: source address&#xD;
 [$02:03]: destination address&#xD;
 [$04:05]: end destination address&#xD;
&#xD;
 Also increments submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98502</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchDestAddrForCommonDataBlock</Label>
      <Comment> 67F0 to 687D (inclusive)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98444</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyCommonDataToRam</Label>
      <Comment> Get the source address of common data block in ROM.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130934</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set our normal mirroring and PRG ROM bank mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130896</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IsrReset</Label>
      <Comment> Disable interrupts.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130897</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear decimal mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130900</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the PPU to a base state with no NMI.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use CHR RAM bank 0 for PPU address $00000.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130905</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the stack to $01FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130906</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FF5A</Label>
      <Comment> Wait for one VBLANK.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130922</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset all MMC1 shift registers.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>123986</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Enable NMI.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>123968</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RunGame</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95404</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitSaveRam</Label>
      <Comment> Returns:&#xD;
 C: 1 if cleared; 0 if already cleared&#xD;
&#xD;
&#xD;
 If already cleared, then return false.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95460</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return C=1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95418</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L174BA</Label>
      <Comment> Since we're clearing save RAM, treat file B as committed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95429</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Clear from $6530 to the end of Save RAM.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124447</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We overwrote the dynamic transfer buf with zeroes.&#xD;
 But the cleared state of the tile buf has the end marker at&#xD;
 the beginning. Write the end marker.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124424</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ClearRam0300UpTo</Label>
      <Comment> Params:&#xD;
 A: high byte of high address to reset&#xD;
 Y: low byte of high address to reset&#xD;
&#xD;
 Resets all bytes from $300 to byte Y of page A.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>247</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ReturnToBank4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>245</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TransferredCommonPatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>246</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TransferredDemoPatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>243</Address>
      <AddressType>InternalRam</AddressType>
      <Label>_Unknown_F3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95471</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear a few individual variables that are left.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95483</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L174FB</Label>
      <Comment> Clear RAM from 0 to $EF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95491</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The first time looking for an edge cell to spawn a monster&#xD;
 from, look here first.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1590</Address>
      <AddressType>InternalRam</AddressType>
      <Label>IsRegisterSaveFileOptionEnabled</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1591</Address>
      <AddressType>InternalRam</AddressType>
      <Label>IsEliminateSaveFileOptionEnabled</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95498</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> These are part of the IsSaveFileActive array.&#xD;
&#xD;
 Mode 1 Menu checks 5 elements of the array to see&#xD;
 if the option can be chosen. The first 3 are the save&#xD;
 slots. The last two are the register and eliminate options.&#xD;
&#xD;
 So, theses two should always be set.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95464</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ClearRam</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124008</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn off video.&#xD;
 TODO: except clipping is explicitly disabled. Why?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124003</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn on audio except DMC.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124288</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetPpuRegisters</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124317</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make sure to auto-increment VRAM by 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124308</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ClearNameTable</Label>
      <Comment> Params:&#xD;
 A: Hi byte of starting VRAM address&#xD;
 X: Tile number&#xD;
 Y: Tile attribute byte&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124029</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ClearNameTableWithHiAddr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>123998</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ClearAllAudioAndVideo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124342</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ???</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124336</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fill one nametable with the tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124357</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fill the related attributes with the attribute byte.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124383</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E5DF_RestoreX</Label>
      <Comment> Set X to the passed in value.&#xD;
 Y was already its passed in value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32789</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear address latch and scroll.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130916</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment>   in case the first was left over from a previous run.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130913</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FF61</Label>
      <Comment> Wait for another VBLANK.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1322</Address>
      <AddressType>SaveRam</AddressType>
      <Label>IsSaveFileBCommitted</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41823</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make the name 8 spaces.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3591</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Put the address of the profile's whole&#xD;
 WorldFlags block in [$0E:0F].&#xD;
&#xD;
 DASM.EXPR: #&lt;WorldFlags</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1317</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurEdgeSpawnCell</Label>
      <Comment> The previous cell that was checked to try to spawn&#xD;
 a monster from the edge of the screen.&#xD;
&#xD;
 High nibble specifies the square row, and the low nibble&#xD;
 the square column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95462</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L174E6_ReturnFalse</Label>
      <Comment> Return C=0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32841</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset pattern block index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32837</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mark this block copied.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32786</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferCommonPatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1309</Address>
      <AddressType>InternalRam</AddressType>
      <Label>PatternBlockIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19783</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferDemoPatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19786</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear address latch.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124013</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TurnOffVideoAndClearArtifacts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38119</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemoSubphaseClearArtifacts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38213</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemoSubphasePlayTitleSong</Label>
      <Comment> Request the title song.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36864</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemo_RunTasks</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38162</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemoSubphaseTransferTitlePalette</Label>
      <Comment> Write a tile buf record for the title palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38179</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset variables used in this phase.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38201</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mark objects 1 to 10 disabled.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38210</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go advance the DemoSubphase and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38306</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EndInitDemo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38218</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Select transfer buffer 8 (offset $10 in table):&#xD;
 title nametables and attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38126</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TitlePaletteTransferRecord</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>36</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36908</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If no longer updating,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36910</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39019</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase0Subphase0Artifacts</Label>
      <Comment> Set up sprites for the title.&#xD;
 Copy initial sprite data to Sprites area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39003</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TriforcePaletteTransferRecord</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39011</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TriforceGlowingColors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37102</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitialTitleSprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>112</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39157</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateSpritesForWaterfallWave</Label>
      <Comment> Add 2 to current waterfall wave Y.&#xD;
 But keep it in the range $B2..$E3.&#xD;
&#xD;
 DASM.EXPR: TitleWaveYs&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39099</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WaterfallWaveSpriteOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39087</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WaterfallWaveTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39095</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WaterfallSpriteXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39220</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set sprite attributes: normal with palette 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39215</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set sprite Y to rolling value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set sprite X to each part of wave in a row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39195</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Y gets offset of first sprite in current wave.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39200</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9920_LoopSprite</Label>
      <Comment> Get base tile for current sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39198</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each sprite (4) in current wave, indexed by X:</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39204</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Modify the tile according to the current state of the wave.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39225</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance to the next sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39232</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the wave index in X again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1069</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoSubphase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39175</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9907</Label>
      <Comment> Keep a copy of the new value in [$05].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39193</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Keep a copy of the wave index in [$02].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39177</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Depending on the Y coordinate of the wave,&#xD;
 modify the animation state.&#xD;
&#xD;
 &lt; $B9, use tile offset 0&#xD;
 &lt; $C2, use tile offset 8&#xD;
 else, use tile offset $10</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39091</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WaterfallCrestTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39239</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9947_LoopSprite</Label>
      <Comment> Every 16 frames, switch between&#xD;
 the two frames of animation.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39235</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateSpritesForWaterfallCrest</Label>
      <Comment> For each sprite (4) in crest, indexed by X:</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39249</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The Y coordinate is fixed in place.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39254</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set sprite X to each part of crest in a row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39260</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set sprite attributes: normal with palette 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39265</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance to the next sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39112</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Initialize animation values.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39107</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateWaterfallAnimation</Label>
      <Comment> DASM.EXPR: InitializedWaterfallAnimation</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37071</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemo</Label>
      <Comment> DASM.EXPR: DemoPhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1043</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TriforceGlowCycle</Label>
      <Comment> TODO:&#xD;
 0: TriforceGlowCycle&#xD;
 B: CaveFlags&#xD;
&#xD;
 TODO: describe the cave flags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39069</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> When the glow cycle finishes,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39073</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> delay twice as long for one step of the cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39058</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restart the glow timer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39063</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the glow cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39078</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restart the glow cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39033</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> When you reach the end of the glow cycle,&#xD;
 Append a transfer record for the triforce palette.&#xD;
&#xD;
 DASM.EXPR: TriforceGlowTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39049</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Patch the palette record with the color&#xD;
 for the current point in the cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38330</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go advance the demo subphase and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1050</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38316</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase0Subphase0</Label>
      <Comment> Animate while we wait about 512 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38318</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The timer is incremented every other frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39801</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase0Subphase1</Label>
      <Comment> When subphase timer expires,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39273</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoPhase0Subphase1Palettes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>448</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39878</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance to the next demo phase.&#xD;
&#xD;
 DASM.EXPR: DemoPhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39881</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the demo subphase.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39886</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We have to initialize the new demo phase.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1080</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoPhase0Subphase1Timer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39804</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> go update animation only.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39785</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoPhase0Subphase1Delays</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39862</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the subphase cycle.&#xD;
&#xD;
 DASM.EXPR: DemoPhase0Subphase1Cycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39865</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the timer to the delay for the current point in the cycle.&#xD;
&#xD;
 DASM.EXPR: DemoPhase0Subphase1Cycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39876</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we reached the end of the cycle,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39806</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate the address to the palette to transfer.&#xD;
 Addr = DemoPhase0Subphase1Palettes + (DemoPhase0Subphase1Palettes * $20)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39832</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set up the header of the transfer record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39847</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put an end marker at the end.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39854</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9BAE_CopyPalette</Label>
      <Comment> Copy the chosen palette into the transfer record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36944</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36927</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36929</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment>TODO: Else, store $10 in TransferredDemoPatterns. Why?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3817</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SilenceAllSound</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36952</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue transfer record for menu palettes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36898</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Only animate if submode = 0 and SkippedDemo = 0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>22</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurSaveSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41635</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset CurSaveSlot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3527</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAAddressSets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38223</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StoryPaletteTransferRecord</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>36</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38295</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the next subphase and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38259</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemoSubphaseTransferStoryPalette</Label>
      <Comment> Copy the transfer record for the story palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38304</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Select transfer buffer 1 (offset 2 in table):&#xD;
 Story nametables and attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1320</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SkippedDemo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38337</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase1Subphase0</Label>
      <Comment> Increase CurVScroll every odd frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38380</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase1Subphase1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38412</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase1Subphase2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38960</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase1Subphase3</Label>
      <Comment> Delay about 256 frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38972</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase1Subphase4</Label>
      <Comment> Delay 56 frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38360</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L95D8_CheckVScroll</Label>
      <Comment> Scrolling hasn't ended until we've scrolled to the bottom,&#xD;
 wrapped around, and scrolled 8 more lines.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38345</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Have we scrolled to the bottom of nametable 2?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38192</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: InitializedWaterfallAnimation</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38354</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The bottom of NT 2 is also the top of NT 0.&#xD;
 So, reset CurVScroll and the base NT.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1045</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ScrolledScreenCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38391</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L95F7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38388</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the next subphase.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38698</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DisableFallenObjects</Label>
      <Comment> For objects 1..10, indexed by X:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38700</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L972C_Loop</Label>
      <Comment> Once an object has fallen off the top of the screen,&#xD;
 disable it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38706</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the corresponding state to disabled.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38813</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Demo_AnimateObjects</Label>
      <Comment> For each object 1..10, indexed by X:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38425</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every even frame, just return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38702</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The Y coordinate where we consider an object&#xD;
 completely off the screen is $F0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38427</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement the Y coordinate of every object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1051</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ScrolledLineCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38434</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We scrolled one more line.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38440</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once we've scrolled a whole screen,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38442</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the screen count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38445</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L962D</Label>
      <Comment> Have we scrolled 5 screens?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38452</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scroll half a screen more.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38459</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the next subphase.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38450</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scroll the nametable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38457</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scroll the nametable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38469</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we reached the bottom of the screen,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38471</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch the base nametable and reset scroll.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38463</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L963F_Scroll</Label>
      <Comment> Update vertical scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38477</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L964D_CheckLine</Label>
      <Comment> 7/8 of the lines,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38482</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> just return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38484</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But every 8 lines, we have to check for new text and objects.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38817</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object is disabled, then skip it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38819</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38847</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L97BF_PopAndNextObject</Label>
      <Comment> Restore the index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38487</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Append a request to transfer a line.&#xD;
 It's blank by default. Change it later.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1053</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoLineTileVramAddrHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1052</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoLineTileVramAddrLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The next line is 32 bytes farther.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38526</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If crossed a page,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38528</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then increment high address byte,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38531</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> and do the next task.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38534</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9686_CheckNTEnd</Label>
      <Comment> Check if we reached the end of a nametable.&#xD;
 If we did, then set the address to the top of the other one.&#xD;
 $2BC0 -&gt; $2000&#xD;
 $23C0 -&gt; $2800</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38567</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L96A7_CheckText</Label>
      <Comment> Check text and NT attributes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38597</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L96C5_CopyLine</Label>
      <Comment> X is an offset into the destination line.&#xD;
 Y is an offset into the source tiles of the current record.&#xD;
&#xD;
 Get the next source tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1049</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoLineIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37214</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoLineAttrs</Label>
      <Comment> TODO: How long?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38602</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> When you reach the end marker, quit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38604</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy to the tile buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38614</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L96D6_ProcessAttrs</Label>
      <Comment> Finished processing attribute $80.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38617</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance to the next line.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38629</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If attribute $40 is missing, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1048</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoLineAttrVramAddrHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1047</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoLineAttrVramAddrLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38621</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ProcessDemoLineAttrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38631</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Append a second transfer record.&#xD;
 This one is for nametable attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38643</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 8 zeroes in VRAM take up 1 byte in record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38658</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: $416?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38661</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The next attributes go 8 bytes farther.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38670</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check if we reached the end of nametable attributes.&#xD;
 If we did, then set the address to the top of the other one.&#xD;
 $2C00 -&gt; $23C0&#xD;
 $2400 -&gt; $2BC0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38575</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If attribute $80 isn't set, then leave the line blank.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38061</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoLineTextAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>58</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1070</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoLineTextIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38584</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the address of the current text field.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38594</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The first byte of text field is the offset into the line.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38720</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If attribute $20 is present, then instantiate a new object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38714</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ProcessDemoLineItems</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38725</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9745_MakeObject</Label>
      <Comment> Look for the first disabled object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37440</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoLeftItemIds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37462</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoRightItemIds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1071</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DemoItemRow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69255</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TileObjRoomId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124749</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E74D_Flash</Label>
      <Comment>  then every 4 frames,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37530</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoTextFields</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>531</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38744</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start at the bottom of the screen.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37480</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoItemColumnX1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37481</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoItemColumnX2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38760</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link gets a special item ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38762</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go center the object horizontally, if it is Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38764</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Allocate another object for the item on the right.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38738</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Allocate an object for the item on the left.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38791</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Special case: The triforce must be centered.&#xD;
 But it shows up in both column lists.&#xD;
 Two objects were instantiated, but they'll overlap.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38799</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: $430?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38982</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to phase 0 again, and initialize it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38276</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset variables used in this phase.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129683</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Anim_FetchObjPosForSpriteDescriptor</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 A: 0&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
 [0F]: 0 for no horizontal flipping&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38872</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateStationaryFairy</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6534</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_SetSpriteDescriptorRedPaletteRow</Label>
      <Comment> Returns:&#xD;
 A: 2&#xD;
 [04]: left sprite attributes&#xD;
 [05]: right sprite attributes&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38883</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put frame in [$0C].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38879</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 4 frames, switch between 2 animation frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6536</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_SetSpriteDescriptorAttributes</Label>
      <Comment> Params:&#xD;
 A: sprite attributes for both sides&#xD;
&#xD;
 Returns:&#xD;
 [04]: left side sprite attributes&#xD;
 [05]: right side sprite attributes&#xD;
&#xD;
 Doesn't change A.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6277</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteSpritePairNotFlashing</Label>
      <Comment> Access the first sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6248</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteSpritePair</Label>
      <Comment> Params:&#xD;
 [00]: Object X&#xD;
 [01]: Object Y&#xD;
 [02]: Left tile&#xD;
 [03]: Right tile&#xD;
 [04]: Left attributes&#xD;
 [05]: Right attributes&#xD;
 [07]: Has two sides&#xD;
 [08]: Cycle sprite index&#xD;
 [0A]: X separation&#xD;
 [0343]: LeftSpriteOffset&#xD;
 [0344]: RightSpriteOffset&#xD;
&#xD;
 If not currently invincible, then leave the attributes alone.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67778</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L108C2_RandomizeTimer</Label>
      <Comment> Randomize the object timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6253</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> For both left and right sprites, indexed by Y register:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6255</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Toss out the palette bits of the sprite attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6263</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Patch the bottom 2 bits of the invincibility timer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6271</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> This gives us the flashing effect.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>835</Address>
      <AddressType>InternalRam</AddressType>
      <Label>LeftSpriteOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>836</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RightSpriteOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6319</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Increase the index to access the second sprite's properties.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6322</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If there is a right sprite, then go process it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6324</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Put the object index in X again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6312</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Cycle the current sprite index, if needed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6309</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Now point to the other sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6303</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Write the sprite attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6298</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Separate the second sprite appropriately from the first.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6293</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Write the sprite X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6288</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Write the sprite Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6282</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L70FA_LoopSprite</Label>
      <Comment> Write the sprite tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6421</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteItemSprites</Label>
      <Comment> Params:&#xD;
 X: cycle sprite index / object index&#xD;
 Y: item slot&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
 [04]: left sprite attributes&#xD;
 [05]: right sprite attributes&#xD;
 [0C]: frame image&#xD;
 [0F]: flip horizontally&#xD;
&#xD;
 Returns:&#xD;
 [52]: ProcessedNarrowObj&#xD;
&#xD;
&#xD;
 Save the item slot passed in Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6059</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SpriteOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>41</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6427</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Determine the left and right sprite offsets for current sprite index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ProcessedNarrowObj</Label>
      <Comment> Indicates whether object drawing routines wrote 1 sprite for&#xD;
 a narrow / half-width object instead of 2 sprites for a&#xD;
 wide / full-width one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6442</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Restore the item slot passed in.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6444</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteSpecificItemSprites</Label>
      <Comment> Params:&#xD;
 X: cycle sprite index / object index&#xD;
 Y: item slot&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
 [04]: left sprite attributes&#xD;
 [05]: right sprite attributes&#xD;
 [0C]: frame&#xD;
 [0F]: flip horizontally&#xD;
 [0343]: LeftSpriteOffset&#xD;
 [0344]: RightSpriteOffset&#xD;
&#xD;
 Returns:&#xD;
 [52]: ProcessedNarrowObj&#xD;
&#xD;
&#xD;
 Store the object index in [08].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6446</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Assume the object has two sides.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6450</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Both sides are usually separated by 8 pixels.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6464</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [02] gets the tile we just looked up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6467</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The second tile must be two tiles farther in CHR.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6469</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Put it in [03].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1284</Address>
      <AddressType>InternalRam</AddressType>
      <Label>LeftAlignHalfWidthObj</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6488</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If not left-aligning a half-width object,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6490</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Then add 4 to X to center it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6497</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Record that this is a half-width object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6499</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> And mark it as such.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6471</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If left tile is $F3 or in [$20, $62),&#xD;
 then this is a narrow / half-width object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6503</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Finished. Go write sprites.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6514</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Tile &gt;= $7C. Can flip horizontally.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6508</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If tile &lt; $6C, go mark this a slim object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6519</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Both sides of slim objects overlap one pixel.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6521</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteMirroredSpritePair</Label>
      <Comment> Params:&#xD;
 X: cycle sprite index / object index&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
 [02]: left tile&#xD;
 [03]: right tile&#xD;
 [04]: left sprite attributes&#xD;
 [05]: right sprite attributes&#xD;
 [0343]: LeftSpriteOffset&#xD;
 [0344]: RightSpriteOffset&#xD;
&#xD;
&#xD;
 All wide items that we process have mirrored sides.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6525</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Flip the right side horizontally.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6523</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Make the right side the same as the left.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6364</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_ItemFrameTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>48</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6327</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_ItemFrameOffsets</Label>
      <Comment> Maps an item slot to the offset of its first frame in ItemFrameTiles heap.</Comment>
      <Flags>None</Flags>
      <Length>37</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38878</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Rely on the fact that 2 represents normal sprite&#xD;
 attributes with palette 6.&#xD;
 Shift the value to make it 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124686</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateItemObject</Label>
      <Comment> Params:&#xD;
 A: item type&#xD;
 X: object index&#xD;
&#xD;
&#xD;
 Save the item ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124700</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up the item description for this item ID.&#xD;
 Store the item value part of it in [04].&#xD;
&#xD;
&#xD;
 Restore the item ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124695</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pop and return, if timer &gt;= $F0 and even.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4927</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TryTakeItem</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 [04]: item type&#xD;
&#xD;
&#xD;
 If the lifetime timer of the item &gt;= $F0, then return;&#xD;
 so that the player can't pick it up right away.&#xD;
&#xD;
 [03A8][X] is used to count down the life of the item.&#xD;
 DASM.EXPR: Item_ObjItemLifetime&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124687</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the lifetime timer of the item &gt;= $F0 and even, then&#xD;
 return without drawing. This makes it flash at first.&#xD;
&#xD;
 [03A8][X] is used to count down the life of the item.&#xD;
&#xD;
 DASM.EXPR: Item_ObjItemLifetime</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124707</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If item descriptor is $30, go set item value to $FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124709</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> only take the item value part of the descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124711</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E727_SetItemValue</Label>
      <Comment> [04] holds the item value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124721</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E731_SetItemValueFF</Label>
      <Comment> Use item value $FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124701</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> X now has item ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124756</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch between palettes 5 and 6.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124733</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> (A) If the item flashes (slots $16, $19, $1A, $1B),</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124758</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E756_VariesByColor</Label>
      <Comment> (B) If the item varies by color (slots 0, 2, 4, 7, $B),</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6412</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteStaticItemSpritesWithAttributes</Label>
      <Comment> A: sprite attributes&#xD;
 X: cycle sprite index / object index&#xD;
 Y: item slot&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4772</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ItemIdToSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>36</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124713</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get item slot for the item ID, and draw the item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124717</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now X and Y have the item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124780</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0C] refers to frame 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4844</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ItemSlotToPaletteOffsetsOrValues</Label>
      <Comment> Maps an item slot to a value used in calculating the&#xD;
 sprite palette row attribute.&#xD;
&#xD;
 For most items, the value is the sprite palette row attribute&#xD;
 itself.&#xD;
&#xD;
 Some items will use the value as an amount to add to the&#xD;
 item value in the slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>32</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4808</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ItemIdToDescriptor</Label>
      <Comment> Each byte describes an item. The high nibble is the type.&#xD;
 The low nibble is the value. Its meaning depends on the type.&#xD;
&#xD;
 0x - individuals&#xD;
 * unique: value is boolean: you have it or you don't; also value indicates palette row sprite attribute.&#xD;
 * bit mask: value doesn't matter.&#xD;
&#xD;
 1x - amounts&#xD;
 Value is an amount to add.&#xD;
&#xD;
 2x - grades&#xD;
 Value is a grade and palette row. Picking up an item with a lower grade won't change the inventory.&#xD;
&#xD;
 3x - error?&#xD;
 Produces an item value of $FF.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>36</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124788</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add palette offset to item value / sprite attribute we started with.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124784</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write sprites.&#xD;
 A holds the calculated sprite attributes.&#xD;
 Y holds the item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124790</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If item slot is 0 and palette is 6,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124798</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then make the item slot $20, a special slot to differentiate the image of the master sword.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124800</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go write the sprites.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124776</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go add the palette offset we looked up and sprite palette row attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124778</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E76A_WriteSprites</Label>
      <Comment> We got here in one of three ways:&#xD;
&#xD;
 A. The item flashes. Attribute value 1 or 2 was chosen&#xD;
    explicitly.&#xD;
 B. The item color varies. ItemSlotToPaletteOffsetsOrValues&#xD;
    held an offset that was added to base palette attribute&#xD;
    passed in [$04]. This corresponds to class 2 items.&#xD;
 C. Item doesn't change color. ItemSlotToPaletteOffsetsOrValues&#xD;
    held absolute attributes.&#xD;
&#xD;
 At this point, A holds the final sprite attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124730</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawItemBySlot</Label>
      <Comment> Params:&#xD;
 X: item slot&#xD;
 Y: item slot&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
 [04]: item value / sprite palette row attribute&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124725</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawItemInInventory</Label>
      <Comment> Params:&#xD;
 X: item slot&#xD;
 Y: item slot&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38902</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Y gets offset of each row: (low_nibble &amp; $0F) * 6</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38918</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> X gets the offset to the sprite (index * 4).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38903</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put ObjY,ObjX in [$00, $01].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38927</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write sprite Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38938</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write sprite X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38943</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the next sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38947</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9823_SkipSprite</Label>
      <Comment> Add 8 to X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38954</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the sprite index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38913</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For 6 sprites, counted by [$02]:</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38955</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38890</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoStoryFinalItems</Label>
      <Comment> The demo story ending objects use special item types.&#xD;
 The bottom nibble of the item type is an index into two&#xD;
 tables. Each row has 6 bytes, one for each sprite of the&#xD;
 item type.&#xD;
&#xD;
 DASM.EXPR: DemoItemIds&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38919</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9807_LoopSprite</Label>
      <Comment> From this table, get the tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38922</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's zero, skip the sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38929</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> From this table, get the attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37482</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoStoryFinalSpriteTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37506</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoStoryFinalSpriteAttrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106639</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Why put $3F in [$0300]? Is it the maximum size of dynamic transfer buf?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3580</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Copy the save file address set (14 bytes) for the current&#xD;
 save file to [$00] to make it easier to work with.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3569</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FetchFileAAddressSet</Label>
      <Comment> TODO: [08:09]&#xD;
&#xD;
 Returns:&#xD;
 [00:01]: items pointer&#xD;
 [02:03]: world flags pointer&#xD;
 [04:05]: name pointer&#xD;
 [06:07]: IsSaveSlotActive pointer&#xD;
 [08:09]:&#xD;
 [0A:0B]: death count pointer&#xD;
 [0C:0D]: quest pointer&#xD;
 [0E:0F]: profile/save-slot world flags pointer&#xD;
&#xD;
 DASM.SIDE: Calculate the end of the address set for current file.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41809</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AddATo0F0E</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41741</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sum the name (8 bytes).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41735</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalculateFileAChecksum</Label>
      <Comment> Returns:&#xD;
 [0F:0E]: checksum&#xD;
&#xD;
 DASM.SIDE: Reset the sum.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41751</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the Items block ($28 bytes) to [$0F:0E].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41761</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Will count $180 with [01:00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41769</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add World Flags ($180 bytes) to [$0F:0E].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41792</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> IsSaveSlotActive</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41797</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Add byte at [[$08:09]] to [$0F:0E].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41802</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DeathCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41807</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> QuestNumber</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41821</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FormatFileA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41732</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> After checking every file, go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41724</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA2FC_NextSlot</Label>
      <Comment> Advance to the next save slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41637</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For every save file B (3):</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41685</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Are the static markers intact?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41697</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not, then go format the file.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41703</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Does the checksum match?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41716</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not, then format the file.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42891</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> IsSaveSlotActive</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41677</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA2CD_CheckFileA</Label>
      <Comment> Calculate the checksum of the save file.&#xD;
 It's only a sum.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1310</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileOpenMarkers</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1313</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileCloseMarkers</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1316</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FileAChecksums</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41830</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the file's Items block.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41839</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Will count $180 with [01:00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41847</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset World Flags ($180 bytes) at [$02:03].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41871</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the file's IsSaveSlotActive.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41873</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Reset byte at [[$08:09]].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41875</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the file's DeathCount.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41877</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the file's QuestNumber.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41913</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the checksum in the save file.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41903</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the static markers in the save file.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41898</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Since file A is in a good state, we don't care about file B.&#xD;
 Treat it as committed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41887</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Be proactive and reset these values in save slot info.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37008</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to hearts value</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41674</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go process the next slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42027</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AddAToCFCE</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41953</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalculateFileBChecksum</Label>
      <Comment> Returns:&#xD;
 [CF:CE]: checksum&#xD;
&#xD;
 DASM.SIDE: Reset the sum.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40234</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchFileBAddressSet</Label>
      <Comment> TODO: [C8:C9]&#xD;
&#xD;
 Returns:&#xD;
 [C0:C1]: items pointer&#xD;
 [C2:C3]: world flags pointer&#xD;
 [C4:C5]: name pointer&#xD;
 [C6:C7]: IsSaveSlotActive pointer&#xD;
 [C8:C9]:&#xD;
 [CA:CB]: death count pointer&#xD;
 [CC:CD]: quest pointer&#xD;
&#xD;
 DASM.SIDE: Calculate the end of the address set for current file.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41656</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Does the checksum match?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3484</Address>
      <AddressType>SaveRam</AddressType>
      <Label>FileBChecksums</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41669</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not, then go check save file A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40192</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveFileBAddressSets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40245</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the file address set (14 bytes) for the current&#xD;
 save file to [$C0] to make it easier to work with.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41959</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sum the name (8 bytes).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41969</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sum the $28 bytes of the file's Items block with [$CF:CE].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41979</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Will count $180 with [C1:C0].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41987</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add World Flags ($180 bytes) to [CF:CE].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42010</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add IsSaveSlotActive byte to [$CF:CE].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42015</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add DeathCount byte to [$CF:CE].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42020</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Add byte at [[$CA:CB]] to [$CF:CE].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42025</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add byte QuestNumber to [$CF:CE].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42854</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the save file markers.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42862</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the checksum.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42880</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy Items block ($28 bytes) from file B to file A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42852</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyFileBToFileA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42889</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy these individual bytes from file B to file A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42977</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the save file markers.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42987</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the checksum from file B to file A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43005</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> File B has been committed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42930</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the name from file B to file A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42926</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Finish copying IsSaveSlotActive  from file A to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42922</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Finish copying death count from file A to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42918</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Finish copying quest number from file A to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42907</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Push IsSaveSlotActive from file A to help copy it to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42910</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Push death count from file A to help copy it to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42913</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Push quest number from file A to help copy it to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy World Flags ($180 bytes) file B to file A.&#xD;
 It counts up from what's in [$0E:0F] ($067F) to $07FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42877</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: This puts $067F in [$0E:0F].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37062</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the next game mode (Menu).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37064</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're set to initialize the mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95466</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It doesn't touch [$07FF].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85358</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Request Game Over music.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1584</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DeathCounts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85365</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increase the death count for current profile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85368</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Up to the maximum $FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125859</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EndGameMode</Label>
      <Comment> Sets IsUpdatingMode to 0.&#xD;
 Sets submode to 0.&#xD;
&#xD;
 Returns:&#xD;
 A: 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85354</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the Continue Question mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83463</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125494</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue transfer of level palettes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125447</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EA07_Loop</Label>
      <Comment> Clear the room history.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125444</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: [$0529]?&#xD;
 From Loz/ItemObj.cpp:&#xD;
                // The original game skips checking hearts, and shoots, if [$529] is set.&#xD;
                // But, I haven't found any code that sets it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83475</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14613</Label>
      <Comment> Cue the transfer of text and attributes for mode 8.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3216</Address>
      <AddressType>SaveRam</AddressType>
      <Label>BeginUpdateMode</Label>
      <Comment> Returns:&#xD;
 A: 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84727</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the flag is set in submode, then go animate and&#xD;
 handle the selection.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84733</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Start is pressed, go handle it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84739</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Select was pressed,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84741</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play a short sound for it (same as rupee taken).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84758</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14B16_DrawCursor</Label>
      <Comment> Set tile, attributes, and X for selection sprite (0).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84707</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode8BaseSpriteValues</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84710</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode8SpriteYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84724</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode8ContinueQuestion_Full</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84746</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The selection is tracked by the submode.&#xD;
 Increase it. Wrap around, if needed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84778</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14B2A_ActivateOption</Label>
      <Comment> Show in the submode that Start was pressed by setting high bit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84784</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flash the selection for $40 frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84791</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> When the timer expires, go handle the selection.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84716</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode8FlashTransferRecord</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84793</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy to dynamic tile buf the transfer record&#xD;
 for flashing NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84721</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode8FlashAttrsAddrLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84804</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Patch the transfer record to write the low byte of the&#xD;
 appropriate address of the attributes depending on&#xD;
 the selection.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84815</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 4 frames, depending on ObjTimer,&#xD;
 change the NT attribute byte to another palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84829</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14B5D_HandleActivated</Label>
      <Comment> Mask the submode, so that it only holds the selection.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84713</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode8SelectionToMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84838</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the next game mode according to the selection.&#xD;
 3: Continue&#xD;
 D: Save&#xD;
 0: Retry</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84845</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make the player start again with 3 full hearts.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84863</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If player chose Retry,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84868</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start the next mode in submode 1 and updating.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36995</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9083_NextFormatSlot</Label>
      <Comment> Copy death count from file A to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1587</Address>
      <AddressType>InternalRam</AddressType>
      <Label>IsSaveSlotActive</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83488</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If initialized save RAM, then it wasn't previously&#xD;
 initialized or something went wrong.&#xD;
 So, go reset the game.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42680</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateModeDSave_Sub0</Label>
      <Comment> Initialize file B, and copy profile to it.&#xD;
 Calculate and store file B checksum.&#xD;
 Mark file B uncommitted.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42804</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateModeDSave_Sub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43011</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateModeDSave_Sub2</Label>
      <Comment> Go to mode 0 submode 1. Keep it updating.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42039</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FormatFileB</Label>
      <Comment> Clear the name (to all spaces).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42048</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear $28 bytes of the Items block in file.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42057</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Will count $180 with [C1:C0].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42065</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear $180 bytes of World flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42087</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear individual bytes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42100</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Leave the checksum at [$CF:CE].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42107</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mark this file B committed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42692</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy Items block ($28 bytes) from profile to file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42704</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy death count from profile to file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42711</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're saving, so make sure the current slot is active.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42717</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Also set the slot active in the save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1581</Address>
      <AddressType>InternalRam</AddressType>
      <Label>QuestNumbers</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42720</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy quest number from profile to file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42757</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Completely fill the hearts.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42730</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy name from save slot info to file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42739</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put in [$0A] a full hearts value for the profile's heart containers.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43020</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchProfileNameAddress</Label>
      <Comment> Returns:&#xD;
 [0C:0D]: save slot name pointer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42663</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ProfileNameAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42666</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ProfileNameAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42765</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy World Flags ($180 bytes) from profile to file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42801</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43045</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Copy HeartsValue and HeartsPartial to set B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42091</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42689</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: I think this is called only for $067F put in [$0E:0F].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41928</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalculateAndStoreFileBChecksumUncommitted</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41933</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now file B is valid, but uncommitted.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37000</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy quest number from file A to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37012</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9094_LoopHeart</Label>
      <Comment> Load the hearts value or heart partial from Items block in file A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37010</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 0: process hearts value; 1: process heart partial.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37045</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The 3 files are consecutive in the set.&#xD;
 Point to the hearts value in the next slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37049</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go process hearts in the next slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37041</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If X is odd, then go process heart partial instead of hearts value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37037</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There are 6 values total:&#xD;
 (hearts value, hearts partial) * 3 slots.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once we finish the last value, quit the loop.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37036</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the index of the value we check.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37035</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the next byte in Items block.&#xD;
 hearts value -&gt; hearts partial</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37032</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy to hearts in save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37014</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Push either value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37030</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Push the full hearts value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37031</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L90A7_StoreValue</Label>
      <Comment> Pop whatever we pushed: heart partial or full hearts value</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37017</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If X is even, then the value is a hearts value.&#xD;
 So, make the hearts equal the heart containers.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37019</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pop what we pushed, because we're going to push&#xD;
 a modification.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36976</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36994</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1616</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SaveSlotHearts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36990</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fetch the address set for slot 0 again,&#xD;
 so that we can keep referring to its&#xD;
 IsSaveSlotActive address as a table base.&#xD;
&#xD;
 After this, the slot is still not active, but it will&#xD;
 definitely be clear.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36978</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to this slot's addresses.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1592</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Names</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37052</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L90BC_CopyNames</Label>
      <Comment> Copy the name from file A to save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42899</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DeathCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42903</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> QuestNumber</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42895</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1663</Address>
      <AddressType>InternalRam</AddressType>
      <Label>WorldFlags</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>384</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125491</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the value in byte 1 of row 4 of level palettes that will&#xD;
 be transferred.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125454</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveSlotToPaletteRowOffset</Label>
      <Comment> Each element is the offset of a palette row starting from&#xD;
 row 4. Index by save slot number.</Comment>
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125488</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the color at byte 1 of row 4, 5, or 6 of menu palettes,&#xD;
 according to save slot. This holds Link's color in that&#xD;
 save slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2942</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_PalettesTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>36</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125483</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatchAndCueLevelPalettesTransferAndAdvanceSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107188</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode8TextTileBuffer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>31</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42089</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> IsSaveSlotActive</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42093</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DeathCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42095</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> QuestNumber</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42657</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveSlotHeartsAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42660</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveSlotHeartsAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43033</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StoreSaveSlotHearts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42842</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA75A_DiscardFileB</Label>
      <Comment> Discard file B, because it couldn't be validated.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42836</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The checksum matches, so commit and copy file B to A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41610</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode1_Full</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42111</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode1_Sub1</Label>
      <Comment> Reset CurSaveSlot. Doing this is useful for the&#xD;
 work done here, and for the sequence of submodes&#xD;
 that generate and transfer save slot graphics.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42163</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: $529?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42124</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the ring inventory value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41607</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LinkColors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42127</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the color for that ring level.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42130</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the color in the byte 2 of row for current slot in&#xD;
 sprite palette that will be transferred.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42122</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA48A_LoopSlot</Label>
      <Comment> Save ring offset in Items block of current slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore ring offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42135</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the ring in the next save slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42118</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The ring is at this offset in Items block.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42120</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The offset to the byte we want to change in a palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42140</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point one row down in palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42145</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 3 times.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3511</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ResetRoomTileObjInfo</Label>
      <Comment> Returns:&#xD;
 A: 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42147</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42150</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue transfer of menu palettes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42173</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode1_Sub2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106752</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode1TileTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>131</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42270</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode1_Sub6</Label>
      <Comment> Copy the mode 1 death counts transfer buf template to&#xD;
 dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42191</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The first time, this is reset in a previous submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41556</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode1SlotLineTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>32</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42180</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode1_FillAndTransferSlotTiles</Label>
      <Comment> Copy the mode 1 line transfer buf template to&#xD;
 dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42193</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA4D1_OffsetSlotLineAddr</Label>
      <Comment> Add ($60 * CurSaveSlot) to the PPU address of each record in the buffer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42225</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy name of current slot to beginning of payload&#xD;
 of first record in dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42245</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy heart values from current save slot info&#xD;
 to [$0E:0F] for formatting.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42265</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Next time, process the next slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3710</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Put ($F - hearts) in [$00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3722</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Put ($F - heart containers) in [$01].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41588</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode1DeathCountsTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>19</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42287</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The offset where the string will be written in dynamic transfer record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42283</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The save slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42301</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Emit the first character.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42306</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Emit the second character.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42311</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the third character isn't '0', then go emit it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42313</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the first or second characters weren't spaces,&#xD;
 then go ahead and emit the '0'.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42330</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this slot isn't active,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42336</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA560_Emit0</Label>
      <Comment> Else, emit a '0'.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42334</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go emit a space.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42341</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the offset by 6,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42342</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> to the starting position in the next transfer record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42347</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the save slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42353</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go process the next slot, if not done.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42355</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Find the first save slot that's active.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42359</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use room ID $FF, so that mode 3 "Unfurl" will put the player in the room at StartRoomId.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42374</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start updating.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42406</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA5A6_ChangeSelection</Label>
      <Comment> Request to play the selection change SFX (same as rupee taken).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42411</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Select the next slot or option.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42417</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the index is out of bounds,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42419</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then wrap around to zero.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42428</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If option or save slot isn't active, then go advance the index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42425</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Since CurSaveSlot is used to index menu choices, which&#xD;
 includes register and eliminate in addition to save slots;&#xD;
 the IsSaveSlotActive array includes elements at the end&#xD;
 for these options.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42404</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Select was pressed,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42398</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Start was pressed, the go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42430</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the tile, attributes, and X for the sprite record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42377</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode1CursorSpriteTriplet</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42380</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode1CursorSpriteYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42446</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the sprite Y for current option.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42449</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The base Y of Link sprites is $58.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42552</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode1_WriteLinkSprites</Label>
      <Comment> Put the left tile of Link in [$02].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42453</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The X coordinate of Link sprites is $30.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42556</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the right tile of Link in [$03].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42560</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [$04] is used as an index and sprite attributes.&#xD;
 It takes on values 0 to 2.&#xD;
 As an index, it represents a save slot.&#xD;
 As attributes, these values represent palettes 4 to 6.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42565</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We want to start with sprite 4 (offset $10).&#xD;
 Begin with 8, so that the loop will add 8 and&#xD;
 put us at the offset we want.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42574</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Each Link is two sprites (8 bytes).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42580</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The right side is the next sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42585</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This object has two sides (sprites).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42589</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The two sides are 8 pixels apart.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42593</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42600</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42596</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We didn't set [$08]. But we don't care if CurSpriteIndex is cycled.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42603</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use [$04] as a save slot number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42608</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in first quest, then skip the second quest marker.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42639</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA68F_NextSlot</Label>
      <Comment> Move Y down for the next slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42646</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look at the next slot, and use the next palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we're not done, then look at the next slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42631</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the sword $C pixels to the right of Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42613</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the sword 3 pixels below Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42621</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use sword tiles.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42626</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use palette 7.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42618</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use sprites $20 to $23 for the swords.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42482</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not a save slot,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42470</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Begin in OW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42484</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the mode for each option (register, eliminate).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42472</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset item index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42494</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA5FE_ChoseSlot</Label>
      <Comment> The player chose a save slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42500</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy Items block from file A to profile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42697</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42515</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset player state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42517</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset clock item.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy WorldFlags block from file A to profile.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42547</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not done (destination address &lt; $07FF), then copy more.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125857</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GoToNextMode</Label>
      <Comment> Returns:&#xD;
 A: zero&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40465</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeEandF_Full</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40926</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeE_ResetVariables</Label>
      <Comment> Assumes that zero is passed in A.&#xD;
&#xD;
 DASM.EXPR: CharBoardIndex&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40979</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Filter and keep direction buttons.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40477</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle submodes 1 and up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40482</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E22_FormatSlotsB</Label>
      <Comment> Format all file B's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40257</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeFTitleTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>29</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40500</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the title tiles to the dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40515</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode E, overwrite "ELIMINATION MODE" with "REGISTER YOUR NAME".</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40286</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeFTitlePatchRegister</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40530</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E52_SetBufLen</Label>
      <Comment> Record the length of the transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40496</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset CurSaveSlot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40605</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Submode 2:&#xD;
&#xD;
 Cue a transfer of ModeFCharBoardTransferBuf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40603</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle submode 3 and 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40542</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Submode 1:&#xD;
&#xD;
 Copy ModeFSaveSlotTemplateTransferBuf to dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106883</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeFCharsTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>127</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40631</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go cue transfer of menu palettes and advance submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40315</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeFSaveSlotTemplateTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>52</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40553</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Overwrite payload of a dynamic transfer record with a name.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40570</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Skip the header for the next transfer record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40557</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E6D_OverwriteName</Label>
      <Comment> The names are all arranged one after another.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40568</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If copied the whole name,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40575</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there are more names to write, go write the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40581</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode E, overwrite "ELIMINATION" with "REGISTER".</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40304</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeFSaveSlotTemplatePatchRegister</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>11</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40599</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go record the length of the transfer buf, and advance the submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40479</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Submode 0:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40612</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9EA4_CheckSub3</Label>
      <Comment> Submode 3:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40633</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9EB9_Sub4</Label>
      <Comment> Submode 4:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40614</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle submode 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40616</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In mode $E, use $15 for cursor color.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40637</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode E,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40639</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Then look for the first slot that's inactive.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop again. If not found, then CurSaveSlot will be 3 (out of bounds).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40651</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Found one. Quit the loop.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41358</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeEandF_SetUpCursorSprites</Label>
      <Comment> Copy almost 3 sprite records ($B bytes) to byte 1 of&#xD;
 Sprites block. Only sprite 0 byte 0 is missing.&#xD;
 These are the cursor sprites.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40439</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeEandFCursorSprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>11</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40367</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeEandFSlotCursorYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the Y of the slot cursor sprite (#0) according to current save slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41385</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use a heart tile for the slot cursor sprite (#0).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40663</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we're at the "end" option, then hide the char-board cursor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41390</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Because the visible part of the cursor block sprite is&#xD;
 in the bottom, move the name cursor's sprite 8 pixels&#xD;
 above its ObjY.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40670</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9EDE</Label>
      <Comment> The X of Link objects is $50.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40674</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The base Y of Link objects is $30.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40910</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9FCE</Label>
      <Comment> Start was pressed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40905</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Start wasn't pressed,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40907</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Then go handle other buttons and idle time.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40914</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If a slot was chosen, then go delete it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40916</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> "End" was chosen. So, go to mode $E.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41383</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There's more work in mode $E.&#xD;
 The name cursor position is held in ObjX/ObjY[0].&#xD;
 The char-board cursor position is held in ObjX/ObjY[1].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41398</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The base name cursor X is $70.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41402</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The base char-board cursor Y is $87.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41406</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The base char-board cursor X is $30.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41480</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Select was not pressed, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41482</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA20A_ChangeSelection</Label>
      <Comment> Request to play the selection tune (same as rupee taken).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41487</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Choose the next slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41493</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If went out of bounds, then wrap around.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41499</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA21B</Label>
      <Comment> Set sprite Y for new selection.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41509</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode $F, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41511</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move name cursor down $18 pixels.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41476</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateModeEandF_Idle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40938</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40967</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear the name in save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40946</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the appropriate transfer buf of a blank name for&#xD;
 current slot to dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40626</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9EB2</Label>
      <Comment> Replace byte 1 of row 3 of sprite palette in transfer buf&#xD;
 TileBufSelector=$12.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40624</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In mode $F, use $30 for cursor color.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40694</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> or didn't select "End" option,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40700</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9EFC_GoIdle</Label>
      <Comment> then go handle idle time.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40880</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9FB0_Idle</Label>
      <Comment> Handle idle time in mode $E.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40884</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If a slot is chosen,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40886</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then we can check the direction buttons.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41227</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeE_HandleAOrB</Label>
      <Comment> DASM.EXPR: InitializedNameField</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41413</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If name cursor Y corresponds to a save slot,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41417</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> else hide name cursor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41415</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then go write the appropriate Y to name cursor sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41433</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set name cursor sprite X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41463</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModifyFlashingCursorY</Label>
      <Comment> Params:&#xD;
 A: cursor Y&#xD;
&#xD;
 Returns:&#xD;
 Y: adjusted cursor Y, or $F8 to hide it&#xD;
&#xD;
 Description:&#xD;
 Adjust the Y coordinate to account for the visible part of&#xD;
 block cursor being in the bottom half of sprite.&#xD;
 Also, make the cursor flash.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41428</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set name cursor sprite Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41425</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This returns the adjusted coordinate or $F8 to hide it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41467</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 8 frames, put the Y off screen.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41439</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If name cursor Y corresponds to a save slot,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41441</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then go write the appropriate Y to char-board sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41443</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> else hide char-board sprite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41459</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set char-board cursor sprite X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41454</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set char-board cursor sprite Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41411</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeEandF_WriteNameCursorSpritePosition</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41437</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeEandF_WriteCharBoardCursorSpritePosition</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41538</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: InitializedNameField</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40703</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9EFF_ChoseEnd</Label>
      <Comment> Pressed Start over "End" option.&#xD;
&#xD;
 Silence tune channel 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41518</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we're past the "End" option,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41522</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then wrap around.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41526</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA236</Label>
      <Comment> It seems that this should be Sprites+4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41529</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Name cursor X is $70.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40929</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: InitializedNameField</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41548</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If selection is "End" option, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41553</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the slot is not active, then cycle again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If at the "End" option, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40981</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If no button is down, then reset repeat state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41268</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> A or B was pressed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41272</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> A was pressed.&#xD;
&#xD;
 Request to play the character click tune (same as bomb set).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41277</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy our char transfer record header (in [$0422-0424]) to dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41288</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the end marker to dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41300</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the chosen character to dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41294</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> CharBoardIndex in [$041F] will index into character map.&#xD;
 DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40371</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeE_CharMap</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>44</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41297</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the character that's highlighted.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41291</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: NameCharOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41303</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the character in the name.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41306</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA15A_MoveCursor</Label>
      <Comment> Move name cursor right 8 pixels.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41313</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment NameCharOffset [$0421].&#xD;
 DASM.EXPR: NameCharOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40459</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SlotToNameOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41316</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the low VRAM address where next char will go.&#xD;
 DASM.EXPR: NameInputCharBuf+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41319</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If VRAM address still points inside the name field,&#xD;
 then go finish.&#xD;
&#xD;
 The idea is that each name field in nametable begins at&#xD;
 an address ending in $E. For example, slot 0 has a name&#xD;
 at VRAM addresses $20CE to $20D5.&#xD;
&#xD;
 Once the $E becomes a 6, we've gone past the end of&#xD;
 the name field.&#xD;
&#xD;
 Keep in mind that [0423] is the second byte of the transfer&#xD;
 record header.&#xD;
&#xD;
 DASM.EXPR: NameInputCharBuf+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1059</Address>
      <AddressType>InternalRam</AddressType>
      <Label />
      <Comment> The VRAM address now points outside name field.&#xD;
 So, wrap around to the beginning of name field.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41328</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The VRAM address now points outside the name field.&#xD;
 So, wrap around to the beginning of the name field.&#xD;
&#xD;
 For example, $20D6 -&gt; $20CE.&#xD;
&#xD;
 DASM.EXPR: NameInputCharBuf+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41337</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It also means that we went past the end of the save slot&#xD;
 info name. Set the offset to the beginning of the name.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41342</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: NameCharOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41345</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the name cursor has gone past the end of the field,&#xD;
 then wrap around.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41355</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA18B_Exit</Label>
      <Comment> Go set the name cursor sprite X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41270</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If B was pressed, then go move the name cursor only.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41238</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set NameCharOffset [$0421] to the offset of first char&#xD;
 in the current slot's name.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40462</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SlotToInitialNameCharTransferHeaderEndOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40415</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SlotToInitialNameCharTransferHeaders</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41244</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the offset of the end of the initial name character&#xD;
 transfer record header for the current slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41252</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy a byte of transfer header for current slot to [$0422][Y].&#xD;
 DASM.EXPR: NameInputCharBuf</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41247</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Each transfer record header is 3 bytes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41266</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If neither A nor B was pressed, then go finish.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41230</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If InitializedNameField [$0420] is set, then skip initializing&#xD;
 the name field.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41259</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set InitializedNameField [$0420] to mark the name field initialized.&#xD;
 DASM.EXPR: InitializedNameField</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41262</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA12E_CheckAB</Label>
      <Comment> At this point:&#xD;
 - NameCharOffset [$0421] holds the offset of the first character in the save slot info name for the current slot.&#xD;
   - This will be changed as the player inputs characters.&#xD;
 - [$0422] to [$0424] hold a transfer record header. The VRAM address points to the beginning of the appropriate name field in the nametable.&#xD;
   - This will be changed as the player inputs characters.&#xD;
 - InitializedNameField [$0420] is set to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41541</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: NameCharOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40932</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: NameCharOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40999</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store current buttons down.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40997</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we weren't holding a button last frame,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41002</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now we definitely are holding a button.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40983</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetButtonRepeatState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41022</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once the repeat timer reaches zero, handle the direction button again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41024</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, only count down the timer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41028</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA044_ChooseRepeatDelay</Label>
      <Comment> If this is the first button press, then wait $10 frames&#xD;
 to repeat; otherwise wait 8 frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41048</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pressed Right.&#xD;
&#xD;
 Increase CharBoardIndex [$041F] to put cursor at character to the right.&#xD;
&#xD;
 DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41088</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pressed Left.&#xD;
&#xD;
 Decrease CharBoardIndex [$041F] to put cursor at character to the left.&#xD;
&#xD;
 DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41128</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pressed Down.&#xD;
&#xD;
 Increase CharBoardIndex [$041F] by $B (one row down).&#xD;
&#xD;
 DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41163</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pressed Up.&#xD;
&#xD;
 Decrease CharBoardIndex [$041F] by $B (one row up).&#xD;
&#xD;
 DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41161</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If no single direction was pressed, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41196</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Request "selection changed" tune (same as rupee taken).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41051</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the char board cursor right one spot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41060</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If still on the board, then go finish.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41062</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, move the cursor to the left end.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40977</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeE_HandleDirections</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41014</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then reset repeat state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41205</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Add $10 or -$10 ($F0), depending on X passed in (0 or 3).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41200</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CycleCharBoardCursorY</Label>
      <Comment> Params:&#xD;
 X: 0 for down, 3 for up.&#xD;
&#xD;
 Returns:&#xD;
 ModeE_WrappedAroundBoardY [$042A]=1 if wrapped arounnd.&#xD;
&#xD;
 Assume we don't wrap around.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40450</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeE_CharBoardYOffsetsAndBounds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41202</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the char board cursor Y one spot in given direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41210</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look at boundaries.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41214</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we didn't reach the boundary, then return Y=0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41216</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set cursor Y to wrapped around position.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41222</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return ModeE_WrappedAroundBoardY [$042A]=1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41066</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cycle down.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41106</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cycle up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41137</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cycle down.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41172</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cycle up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41074</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If wrapped around to the top,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41076</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then reset CharBoardIndex.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41081</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA079</Label>
      <Comment> Go finish.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41091</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the char board cursor left one spot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41100</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If still on the board, then go finish.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41102</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, move the cursor to the right end.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41114</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If wrapped around to the bottom,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41116</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then set CharBoardIndex to the last index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41121</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA0A1</Label>
      <Comment> Go finish.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1066</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ModeE_WrappedAroundBoardY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41145</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If didn't wrap around, then go finish.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41147</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wrapped around. So, move to top row.&#xD;
 DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41156</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA0C4_Finish</Label>
      <Comment> Go finish.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41180</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If didn't wrap around, then go finish.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41182</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wrapped around. So, move to bottom row.&#xD;
 DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41012</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not the same button as before,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1062</Address>
      <AddressType>InternalRam</AddressType>
      <Label>StillHoldingButton</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1063</Address>
      <AddressType>InternalRam</AddressType>
      <Label>HeldButton</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1065</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ButtonRepeatTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1064</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SubsequentButtonRepeat</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40708</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset SaveFileNameIndex.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40711</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset SaveSlotNameIndex.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40719</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mark save file B committed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40729</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $0426</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40732</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset checksum for current save file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40739</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save current save slot number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40744</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore save slot number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40825</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9F79_NextChar</Label>
      <Comment> Point to the next char in save slot info name.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40828</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the next char in save file B name.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40746</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9F2A_CopyName</Label>
      <Comment> Copy next character from save slot info to file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40836</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't copied 8 characters from save slot info name, then go copy the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40839</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the offset to the next save file B char.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40838</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make X refer to the next slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40847</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If FileBReadyToSave [$0426] is set, then calculate and store the file B checksum, and mark file B uncommitted.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40852</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9F94</Label>
      <Comment> Advance the slot number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40858</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If haven't processed 3 slots,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40860</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then go process the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40716</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> X holds the current slot number</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40759</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we copied a space, then go advance offsets and check things.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40764</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the save slot is active, then go advance offsets and check things.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40865</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $0426</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40868</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset CurSaveSlot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40873</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make sure we stay updating.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40877</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to mode 0 submode 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40714</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset CurSaveSlot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40766</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The save slot is not active.&#xD;
&#xD;
 Initialize file B hearts value to 3 heart containers and 2 hearts.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40772</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Initialize file B heart partial to full.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40777</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Initialize file B's max bombs to 8.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40783</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the current save slot number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40785</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Multiply it by 8 to get offset to current name in save slot info.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40683</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ZeldaString</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40808</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set second quest in file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40814</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9F6E_FlagBReady</Label>
      <Comment> Restore save slot number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40816</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set FileBReadyToSave [$0426].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40841</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> SaveFileNameIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40789</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Compare the name to "ZELDA".</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40797</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's any mismatch, then skip the rest.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40803</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go check the next character until the end of "ZELDA".</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40805</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pop and push the slot number, so we can get it into X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40844</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $0426</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40752</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> SaveFileNameIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41078</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130715</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the timer is already zero, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130717</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every two frames, decrease the timer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127576</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F258_TruncGridOffset</Label>
      <Comment> Grid offset is a multiple of 8. So set it to 0.&#xD;
 If not in mode 5, go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127553</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If mode 4 or 6 (not a playing mode), then go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128643</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjRefId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84537</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle submode 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84268</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If mode is not $B nor $C (caves),</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84622</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14A8E_SilenceSound</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84283</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If coming out of a cave or dungeon, then ...</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84907</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PutLinkBehindBackground</Label>
      <Comment> Change priority of Link sprites $12 and $13 to show them behind the background.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84539</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Submode 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124813</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If pseudo-slot zero is chosen, then go check boomerangs.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124853</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawStatusBarBoomerang</Label>
      <Comment> Check the magic boomerang first.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124858</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have one of the boomerangs, then go draw it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124830</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use only 1 as the palette attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124728</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The item inventory value can also serve as a palette row attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6458</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get the frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96284</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawItemInInventoryWithX</Label>
      <Comment> [$00]: X&#xD;
 [$01]: Y&#xD;
 X: item slot&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124834</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set X and Y coordinates for "B" item in status bar: ($7C, $1F).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124822</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not the letter slot, then go draw it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124892</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's no sword, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124850</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle the sword.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124887</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawStatusBarSword</Label>
      <Comment> Handle the sword.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124894</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set X and Y coordinates for "A" item in status bar: ($94, $1F).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124818</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's no item in the current item slot, then go check for potions and letters.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96200</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FindAndSelectOccupiedItemSlot</Label>
      <Comment> Params:&#xD;
 A: direction to search: 0=none, 1=forward, 2=backward&#xD;
 Y: starting item slot&#xD;
&#xD;
 Returns:&#xD;
 [EF]: direction to search&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96289</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Cycle9InDirection</Label>
      <Comment> Params:&#xD;
 [$EF]: direction to search: 0=none, 1=forward, 2=backward&#xD;
 Y: value to cycle&#xD;
&#xD;
 If A = 0, does nothing.&#xD;
 If A = 1, Y := (Y + 1) mod 9&#xD;
 If A = 2, Y := (Y - 1) mod 9&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96231</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not the arrow, go set SelectedItemSlot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we don't have the bow, then keep looking for a slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96238</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177EE_SetSlotFound</Label>
      <Comment> Set SelectedItemSlot to the slot we found.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96202</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check 9 slots.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96213</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's the bow slot, then skip it. You can't select it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96225</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there are more slots, then check the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96227</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We found no items. Set SelectedItemSlot to zero.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96222</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This is the potion slot, but no potion. Go check the letter.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96218</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Found an item. Go see if the slot is OK.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96269</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's a letter, go see if there's a potion.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There's no letter, so continue searching where we left off.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96278</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's no potion, then go set SelectedItemSlot to the letter slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96264</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17808_CheckLetter</Label>
      <Comment> Check the letter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96242</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177F2_CheckBoomerangs</Label>
      <Comment> Check the boomerangs.&#xD;
&#xD;
 Start with the magical boomerang.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96259</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17803</Label>
      <Comment> Go finish up with pseudo-slot 0 for boomerangs found.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96247</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We have one of the boomerangs. Go use the boomerang pseudo-slot 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96254</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There are no boomerangs. So continue searching where we left off.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is the boomerang pseudo-slot. Go check boomerangs.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124810</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawStatusBarItemsAndEnsureItemSelected</Label>
      <Comment> Draws the selected item and the sword in the status bar.&#xD;
 Before drawing the item, it ensures that SelectedItemSlot&#xD;
 refers to an occupied, equippable item slot.&#xD;
&#xD;
 This accounts for the fallback behavior between potions&#xD;
 and letters and the two boomerangs.&#xD;
&#xD;
 Start at slot zero. Normally, it would be used to&#xD;
 check swords. When it's used as the selected item index;&#xD;
 it's a pseudo-slot used for checking boomerangs.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124912</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the current item slot isn't for potions, then go handle the slot almost as usual.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124917</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we don't have a letter, then go look for an occupied slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124863</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go check the next boomerang.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124867</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> No boomerangs. Go search for an occupied slot starting at 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124882</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go backwards from current slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124875</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E7CB_EnsureSelectedItem</Label>
      <Comment> Not found. Search for an occupied slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124832</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawStatusBarItemB</Label>
      <Comment> Set palette attribute to inventory value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124820</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We have an item. See if it's in the letter slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124827</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have a potion, then go set SelectedItemSlot to its slot, and draw it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124803</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawStatusBarPotion</Label>
      <Comment> We have a potion to draw.&#xD;
&#xD;
&#xD;
 Potion item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124808</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go draw the potion.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124824</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It's in the letter slot. See if we have a potion.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124829</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, we only have a letter.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124914</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This slot is for potions but don't have one. Check the letter.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124919</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We have a letter. Set SelectedItemSlot to its slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124873</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's an item in this slot, then SelectedItemSlot was already&#xD;
 set. Go handle the sword instead of drawing the item.&#xD;
 Next frame, we'll draw this item.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124910</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E7EE_CheckMissingItem</Label>
      <Comment> No item in slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124924</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle the sword (indirectly).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94696</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not filling hearts, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67722</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the maximum number (3) of boulders are active, then&#xD;
 go set the timer to wait a random amount of time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6226</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Otherwise, reverse the two sides.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6236</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set the horizontal flip sprite attributes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6222</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteHorizontallyFlippableSpritePair</Label>
      <Comment> Params:&#xD;
 [00]: Object X&#xD;
 [01]: Object Y&#xD;
 [02]: Left tile&#xD;
 [03]: Right tile&#xD;
 [04]: Left attributes&#xD;
 [05]: Right attributes&#xD;
 [07]: Has two sides&#xD;
 [08]: Cycle sprite index&#xD;
 [0A]: X separation&#xD;
 [0F]: Flip horizontally&#xD;
 [0343]: LeftSpriteOffset&#xD;
 [0344]: RightSpriteOffset&#xD;
&#xD;
 If [0F] = 0, write the sprite pair with no further processing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6419</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Reset frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6417</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Reset horizontal flipping.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5228</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CompareHeartsToContainers</Label>
      <Comment> Returns:&#xD;
 Z: 1 if hearts = containers&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94708</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If HeartPartial &gt;= $F8, go complete a heart.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94725</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If hearts &lt;&gt; heart containers, go increase hearts.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94727</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> They're equal, so make HeartPartial full by&#xD;
 decreasing from 0 to $FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94730</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We reached the end. So stop filling hearts.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94717</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L171FD_CompleteHeart</Label>
      <Comment> Set HeartPartial to zero for the next heart.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94698</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the "heart taken" tune.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94710</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> else add 6.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94694</Address>
      <AddressType>PrgRom</AddressType>
      <Label>World_FillHearts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>99</Address>
      <AddressType>InternalRam</AddressType>
      <Label>World_IsFillingHearts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3266</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If a static transfer buf is already chosen, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3271</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the dynamic transfer buf is already used, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3280</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Index of RupeesToAdd item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3273</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Reset RupeesToAdd or RupeesToSubtract as appropriate,&#xD;
 if reached 0 or max.&#xD;
&#xD;
 Index of RupeesToSubtract item slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3286</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6546_ResetSlot</Label>
      <Comment> Reset the slot we chose.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3284</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If 0 &lt; rupees &lt; $FF, don't reset anything.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3294</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Every two frames, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3299</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If RupeesToAdd &lt;&gt; 0,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3301</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> then add one rupee.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3307</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Play "heart taken" tune, probably because it's more&#xD;
 pleasing for a continuous process than "rupee taken".</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3315</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If RupeesToSubtract = 0, then skip it, and go format header text.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3320</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Subtract one rupee.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3323</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Play the tune for this.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3264</Address>
      <AddressType>SaveRam</AddressType>
      <Label>World_ChangeRupees</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3223</Address>
      <AddressType>SaveRam</AddressType>
      <Label>StatusBarTransferBufTemplate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>41</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3373</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Put an "X" in [$01].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3377</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Put an "A" in formatting buffer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3364</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Key count goes at offset $21.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3382</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3369</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If don't have the magic key, then go format key count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3387</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Have the magic key. Skip formatting key count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127715</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F2E3_CheckWarps</Label>
      <Comment> If in mode 5, check warps.&#xD;
&#xD;
&#xD;
 Set X to 0 to refer to Link object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127564</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's grid offset = 0, go see whether we need to wield the ladder.&#xD;
 If Link's grid offset is not a multiple of 8, go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127546</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84578</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If ObjTimer hasn't expired, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84576</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode11_Sub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84587</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not in a cellar (unique room ID's $3E and $3F),</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91936</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayoutUWFloor</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85117</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Full</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85153</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub0</Label>
      <Comment> Submode 0 prepares top half of play area attributes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85148</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub1</Label>
      <Comment> Submode 1 prepares bottom half of play area attributes.&#xD;
&#xD;
 Play death tune.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85164</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub2</Label>
      <Comment> Updates all play area tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85182</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub3</Label>
      <Comment> Cue transfer of top half of play area attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85187</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub4</Label>
      <Comment> Cue transfer of bottom half of play area attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85192</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85201</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85210</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85243</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub8_AnimateFade</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85249</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Sub9</Label>
      <Comment> Cue the transfer of the dead Link (grey) palette row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85261</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_SubA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85334</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_SubB</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85347</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_SubC</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1328</Address>
      <AddressType>InternalRam</AddressType>
      <Label>PlayAreaAttrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>48</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94433</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyPlayAreaAttrsHalfToDynTransferBuf</Label>
      <Comment> Params:&#xD;
 X: high PPU address&#xD;
 A: low PPU address&#xD;
 Y: end offset in PlayAreaAttrs to copy from&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85156</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CueTransferPlayAreaAttrsHalfAndAdvanceSubmodeNT2</Label>
      <Comment> Params:&#xD;
 A: low PPU address&#xD;
 Y: end offset in PlayAreaAttrs to copy from&#xD;
&#xD;
&#xD;
 Use nametable 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83076</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ChooseAttrSourceAndDestForSubmode</Label>
      <Comment> Results:&#xD;
 A: low PPU address&#xD;
 Y: end offset in PlayAreaAttrs to copy from&#xD;
&#xD;
&#xD;
 Low byte $D0 mean destination PPU address of $23D0, $27D0, $2BD0, or $2FD0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93206</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyNextRowToTransferBuf</Label>
      <Comment> Returns:&#xD;
 C: 1 if copied the last row&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93203</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If done, then go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85172</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14CB4</Label>
      <Comment> Modify the transfer record, so that it changes nametable 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93200</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyNextRowToTransferBufAndAdvanceSubmodeWhenDone</Label>
      <Comment> Returns:&#xD;
 C: 1 if copied the last row&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82862</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Sprite0Descriptor</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82866</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WriteAndEnableSprite0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85184</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14CC0_SelectTransferBufAndAdvanceSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106496</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferBufAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107508</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode11PlayAreaAttrsTopHalfTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107518</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StoryTileAttrTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1131</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85189</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set this TileBufSelector value, and advance submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107513</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode11PlayAreaAttrsBottomHalfTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85198</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set this TileBufSelector value, and advance submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85196</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue transfer of bottom half of background palette for this mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107496</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode11BackgroundPaletteBottomHalfTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85203</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make sure we're using an even nametable number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85212</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once Link has turned enough times, go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85228</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Facing left.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85230</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Face the next direction (down).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85234</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14CF2_DrawLink</Label>
      <Comment> Go redraw Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85239</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Facing right.&#xD;
&#xD;
 Face the next direction (up).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85241</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set the direction and redraw.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85226</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not left, then go check other directions.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85237</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14CF5_CheckOtherDirs</Label>
      <Comment> If not right, then vertical. %A was shifted to become&#xD;
 horizontal direction counter-clockwise from original&#xD;
 vertical direction. Got set it and redraw.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85218</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once ObjTimer[11] expires, arm it again, and change direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85216</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If timer hasn't expired, only redraw sprites.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>229</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DeathTurns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85246</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If done, then go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5305</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the timer hasn't expired, then only delay (return).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5325</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Start writing in dynamic transfer buf from the next position&#xD;
 available. X holds this offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5363</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Store the new position into the dynamic transfer buf as the length.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5358</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Write the end marker.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5343</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Copy 8 bytes of half palette into transfer buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5339</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> %A holds 8. Write that as the length of the record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5328</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Write PPU address $3F08, bottom half of background palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5303</Address>
      <AddressType>SaveRam</AddressType>
      <Label>AnimateWorldFading</Label>
      <Comment> Params:&#xD;
 [$051C]: cycle number&#xD;
&#xD;
 Returns:&#xD;
 Z: 1 if done updating&#xD;
&#xD;
 ObjTimer[12] is the world fade timer. Every 10 frames,&#xD;
 we step to the next half palette. There are 4 steps to fading.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5378</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Update every 10 frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1308</Address>
      <AddressType>InternalRam</AddressType>
      <Label>FadeCycle</Label>
      <Comment> This variable takes on values of the form x0 to x3.&#xD;
 X0 marks the beginning of a cycle, and x3 the end.&#xD;
&#xD;
 The values are mapped to an offset from $6BFA where a&#xD;
 pair of palette rows (8 bytes) can be found.&#xD;
&#xD;
 In general, a value with hex digits XY maps to offset (X0 + Y*8).&#xD;
 For example:&#xD;
 60 =&gt; 60&#xD;
 61 =&gt; 68&#xD;
 62 =&gt; 70&#xD;
 63 =&gt; 78&#xD;
&#xD;
 This works for positive values. To achieve a reverse fade,&#xD;
 add $80 to forward cycle number. So:&#xD;
 20: 20 -&gt; A0: 38&#xD;
 21: 28 -&gt; A1: 30&#xD;
 22: 30 -&gt; A2: 28&#xD;
 23: 38 -&gt; A3: 20&#xD;
&#xD;
 Given this explanation, it can be seen that these are the&#xD;
 start indexes:&#xD;
 Forward cycles:  $00, $20, $40, $60&#xD;
 Backward cycles: $80, $A0, $C0, $E0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5314</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Map cycle value with hex digits XY to offset (X0 + Y*8).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5310</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the cycle number is negative, then this is a reverse fade.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3162</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_DeathPaletteSeries</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>32</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107464</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Mode11DeadLinkPalette</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85259</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set a delay of $17 ($18-1) frames, and advance the submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3066</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_PaletteCycles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85263</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Delay until the timer expires, and we can show the spark.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85314</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play "heart taken" tune.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85312</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not zero yet, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85265</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The little spark tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85271</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: If DeathTurns &gt;= 6, use little spark tile $62.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else use the big one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85277</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use Link's Y for both sides.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85283</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use the spark tile we chose.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85289</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use palette 5 for the left.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85294</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use the same palette, but flip horizontally on the right.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85299</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use Link's X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85310</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Count down how long you see the spark.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85319</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Hide the Link/spark sprites.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85327</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a delay of $2D ($2E-1) frames for the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85336</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the timer hasn't expired, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85338</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a delay of $5F ($60-1) frames for the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107472</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GameOverTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85342</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue transfer of "GAME OVER" text, and advance submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85349</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the timer hasn't expired, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85255</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Here [$E5] means more like spark timer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85267</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Here [$E5] means more like spark timer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84589</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then lay out the doors again. But this seems redundant.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84597</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14A75</Label>
      <Comment> DeathPaletteCycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94543</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeB_Sub1</Label>
      <Comment> Transfer the cave BG palette rows.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92216</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set decreasing column for UpdateWorldCurtainEffect.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92248</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode12EndLevel_Full</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93191</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchTileMapAddr</Label>
      <Comment> Returns:&#xD;
 [$00:01]: address of room tile map</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4724</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Add1ToInt16At0</Label>
      <Comment> Params:&#xD;
 [$00:01]: a 16-bit value to increment&#xD;
&#xD;
 Returns:&#xD;
 [$00:01]: sum&#xD;
 A: low byte of sum&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125144</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FillTileMap</Label>
      <Comment> Params:&#xD;
 [$0A]: tile&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92240</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Triforce item type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129691</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Don't flip horizontally</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124959</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set frame 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124940</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetUpAndDrawLinkLiftingItem</Label>
      <Comment> Params:&#xD;
 [0505]: item type&#xD;
&#xD;
&#xD;
 Set item X the same as Link's.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124944</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set item's Y $10 pixels above Link's.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124956</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set 0 sprite attributes. 0 was returned above.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124961</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to Link's sprites.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124951</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawLinkLiftingItem</Label>
      <Comment> Params:&#xD;
 [0505]: item type&#xD;
&#xD;
&#xD;
 We're dealing with Link object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124982</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now deal with item object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124976</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Temporarily set left alignment.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124994</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Then lift with one hand.&#xD;
 Change the right side to a tile without the arm raised.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1285</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ItemTypeToLift</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124992</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this item is half-width,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92224</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set to delay $2F ($30-1) frames when updating mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92228</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fill tile map with blanks.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92269</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode12EndLevel_Sub0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92279</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode12EndLevel_Sub1</Label>
      <Comment> Flash the screen.&#xD;
&#xD;
 $18 is LevelPaletteTransferBuf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92303</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode12EndLevel_Sub2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92311</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode12EndLevel_Sub3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92331</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode12EndLevel_Sub4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92271</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Delay (return) until timer expires.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set to run next submode for $2F ($30-1) frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92285</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 4 frames, switch palettes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107122</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WhitePaletteBottomHalfTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92291</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> WhitePaletteBottomHalfTransferBuf</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92296</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16888_StartFillingHearts</Label>
      <Comment> Start filling hearts, and go to next submode.&#xD;
&#xD;
 TODO: why 2?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126345</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateHeartsAndRupees</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92308</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If finished filling hearts, then go set the timer for the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92324</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L168A4</Label>
      <Comment> Set up a delay of $7F ($80-1) frames for next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4682</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Delay until ObjTimer[0] expires.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98220</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwitchBank_Local5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98200</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetMMC1Control_Local5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4699</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set vertical nametable mirroring.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92392</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start with X = CurColumn - 1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92394</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fill dynamic transfer buf from last position written.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92397</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use PPU address $21xx: a tile along the first row in play area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92405</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L168F5</Label>
      <Comment> Keep adding $16 until you point to the target column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92413</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> $96: $16 tiles, vertically in nametable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92418</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> X is $FF. Use it as the end marker.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92424</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the tile counter in [$06] and Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92422</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the dynamic transfer buf offset to X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92443</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't copied $16 tiles, then loop again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92428</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1690C</Label>
      <Comment> Load source tile in TileMap.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92430</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store it in dynamic transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92433</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the source address.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92436</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the destination offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92437</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the counter.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4684</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Start with column index in [$7D] ObjX[$D].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4707</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Now reference the column with index in [$7C] ObjX[$C].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4709</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If we copied both columns, then quit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4690</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get current column index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4692</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set CurColumn for column copying routine to use.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4711</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Invalidate CurColumn</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4715</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set a delay of 4 frames (5-1) in ObjTimer[0].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4719</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Change the column indexes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4680</Address>
      <AddressType>SaveRam</AddressType>
      <Label>UpdateWorldCurtainEffect</Label>
      <Comment> Params:&#xD;
 [$7C]/ObjX[$C]: column index that will be decreased + 1&#xD;
 [$7D]/ObjX[$D]: column index that will be increased + 1&#xD;
&#xD;
 Switches to bank 5.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92220</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set increasing column for UpdateWorldCurtainEffect.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92322</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If decreasing column hasn't reached the middle (still &gt;= $11), then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92340</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make sure VRAM address increment is 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95559</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EndGameMode12</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95562</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95564</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set OW (level 0).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95570</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set to type 2: dungeon level.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95572</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Silence the song.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125440</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ClearRoomHistory</Label>
      <Comment> Returns:&#xD;
 A: 0&#xD;
&#xD;
 TODO: Also resets [0529].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125313</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear level kill counts.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49246</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetPatternBlockIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49231</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle UW levels.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49297</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchPatternBlockInfoOW</Label>
      <Comment> Returns:&#xD;
 [$00:01]: source address&#xD;
 [$03:02]: size&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49372</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferPatternBlock_Bank3</Label>
      <Comment> Params:&#xD;
 [$00:01]: source address&#xD;
 [$03:02]: size&#xD;
&#xD;
 Look up and transfer destination PPU address by PatternBlockIndex.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49200</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockPpuAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49390</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start copying.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49392</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LC0F0_LoopCopy</Label>
      <Comment> Transfer 1 byte from source pattern block in ROM to PPU.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49397</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment source address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49410</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49423</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If count is not zero, go copy more.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49431</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mark this block finished, and we're ready for the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49242</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There are two blocks.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49244</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't transferred the second, then go do so.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49196</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockSrcAddrsOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49208</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockSizesOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49192</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockSrcAddrsUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49212</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockSizesUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49152</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelPatternBlockSrcAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49172</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BossPatternBlockSrcAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49204</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockPpuAddrsExtra</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49435</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockUWBG</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2080</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>51515</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockOWBG</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2080</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>53595</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockOWSP</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1824</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>55419</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockUWSP358</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>544</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>55963</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockUWSP469</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>544</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>56507</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockUWSP</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>256</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>56763</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockUWSP127</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>544</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>57307</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockUWSPBoss1257</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1024</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>58331</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockUWSPBoss3468</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1024</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>59355</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatternBlockUWSPBoss9</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1024</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49280</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchPatternBlockAddrUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49356</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchPatternBlockSizeUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49263</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If at block index 1, then go transfer the second block.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49265</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> At this point, we've transferred two common blocks&#xD;
 (BG and sprites). Now UW, transfer bosses and other&#xD;
 specialized sprite patterns.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49324</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchPatternBlockAddrUWSpecial</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49340</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchPatternBlockUWBoss</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49220</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferLevelPatternBlocks</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19720</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Destination address $6C90.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19730</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4D12_Loop</Label>
      <Comment> Copy 1 byte.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19734</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment source address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19747</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment destination address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19760</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once you reach $7F00, you're done.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98398</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1805E_SecondQuest</Label>
      <Comment> Second quest.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98386</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> First quest.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98304</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockAddrsQ1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98346</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockAddrsQ2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98468</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchLevelBlockDestInfo</Label>
      <Comment> Returns:&#xD;
 [$02:03]: destination address&#xD;
 [$04:05]: end address&#xD;
&#xD;
 Destination address $687E.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98476</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> End address $6B7D.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98366</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode2_Submodes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98375</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode2_Sub0</Label>
      <Comment> Copy level block for level.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98416</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode2_Sub1</Label>
      <Comment> Copy level info.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98324</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98485</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchLevelInfoDestInfo</Label>
      <Comment> Returns:&#xD;
 [$02:03]: destination address&#xD;
 [$04:05]: end address&#xD;
&#xD;
 Destination address $6B7E.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98493</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> End address $6C7D.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98569</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode2Load_Full</Label>
      <Comment> Make replacements for the second quest.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98574</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not second quest, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2174</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelBlockAttrsA</Label>
      <Comment> OW:&#xD;
 bits 0-1: palette selector for outer tiles (border)&#xD;
 bit  2:   sea sound effect&#xD;
 bit  3:   zora&#xD;
 bits 4-7: tile column where Link comes out of cave or level&#xD;
&#xD;
 UW:&#xD;
 Outer and S/N:&#xD;
 bits 0-1: palette selector for outer tiles (border)&#xD;
 bit  2-4: S door&#xD;
 bit  5-7: N door&#xD;
 In cellars: destination room ID A&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2302</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelBlockAttrsB</Label>
      <Comment> OW:&#xD;
 Inner:&#xD;
 bits 0-1: palette selector for inner tiles&#xD;
 bits 2-7: cave index&#xD;
&#xD;
 UW:&#xD;
 Inner and E/W:&#xD;
 bits 0-1: palette selector for inner tiles&#xD;
 bits 2-4: E door&#xD;
 bits 5-7: W door&#xD;
 In cellars: destination room ID B&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2430</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelBlockAttrsC</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2558</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelBlockAttrsD</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2686</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelBlockAttrsE</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2814</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelBlockAttrsF</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98578</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If OW, then go patch rooms.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98655</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockAttrsBQ2ReplacementOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98663</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockAttrsBQ2ReplacementValues</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98605</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1812D_PatchQ2Rooms</Label>
      <Comment> Replace attributes of several rooms in OW in second quest.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>99328</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>768</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>100096</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockUW1Q1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>768</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>100864</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockUW2Q1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>768</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>101632</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockUW1Q2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>768</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>102400</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelBlockUW2Q2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>768</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>103168</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>103420</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>103672</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>103924</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>104176</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>104428</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>104680</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>104932</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>105184</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW8</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>105436</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUW9</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>252</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98671</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>57</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98728</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>55</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98783</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>61</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98844</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>57</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98901</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>67</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98968</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>64</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>99032</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>63</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>99095</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements8</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>67</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>99162</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2Replacements9</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>74</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98583</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get an address for the current level that points&#xD;
 to an array of replacement bytes for Q2 UW level info.&#xD;
&#xD;
 This address array doesn't access the OW element (0).&#xD;
 So, it overlaps the last two bytes of LevelInfoUWQ2Replacements9.&#xD;
&#xD;
 DASM.EXPR: LevelInfoUWQ2ReplacementAddrs-2&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>99254</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2ReplacementSizes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98593</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the number of replacement bytes for Q2 UW level info.&#xD;
 This address array doesn't access the OW element (0).&#xD;
&#xD;
 DASM.EXPR: LevelInfoUWQ2ReplacementSizes-1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2983</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_ShortcutOrItemPosArray</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98596</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L18124_ReplaceInfoBytes</Label>
      <Comment> Copy bytes from Q2 replacement array to level info&#xD;
 starting at offset $29 (shortcut position array).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125431</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125457</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2989</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_StartRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125459</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, then go set room ID to StartRoomId.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1318</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CaveSourceRoomId</Label>
      <Comment> The room ID where the player entered a cave.&#xD;
 When leaving a cave, the room ID will be set to this,&#xD;
 unless it's set to $FF. In this case StartRoomId will be used.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125466</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's set to a valid room ID, then start there.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125478</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then keep CaveEnteredRoomId invalid by default.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125476</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If CaveEnteredRoomId was valid,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94208</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94217</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub3_TransferTopHalfAttrs</Label>
      <Comment> Low byte of destination PPU address for NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94224</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub4_TransferBottomHalfAttrs</Label>
      <Comment> Low byte of destination PPU address for NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94230</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub5</Label>
      <Comment> Cue transfer of static elements of status bar.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94237</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94250</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94262</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_Sub8</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82903</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FillPlayAreaAttrs</Label>
      <Comment> Params:&#xD;
 A: room ID&#xD;
&#xD;
 Look up room attributes A for the room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82907</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the outer palette selector from the byte.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82910</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the nametable attributes for the palette selector.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82899</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomPaletteSelectorToNTAttr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82913</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fill the play area NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82921</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up room attributes B for the room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82924</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the inner palette selector.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82927</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fill the inner play area NT attributes (offset 9 to $26).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82971</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go advance the offset and check if we're done.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82930</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Skip left and right edges.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82938</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For the bottom inner NT attribute row, go combine the inner and outer attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82951</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't finished the last inner NT attribute row, then go fill more.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82954</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1440A_CombineInnerOuter</Label>
      <Comment> Combine the NT attributes at current offset with the&#xD;
 new ones we're filling; so that new (inner) attributes&#xD;
 affect the top half of the row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94215</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go cue a transfer of palettes, and go to next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94219</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Offset of the end of first half of play area NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94226</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Offset of the end of second half of play area NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85158</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CueTransferPlayAreaAttrsHalfAndAdvanceSubmode</Label>
      <Comment> Params:&#xD;
 X: high PPU address&#xD;
 A: low PPU address&#xD;
 Y: end offset in PlayAreaAttrs to copy from&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83201</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CueTransferPlayAreaAttrsHalfAndAdvanceSubmodeNT0</Label>
      <Comment> Params:&#xD;
 A: low PPU address&#xD;
 Y: end offset in PlayAreaAttrs to copy from&#xD;
&#xD;
&#xD;
 High byte of destination PPU address for play area attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107219</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StatusBarStaticsTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>67</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94244</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we don't have the map, go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94239</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, skip checking the level's map.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94258</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue transfer of "LEVEL-X" text and go to next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94248</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue transfer of map in status bar, and go to next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3021</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_StatusBarMapTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>45</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2993</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_LevelNumber</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94253</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If level is OW, then go to next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2076</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelNumberTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>11</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94255</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Patch the level number character in "LEVEL-X" transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92350</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L168BE</Label>
      <Comment> Is in OW.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94265</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set up columns numbers for curtain effect.&#xD;
&#xD;
 Decrease from column $F ($10-1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94269</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increase from column $10 ($11-1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94276</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make Link face up by default.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94280</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put Link in the middle horizontally by default.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2982</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_StartY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94284</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put Link at StartY from level info by default.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94272</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92363</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Is in UW.&#xD;
&#xD;
 Fill PlayArea with brick tiles that are seen at the margins.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92356</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayOutRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91210</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the address of second tile in second row of PlayAreaTiles.&#xD;
 This is where we'll start loading tiles for the room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91218</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the address of second last tile in second row of PlayAreaTiles.&#xD;
 This is where we'll stop loading tiles for the room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91240</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tile isn't the vertical line $DE nor anything &gt;= $E2,&#xD;
 then set the bottom tile to the next one, which is flipped&#xD;
 vertically. For example, $E0 =&gt; $E1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the tile at the top and bottom locations.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91226</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load $A pairs of tiles, top and bottom ($14 tiles total).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91256</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4738</Address>
      <AddressType>SaveRam</AddressType>
      <Label>AddToInt16At2</Label>
      <Comment> Params:&#xD;
 A: value 1&#xD;
 [$02:03]: value 2&#xD;
&#xD;
 Returns:&#xD;
 [$02:03]: sum&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4736</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Add1ToInt16At2</Label>
      <Comment> Params:&#xD;
 [$02:03]: a 16-bit value to increment&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4750</Address>
      <AddressType>SaveRam</AddressType>
      <Label>AddToInt16At4</Label>
      <Comment> Params:&#xD;
 A: value 1&#xD;
 [$04:05]: value 2&#xD;
&#xD;
 Returns:&#xD;
 [$04:05]: sum&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4748</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Add1ToInt16At4</Label>
      <Comment> Params:&#xD;
 [$04:05]: a 16-bit value to increment</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4760</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Sub1FromInt16At4</Label>
      <Comment> Params:&#xD;
 [$04:05]: a 16-bit value to decrease&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91258</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If reached the end of the column,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91260</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then count $A tile pairs again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91252</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16474</Label>
      <Comment> Set A to advance to next tile in column.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91264</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set A to advance to next column (at second tile).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91196</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1643C_DecBottomOffset</Label>
      <Comment> Subtract A=1 from bottom offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91268</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16484_MoveWallPtrs</Label>
      <Comment> Increase top offset by 1 tile, or by another amount to get to the next column (at second tile).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91278</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1648E_NextLoopWallTile</Label>
      <Comment> Increment the wall tile list address.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91283</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If wall tile list pointer hasn't reached the end ($94EE), go process tiles again. At this point, we'll have written the walls on the left half of the play area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91232</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16460_LoopWallTile</Label>
      <Comment> Get a tile from wall tile list.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If X was 1, then go subtract 1 from bottom offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91199</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go increment the wall tile list address, and continue.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91254</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 1 means subtract 1 from bottom offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91266</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> $1F means add this amount to bottom offset to move&#xD;
 it to bottom of next column.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91271</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We need the amount to add or subtract in A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91275</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else add the original X value to bottom offset,&#xD;
 intending to move it to the bottom of the next column.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90016</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WallTileList</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91202</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FillWalls</Label>
      <Comment> Load the address of WallTileList.&#xD;
&#xD;
 DASM.EXPR: #&lt;WallTileList&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91188</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16434_ReachedTopWallBottom</Label>
      <Comment> Read a zero tile. Reached the bottom of a top wall.&#xD;
&#xD;
 Set up A and X to move top and bottom offsets to the next column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91285</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy rotated 180 degrees, accounting for appropriate&#xD;
 horizontal or vertical flipping of tiles.&#xD;
&#xD;
 The source is in the top left.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91293</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The destination is the bottom right.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91301</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L164A5_LoopRotate</Label>
      <Comment> Copy 1 tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91307</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is a horizontal line, then go flip it vertically.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91309</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Tiles &gt;= $E0 don't need to be flipped.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91311</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Skip this if tile doesn't need to be flipped.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once source pointer reaches the middle ($6690), we're done.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91315</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If tile &lt; $DC,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91321</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L164B9</Label>
      <Comment> Tiles &gt;= $DC only need 1 added to flip them.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91317</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then tile needs 2 added to rotate it 180 degrees.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91190</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: I think that any value &gt;= 4 would work here;&#xD;
 so that we keep processing the wall tile list.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91194</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go move top and bottom pointers.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91158</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Isolate N/W doors.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91164</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1641C</Label>
      <Comment> Isolate S/E doors, if we jump here.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91130</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Test 4 directions.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91178</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go test the next direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91126</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FindDoorAttrByDoorBit</Label>
      <Comment> Params:&#xD;
 [02]: bitmask for target door.&#xD;
&#xD;
 Returns:&#xD;
 A: door attribute for desired direction in current room.&#xD;
 [01]: same as [02] if found; $10 otherwise&#xD;
 [03]: reverse direction index&#xD;
&#xD;
 Door bits:&#xD;
 1: E&#xD;
 2: W&#xD;
 4: S&#xD;
 8: N&#xD;
&#xD;
&#xD;
 Start with single-bit mask 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91136</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get attr byte A for S/N doors.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91143</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If counter &gt;= 2, then get attr byte B instead for E/W doors.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91150</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1640E</Label>
      <Comment> Store either attribute byte in [$00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91156</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If counter is even, then ...</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91168</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now [$00] holds isolated door attribute.&#xD;
&#xD;
&#xD;
 Test mask passed in [$02] with current single-bit mask in [$01].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91172</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If they match, then go return door attribute for current direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91174</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shift the single-bit mask left.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91180</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else return an invalid door attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91347</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorBits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91402</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If door attribute &gt; 4, go use it as the provisional face.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95809</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalcOpenDoorwayMask</Label>
      <Comment> Call for each direction index (3 to 0) to build an open doorway mask&#xD;
 based on doorway type and room flags. Each call will shift the next&#xD;
 doorway state bit into OpenDoorwayMask.&#xD;
&#xD;
 Params:&#xD;
 A: door attribute&#xD;
 X: direction index&#xD;
&#xD;
 Returns:&#xD;
 A: untouched&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91351</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorFaceTilesAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91355</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorFaceTilesAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91359</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayAreaDoorFaceAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91363</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayAreaDoorFaceAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90094</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorFaceTilesE</Label>
      <Comment> 5 sets of 12 bytes laying out door faces facing E.</Comment>
      <Flags>None</Flags>
      <Length>60</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90274</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorFaceTilesN</Label>
      <Comment> 5 sets of 12 bytes laying out door faces facing N.</Comment>
      <Flags>None</Flags>
      <Length>60</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91593</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L165C9</Label>
      <Comment> Add ($C * (face - 1)) to [$02:03].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90154</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorFaceTilesW</Label>
      <Comment> 5 sets of 12 bytes laying out door faces facing W.</Comment>
      <Flags>None</Flags>
      <Length>60</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90214</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorFaceTilesS</Label>
      <Comment> 5 sets of 12 bytes laying out door faces facing S.</Comment>
      <Flags>None</Flags>
      <Length>60</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91572</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FetchDoorAddrsFaceTilesSrcAndPlayAreaDst</Label>
      <Comment> Params:&#xD;
 A: direction index&#xD;
 Y: face index&#xD;
&#xD;
 Returns:&#xD;
 X: direction index&#xD;
 [$00:01]: address of door inside play area tile map&#xD;
 [$02:03]: address of door tiles for direction and face&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91374</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DirIndexToDoorColumnCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91378</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DirIndexToDoorRowCountMinusOne</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91524</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16584_LoopRowTile</Label>
      <Comment> Copy 1 door tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91510</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16576</Label>
      <Comment> Fix Y at 0 for copying source tiles to destination.&#xD;
 Pointers will be incremented instead of Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91528</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment source tile address.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91517</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1657D_LoopColumn</Label>
      <Comment> For each column (3 or 2), indexed by [05] down to 1:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91490</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16562</Label>
      <Comment> Now Y holds the door face index (DFC closed, DFO opened) for the door type (DT).&#xD;
&#xD;
 DT DFC DFO Meaning&#xD;
 ------------------&#xD;
 0  1   1   open&#xD;
 4  4   5   bombable&#xD;
 5  2   1   key&#xD;
 6  2   1   key 2&#xD;
 7  3   1   shutter&#xD;
&#xD;
&#xD;
 Get the direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91518</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the direction index in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91541</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put direction index in A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91545</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction index is horizontal (&lt; 2),</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91567</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If finished the last door (X &lt; 0), then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91566</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L165AE</Label>
      <Comment> Bottom of the door loop.&#xD;
 Decrement door index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91382</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayOutDoors</Label>
      <Comment> Copies the right door face for the direction, type, and state&#xD;
 of the door to the play area tile map.&#xD;
&#xD;
 Also, clears door bits from CurOpenedDoors of doorways&#xD;
 that are not true doors.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91395</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] holds the direction (bit) for the current door.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91390</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0B] holds direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91389</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the current direction index (door index).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91467</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0B] direction index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95811</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save door attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95847</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If door attribute is "open", carry is set, and go shift a 1 into the mask.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95850</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Door attribute is a wall, carry is clear, and go shift a 0 into the mask.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95843</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore door attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91557</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L165A5_NextLoopDoorHalf</Label>
      <Comment> Bottom of the door halves loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91558</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore X to the door index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91400</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Begin looking for the door face for the door attribute.&#xD;
 In general, use the door type as the provisional face;&#xD;
 except turn 4 into 8.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91410</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Door attribute = 4, go use 8 as the provisional face.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91406</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Door attribute &lt; 4, go process it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91417</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] current direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91416</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16518_ClearFromOpenedMask</Label>
      <Comment> Door attribute &lt; 4 (open or any wall), clear door bit from&#xD;
 the mask of opened doors, because this is not a true door.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91457</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the provisional door face = 8 (closed "bombable"),&#xD;
 then go make it 9 (open "bombable").&#xD;
 Else make it 4 (open "door").&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91433</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the current direction points to a door that has been opened,&#xD;
 then see if we need to set door flags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91432</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16528_DoneClosedPF</Label>
      <Comment> The door attribute (DA) has been mapped to a&#xD;
 provisional door face value (PF) in %A as follows:&#xD;
&#xD;
 DA PF Meaning&#xD;
 -------------&#xD;
 0  4  open&#xD;
 1  1  wall&#xD;
 2  2  false wall&#xD;
 3  3  false wall 2&#xD;
 4  8  bombable&#xD;
 5  5  key&#xD;
 6  6  key 2&#xD;
 7  7  shutter&#xD;
&#xD;
 Also at this point, the door bit in CurOpenedDoors&#xD;
 has been cleared, if the type was "open" or any wall.&#xD;
&#xD;
&#xD;
 Save the provisional face.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91477</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16555</Label>
      <Comment> If provisional door face &lt; 4 (any wall), then go loop another half,&#xD;
 because the visible door face is already a wall.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91481</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For all other provisional face values, calculate:&#xD;
 door face := provisional face - 3</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91515</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [05] holds the column count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91505</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance source tile address to the second half of door.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91370</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DirIndexToDoorSecondHalfOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91499</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance destination tile address to the second half of door.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91495</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If handling the second half, then offset to the second half&#xD;
 of the tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91386</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each half of a door, indexed by [06], from 1 to 0:&#xD;
&#xD;
 [06] indicates whether we're handling the first half of&#xD;
 the door: Left half for N/S, Top half for E/W.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82685</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each row (2 or 3) in the door, indexed by X,&#xD;
 starting from highest index down to 0:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91531</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the offset needed for the next play area tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91367</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NextDoorTileOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91550</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1659E</Label>
      <Comment> Bottom of the tile row copying loop.&#xD;
 Decrement the row index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91537</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we're at the last row, and the direction is horizontal (&lt; 2), then&#xD;
 go 1 more tile down, to start the next column at the right place.&#xD;
 We have to compensate for the fact that E/W doors are &#xD;
 shorter vertically than N/S doors.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91553</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the column copying loop.&#xD;
 Decrease the column counter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91559</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement [06] door half counter.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91563</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then go handle it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91569</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle the next door.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91463</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16547_DoneOpenPF</Label>
      <Comment> For opened doors, the provisional door face has become:&#xD;
&#xD;
 DA PF Meaning&#xD;
 -------------&#xD;
 0  4  open&#xD;
 1  1  wall&#xD;
 2  2  false wall&#xD;
 3  3  false wall 2&#xD;
 4  9  bombable&#xD;
 5  4  key&#xD;
 6  4  key 2&#xD;
 7  4  shutter&#xD;
&#xD;
&#xD;
 If handling the first half [06], then calculate OpenDoorwayMask.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125018</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetUniqueRoomId</Label>
      <Comment> Returns:&#xD;
 A: unique room ID&#xD;
 Y: room ID&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>238</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurOpenedDoors</Label>
      <Comment> Only true doors that have been opened are represented&#xD;
 in this mask.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82882</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetEnteringDoorwayAsCurOpenedDoors</Label>
      <Comment> Calculate the opposite of the player's direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91443</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The current direction points to a door that has been opened.&#xD;
 It can only be "bombable", "key", "key 2", or "shutter".&#xD;
&#xD;
&#xD;
 Save provisional door face in Y register.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91446</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put direction index in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91447</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore provisional door face value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1313</Address>
      <AddressType>InternalRam</AddressType>
      <Label>PrevOpenedDoors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>831</Address>
      <AddressType>InternalRam</AddressType>
      <Label>OpenDoorwayMask</Label>
      <Comment> Each bit of OpenDoorwayMask corresponds to a direction,&#xD;
 and holds the walkable state of each doorway:&#xD;
 1 = open/walkable, 0 = closed/not walkable.&#xD;
&#xD;
 Built by successive calls to CalcOpenDoorwayMask, which&#xD;
 looks at doorway type and room flags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91438</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the provisional face.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95814</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If door attribute &lt; 4 (open or any wall), go shift the appropriate bit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95817</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95819</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Save Y=0?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2991</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_WorldFlagsAddr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124622</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetRoomFlags</Label>
      <Comment> Returns:&#xD;
 A: flags for the room in level block world flags&#xD;
 Y: room ID&#xD;
 [$00:01]: address of level block world flags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95824</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> AND room flags with single-bit mask for direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95827</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If result is not zero, then door hasn been opened,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95829</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> and set carry, so that a 1 will be shifted into the mask.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95823</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear carry to anticipate a zero AND result, meaning not walkable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95831</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Restore Y=0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95833</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore direction index in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95845</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17665_ByDoorType</Label>
      <Comment> The door attribute indicates the walkability.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95816</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else we have to find out the walkability from the room flags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82683</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayOutDoorsPrev</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95852</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AddDoorFlagsToCurOpenedDoors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84631</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetDoorFlag</Label>
      <Comment> Params:&#xD;
 X: door direction index&#xD;
&#xD;
 Returns:&#xD;
 Y: room ID&#xD;
 [00:01]: address of level block world flags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91450</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If provisional door face is for "key" or "bombable",</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91453</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then set the door's flag.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91448</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If provisional door face is not for a shutter, then&#xD;
 it's for a "key" or "bombable". So, set the door's flag.&#xD;
&#xD;
 Else it is for a shutter. Go set provisional door face to 4.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save unique room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91948</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore unique room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91949</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add ((unique room ID) * $C) to address in [$02:03]. Each unique room has $C columns.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91940</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the address of room column directory in [$02:03].&#xD;
 DASM.EXPR: #&lt;RoomLayoutsUW</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91966</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the address of top-left tile in floor of play area in [$00:01].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91980</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get a column descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91974</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each column in room, indexed by [06]:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90334</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomLayoutsUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>504</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90838</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91060</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomLayoutUWCellar0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91092</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUWCellar</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>34</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91982</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put column table number * 2 in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91988</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the column table address for this descriptor in [$04:05].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91998</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the column descriptor again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92000</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put column index in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92005</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16765_FindSquare</Label>
      <Comment> Get a square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92016</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16770_FoundColumn</Label>
      <Comment> We found the column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92007</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If high bit is set,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92009</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then we've found the beginning of a column;</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92010</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is the column we want, then go handle it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92012</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1676C</Label>
      <Comment> Increment the square descriptor offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92013</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go get the next square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92017</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the square descriptor pointer by the offset, so we don't have to keep the offset in Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92028</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92048</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92022</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset processed row count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91928</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PrimarySquaresUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92030</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the square index from the descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92097</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WriteSquareUW</Label>
      <Comment> Params:&#xD;
 A: primary square&#xD;
 Y: offset from [$00:01]&#xD;
 [$00:01]: pointer to play area&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92105</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Type 1 square.&#xD;
 Primary is the first tile. Next 3 tiles in CHR form the rest of the square.&#xD;
 Primary &gt;= $70 and &lt; $F3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92128</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L167E0_WriteType2</Label>
      <Comment> Type 2 square.&#xD;
 Primary is a tile used for the whole square.&#xD;
 Primary &lt; $70 or &gt;= $F3.&#xD;
&#xD;
&#xD;
 Write tile to (col, row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92106</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+0 to (col, row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92111</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+1 to (col, row+1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92120</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+2 to (col+1, row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92125</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write last tile to (col+1, row+1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92131</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile to (col, row+1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92140</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile to (col+1, row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92142</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go write tile to (col+1, row+1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92041</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to next square in column in play area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92050</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Isolate the count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92026</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1677A_LoopSquareRow</Label>
      <Comment> Write and repeat squares from the column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92024</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset repeat count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92069</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the next square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92065</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L167A1</Label>
      <Comment> Reset repeat count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92080</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move 2 columns right and to the top of the floor area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92076</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There are 7 square rows in UW floor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92078</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't written 7 rows, then go process a square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92072</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L167A8_NextLoopSquareRow</Label>
      <Comment> Increment the processed row count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92060</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then increment the processed repeat count;</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92062</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> and go increment the row, and check if we're done in this column.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92058</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't repeated this square as specified,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92085</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment column index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92091</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't processed all columns,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92093</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then go process the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92660</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayoutRoomOW</Label>
      <Comment> Load the address of room column directory in [$02:03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92670</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset [06] for use in multiplication below.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90012</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomLayoutsOWAddr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92674</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get unique room ID (OW).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92679</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add ((unique room ID) * $10) to address in [$02:03]. Each unique room has $10 columns.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92676</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The low 6 bits have the unique room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92699</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayoutRoomOrCaveOW</Label>
      <Comment> Params:&#xD;
 [02:03]: address of room column directory&#xD;
&#xD;
 Load the address of world flags in [$08:09].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92714</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset [$0C] used for tracking repeat state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2087</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ColumnDirectoryOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>32</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92720</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get a column descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92712</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each column in room, indexed by [06]:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92738</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the column descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92722</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put column table number * 2 in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92728</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the column table address for this descriptor in [$04:05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92740</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put column index in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92746</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get a square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92748</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If high bit is clear, then go read the next square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89048</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>53</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>87064</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomLayoutsOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1936</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92745</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16A49</Label>
      <Comment> Look for the beginning of a column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92751</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this isn't the column we want, then go keep looking.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92753</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We found the column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92754</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the square descriptor pointer by the offset, so we don't have to keep the offset in Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92757</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset row number in [07].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92763</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92774</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get room flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92765</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get square index and put it in [$0D] and X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92913</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WriteSquareOW</Label>
      <Comment> Params:&#xD;
 A: primary square&#xD;
 Y: offset from [$00:01]&#xD;
 [$0D]: square index&#xD;
 [$00:01]: pointer to play area&#xD;
&#xD;
&#xD;
 Get square index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92780</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the secret wasn't found in this room, then skip all this.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92773</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save primary square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92782</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore primary square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92878</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the primary isn't between $E5 to $EA, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92871</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we found the primary, go handle it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92534</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TileObjectPrimarySquaresOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92899</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get current row in play area where we'll put a square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92890</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get current column in play area where we'll put a square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92892</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the X coordinate of tile object (column * $10).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92901</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the Y coordinate of tile object ((row * $10) + $40).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92883</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save primary square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92911</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore primary square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92863</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckTileObject</Label>
      <Comment> Params:&#xD;
 A: primary square&#xD;
&#xD;
 Returns:&#xD;
 A: primary square corresponding to tile object, else argument&#xD;
&#xD;
&#xD;
 Find the index X corresponding to the primary square: $E5  =&gt; 0; $EA =&gt; 5.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1323</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomTileObjType</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92785</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is a tree, go turn it into stairs.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92783</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The secret was found in this room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92540</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PrimarySquaresOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>56</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92917</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If square index &lt; $10, go handle a secondary square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92919</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Type 1 square.&#xD;
 Primary is the first tile. Next 3 tiles in CHR form the rest of the square.&#xD;
 Square index &gt;= $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92942</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16B0E_WriteType3</Label>
      <Comment> Type 3 square.&#xD;
 Square index refers to a set of 4 tile indexes in secondary squares table.&#xD;
 Square index &lt; $10.&#xD;
&#xD;
&#xD;
 X := (square index * 4)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92920</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+0 to (col, row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92925</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+1 to (col, row+1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92934</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+2 to (col+1, row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write last tile to (col+1, row+1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92596</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SecondarySquaresOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>64</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92949</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+0 to (col, row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92956</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+1 to (col, row+1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92967</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile+2 to (col+1, row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92973</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go write tile+3 to (col+1, row+1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92817</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to next square in column in play area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92824</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92828</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we need to repeat this tile,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92830</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then flip [$0C].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92834</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> After the second time flipping it, [$0C] = 0, and we've repeated it once. So,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92836</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16AA4_NextSquare</Label>
      <Comment> Point to the next square descriptor.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92839</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16AA7</Label>
      <Comment> Increment the processed row count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92843</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There are $B square rows in the play area.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92845</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't written $B rows, then go process a square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92847</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> At the end of a column, we've reached the top of the next one.&#xD;
 Move one more column over to get to the next square column.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92852</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment column index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92858</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have processed all columns, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92860</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go process the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92528</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TileObjectTypes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92789</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is a rock wall, go turn it into a cave entrance.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92793</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this not a special armos, go leave the primary as is.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92795</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16A7B_MakeStairs</Label>
      <Comment> This is a tree or a special armos ($EA).&#xD;
 Set the primary to stairs ($70), and square index to the&#xD;
 first value ($10) for a type 1 square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92803</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16A83_MakeCave</Label>
      <Comment> This is a rock wall. Turn it into a cave entrance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92808</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16A88_SkipSecret</Label>
      <Comment> Restore primary square, if it wasn't modified above.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1324</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomTileObjX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1325</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomTileObjY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93047</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player found the secret, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93053</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the shortcut wasn't seen in this room, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4495</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Isolate shortcut or item position index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4502</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get one of the 4 positions.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4505</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Save position.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4513</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Restore position.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4490</Address>
      <AddressType>SaveRam</AddressType>
      <Label>GetShortcutOrItemXY</Label>
      <Comment> Returns:&#xD;
 A: X coordinate of shortcut (OW) or item (UW)&#xD;
 Y: Y coordinate of shortcut (OW) or item (UW)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93061</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Divide X coordinate by 4 to get offset into column address table.&#xD;
 Think of it this way. Divide X by 8 to get tile column number.&#xD;
 Then multiply by 2 to turn it into an offset for an address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93064</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put address of column that has X coordinate into [$00:01].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93074</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract $40 from X coordinate to get rid of status bar.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93078</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Divide new Y coordinate by 8 to get a tile row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93082</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the tile that's where the shortcut should be.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93086</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's a tree, go prepare a stairs square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93090</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's a gravestone, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93094</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not a rock wall, then go prepare a stairs square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93081</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Keep tile row (offset) in Y register.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93122</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go write a stairs square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93116</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16BBC_WriteStairs</Label>
      <Comment> The first type 1 square index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93043</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckShortcut</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4492</Address>
      <AddressType>SaveRam</AddressType>
      <Label>GetShortcutOrItemXYForRoom</Label>
      <Comment> Params:&#xD;
 Y: room ID&#xD;
&#xD;
 Returns:&#xD;
 A: X coordinate of shortcut (OW) or item (UW)&#xD;
 Y: Y coordinate of shortcut (OW) or item (UW)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93101</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the room's tile object is a rock, go prepare a stairs square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93103</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else make the tile object nothing, and write a black tile.&#xD;
 But this branch seems to be unused.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90014</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOWAddr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92976</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatchColumnDirectoryForCellar</Label>
      <Comment> In OW, set first address of directory to start of OW column heap, as expected.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92986</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In UW, set the first address of column directory to start of UW cellar column heap.&#xD;
&#xD;
 DASM.EXPR: #&lt;ColumnHeapUWCellar</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2068</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2032</Address>
      <AddressType>SaveRam</AddressType>
      <Label>MenuPalettesTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>36</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98344</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonDataBlockAddr_Bank6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>105688</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonDataBlock_Bank6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>142</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49068</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwitchBank_Local2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125871</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the left column hasn't reached the left edge, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125873</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set horizontal mirroring.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2994</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_CellarRoomIdArray</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125882</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> go to next mode, and reset Link's relative position.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125885</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EBBD</Label>
      <Comment> Else go play level song, next mode, and reset Link's relative position.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125920</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelSongIds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125935</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the song for the level.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83910</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode_EnterRoom</Label>
      <Comment> TODO: Is also called for modes 9, $B, $C.&#xD;
&#xD;
 Description:&#xD;
 Clears intraroom data.&#xD;
 Set up Link to walk into a room.&#xD;
 Decodes and lays out objects.&#xD;
 Switches from initializing the game mode to updating it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2988</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_StatusBarMapXOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4599</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Map X at $11 in OW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4605</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Map X at $12 in UW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4621</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Add a horizontal offset from level info to center the map.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125355</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not checking sprite 0, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> horizontal mirroring</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125373</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E9BD_SetVertical</Label>
      <Comment> vertical mirroring</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125363</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If player is facing horizontally, then enable vertical mirroring;&#xD;
 else horizontal mirroring.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125357</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> After the last submode (5 or 6), sprite-0 check was enabled.&#xD;
 So, set the appropriate mirroring for scrolling during mode update.&#xD;
&#xD;
&#xD;
 TODO: [$F3] ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82600</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7Submodes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82719</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7_Sub2</Label>
      <Comment> This transfers a room's play area tiles to nametable 2.&#xD;
&#xD;
 CurRow starts at the bottom ($15).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92517</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance to the next tile in the row in transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92503</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy a row from column map in RAM to tile buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92522</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The transfer buf is $23 bytes (3 for header, $20 for payload).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't written $20 tiles, then go write another.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82725</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change the target nametable from 0 to 2.&#xD;
&#xD;
 Because there's only a play area and no status bar in&#xD;
 nametable 2, you have to add 7 to the high byte instead of 8.&#xD;
 So, the top of the play area in NT 0 is at $2100.&#xD;
 But the top of the play area in NT 2 is at $2800.&#xD;
&#xD;
 This assumes that you want to scroll vertically, where the&#xD;
 two scroll areas must be contiguous vertically.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82739</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then you DO have to account for the status bar.&#xD;
 So, add $100 (by incrementing high byte) to move&#xD;
 everything down 64 pixels.&#xD;
&#xD;
 Now the play areas will line up in NT 0 and NT 2 when&#xD;
 we change mirroring to vertical at the end of this mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82702</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7_Sub0</Label>
      <Comment> If teleporting, then set the room ID to the one that will&#xD;
 make it look like we scrolled to a dungeon entrance.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>236</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NextRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82642</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If next room ID is invalid, then return because&#xD;
 something went wrong calculating it.&#xD;
 The mode was changed to load the OW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82646</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save current room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82673</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L142F1_RestoreRoomId</Label>
      <Comment> Restore current room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82625</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Assign the current opened doors to the previous one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124575</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The same as [02].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124577</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalculateNextRoom_TableJump</Label>
      <Comment> TODO: Set [E7] to a door bit/direction bit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124579</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> A holds the door attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95524</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] holds a single-bit mask to compare</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95526</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95519</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go test next bit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95516</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1751C</Label>
      <Comment> Shift single-bit mask.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95537</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: [$04E4] holds unique room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95540</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up offset used to calculate next room ID from current one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95507</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NextRoomIdOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95546</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Adding the offset to RoomId yields the room ID in the desired direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124559</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalculateNextRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95557</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the next room ID is invalid, then fall thru, and reload OW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82651</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we're not going up, then temporarily set RoomId to next&#xD;
 room; so we can draw next room in NT 2 below and&#xD;
 subsequent submodes.&#xD;
&#xD;
 Only in up direction do we draw the current room in NT 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82633</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82680</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go restore current room ID and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91435</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] current door direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82619</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7_Sub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82660</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start at bottom row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1327</Address>
      <AddressType>InternalRam</AddressType>
      <Label>MazeStep</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82668</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If going up, then go lay out the only dynamic elements for the current room: the doors.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82760</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14348_Vertical</Label>
      <Comment> Scrolling up or down.&#xD;
&#xD;
&#xD;
 This will mean PPU address $2BC0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82776</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14358_Horizontal</Label>
      <Comment> Scrolling left or right.&#xD;
&#xD;
&#xD;
 This will mean PPU address $2BD0, 64 pixels down from&#xD;
 the top of NT 2. See submode 2 for an explanation of&#xD;
 offsets and mirroring for vertical scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82749</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7_Sub3And4_TransferPlayAreaAttrsToNT2</Label>
      <Comment> Transfer half of a room's play area attributes to nametable 2.&#xD;
 The top half in submode 3, and the bottom half in submode 4.&#xD;
&#xD;
&#xD;
 Test player's direction for up (8).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82755</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Test player's direction for down (4).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82762</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1434A_TransferHalfPlayAreaAttrs</Label>
      <Comment> This is the offset of the end of the first half of play area NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82768</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in submode 4 instead of 3,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82770</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then refer to bottom half of NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83084</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetPlayAreaAttrsBottomHalfInfo</Label>
      <Comment> Params:&#xD;
 A: low PPU address&#xD;
&#xD;
 Returns:&#xD;
 A: low PPU address + $18&#xD;
 Y: end offset of second half of play area NT attributes&#xD;
&#xD;
&#xD;
 This is the offset of the end of the second half of play area NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83087</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add $18 to point to the bottom half of NT attributes in PPU memory.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83003</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset low byte of VScroll address for vertical scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107459</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlankRowTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82789</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction is horizontal,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82799</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scrolling up.&#xD;
&#xD;
&#xD;
 Lay out the next room now, because we had to transfer&#xD;
 the current one to NT 2 earlier. Up is the only direction&#xD;
 that draws the current room to NT 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82780</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7_Sub5</Label>
      <Comment> Reset fade cycle, in case we don't need to fade.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82812</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1437C_CheckDark</Label>
      <Comment> Scrolling in any direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82801</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save current room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82809</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore current room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82802</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Lay out the next room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95885</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IsDarkRoom_Bank5</Label>
      <Comment> Params:&#xD;
 Y: room ID&#xD;
&#xD;
 Returns:&#xD;
 A: $80 if dark, else 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82817</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the next room is not dark, then go finish up and start updating.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82819</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The next room is dark.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82851</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7_Finish</Label>
      <Comment> Finish initializing this mode, and start updating it.&#xD;
&#xD;
&#xD;
 Set current room to next room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82791</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then cue transfer of a row of blanks above the play area.&#xD;
 This should lead to clean vertical scrolling without visual&#xD;
 artifacts.&#xD;
&#xD;
 TODO: But, maybe it doesn't work, because its address&#xD;
 $28E0 is in NT 2, which will become a mirror of NT 0 below&#xD;
 in this submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82846</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7_Sub6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82849</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we're still fading, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40456</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SlotToBlankNameTransferBufEndOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125804</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If still checking sprite 0, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125806</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Reset [$F3].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83057</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14471_ScrollUp</Label>
      <Comment> Scrolling up.&#xD;
&#xD;
&#xD;
 Start scrolling from $2800, the top of play area in NT 2 (current room).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83011</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If scrolling up, go handle it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83078</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This is the offset of the end of the first half of play area NT attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83097</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate VScrollingStartFrame the same way as the frame&#xD;
 value in the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>230</Address>
      <AddressType>InternalRam</AddressType>
      <Label>VScrollStartFrame</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82442</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the result doesn't end in $E0, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82454</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> VScroll address is $27E0. So, we rolled from the&#xD;
 top of NT 2 to the last row of NT 0. Change the address&#xD;
 to $23A0, the true last row of NT 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82452</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the result is not $27E0, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82448</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the result is $20E0, then the scroll position reached the status bar. Go sanitize and keep it there.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82463</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1421F_LimitLow</Label>
      <Comment> Don't let the scroll position go above $2100, the bottom of&#xD;
 the status bar; nor below $2800, the top of NT 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82469</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14225_IncSubmode</Label>
      <Comment> And we're done.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82502</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the result doesn't end in $C0, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82508</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the result is not $23C0, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82510</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> VScroll address is $23C0, the bottom of NT 0. So, we need&#xD;
 to roll to $2800, the top of NT 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82536</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then go scroll right.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82563</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwitchToNT1</Label>
      <Comment> When we begin scrolling left, CurHScroll = 0 and base&#xD;
 nametable is 0. This shows the current room completely.&#xD;
&#xD;
 The first time in ScrollWorld, the speed [00] will be&#xD;
 subtracted from CurHScroll to show most of NT 0, and&#xD;
 a little of NT 1 to its left. In other words, the&#xD;
 scroll position now refers to a position in NT 1.&#xD;
&#xD;
 [01] is this first position shown in NT 1. So, once&#xD;
 CurHScroll matches it (in the first call to this routine),&#xD;
 turn on this flag that makes NT 1 the base nametable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83171</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not facing up, then go transfer new room attributes to NT 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83173</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to submode 6.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83155</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: [$010C] ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83158</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: [$E7] ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83160</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset sprite-0 check, because we finished scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83162</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to mode 4 submode 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83153</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset to initialize the next mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84566</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the invincibility timer, so that Link will flash for a fixed amount of time.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130868</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimatePond</Label>
      <Comment> Take turns between:&#xD;
 * 4 frames stepping the cycle&#xD;
 * 4 frames delaying</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82714</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we had no flute secret (pond) or it finished, then go to next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82716</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go reverse the flute secret (pond colors).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95528</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17528</Label>
      <Comment> Compare argument to single-bit mask.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82737</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the scroll direction is not vertical,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83005</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset horizontal scroll offset for horizontal scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83031</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14457_ScrollHorizontal</Label>
      <Comment> Scrolling left or right.&#xD;
&#xD;
 Keep in mind that columns will not be copied if CurColumn&#xD;
 is not between 1 and $20.&#xD;
&#xD;
 Set up a starting column number well past the beginning or&#xD;
 end of the play area; so that we don't write to a part of&#xD;
 the scroll region.&#xD;
&#xD;
&#xD;
 $A0 in UW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83018</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scrolling down.&#xD;
&#xD;
&#xD;
 Start scrolling from $2100, the top of play area in NT 0 (current room).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83061</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start past the last row, because the scrolling process first decrements it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83022</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start past the first row, because the scrolling process first increments it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83094</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 1, so that the frame value calculated in the next frame&#xD;
 will match the VScrollingStartFrame value we calculate here.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130244</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: RoomKillCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129643</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Facing up or down.&#xD;
&#xD;
&#xD;
 Assume animation frame 3 (up).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129656</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetUpHorizontalWalkingSprites</Label>
      <Comment> Facing left or right.&#xD;
&#xD;
&#xD;
 Assume animation frame 0 (legs apart).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129670</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Facing left. Flip horizontally.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129649</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If down, then use animation frame 2 (down).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129650</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Anim_SetObjHFlipForSpriteDescriptor</Label>
      <Comment> Use the movement frame as the value for horizontal flipping.&#xD;
&#xD;
 Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 [0F]: flip horizontal, based on ObjMovementFrame&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127750</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In OW, draw Link 2 pixels down.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129596</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateLinkBase</Label>
      <Comment> Returns:&#xD;
 Y: animation frame&#xD;
 [00]: object X&#xD;
 [01]: object Y&#xD;
 [0F]: flip horizontally&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6125</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set the left and right sprite record offsets for CurSpriteIndex.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6137</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> But if it's Link, then hardcode them to sprites $12 and $13.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6123</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [08] holds object index/cycle sprite index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6119</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DrawObjectWithAnim</Label>
      <Comment> Params:&#xD;
 A: frame&#xD;
 X: object index/cycle sprite index&#xD;
 Y: animation index&#xD;
 [00]: object X&#xD;
 [01]: object Y&#xD;
 [0C]: mirrored&#xD;
 [0F]: flip horizontally&#xD;
&#xD;
 Note:&#xD;
 If the object is not mirrored, then it's horizontally flippable.&#xD;
 But Link uses [0F] for flipping without checking [0C].&#xD;
&#xD;
&#xD;
 [0D] holds frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6153</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> This object has 2 sides.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6157</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The right side is 8 pixels away from the left.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6165</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Add frame number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6178</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object is Link, or object index/slot &gt;= $D (weapons, room item),&#xD;
 then go set attributes and write sprites.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6171</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set the left tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6176</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The right tile is two tiles over.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6141</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Link's left sprite record offset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6168</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Look up the tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6200</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L70A8_UseTableAttr</Label>
      <Comment> Look up the sprite attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127790</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not facing down, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127781</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> See if there's special processing needed for the shield.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127786</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> No magic shield.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127808</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F340_HandleMagicShield</Label>
      <Comment> Magic shield.&#xD;
&#xD;
&#xD;
 Look at the left tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127834</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F35A_ApplyShieldSprite</Label>
      <Comment> Apply the sprite's modification for the shield.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127813</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing right,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127815</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then look at the right tile instead.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127823</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F34F_LoopHeadTile</Label>
      <Comment> Compare the sprite's tile with 4 tiles: 1 for each direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127819</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the sprite's tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127822</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the sprite's original tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127837</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F35D_FixHFlip</Label>
      <Comment> Restore the sprite's original tile to A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127840</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not a down facing tile, then return. No attributes to change.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127842</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It's a down facing tile. Make sure it's not flipped,&#xD;
 because there's only 1 frame of downward shield tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127824</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Quit the loop if we haven't found it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127829</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it didn't match, go check the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127831</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the replacement tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127493</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LinkHeadTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127497</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LinkHeadMagicShieldTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127792</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the sprite's tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127799</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it already has a shield, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127797</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The tiles for shieldless Link are 8 and $A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127801</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the sprite's original tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127805</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go apply the change.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127803</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add $50 to change 8 to $58 for one frame, and $A to $5A for the other frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82974</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7SubmodeAndDrawLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>996</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjAnimFrame</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>976</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjAnimCounter</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127741</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F2FD_Animate</Label>
      <Comment> Animate Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127748</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode 9, go draw Link 2 pixels down.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127758</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F30E_ChangeLookForState</Label>
      <Comment> Now change Link's look for specific states and items.&#xD;
&#xD;
 If Link is attacking or using an item,&#xD;
 then add 4 to frame to use the "attack/use item" frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127775</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F31F_Draw</Label>
      <Comment> Now frame is in A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127776</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use Link's animation.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5524</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ObjAnimations</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>127</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5651</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ObjAnimFrameHeap</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>204</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6121</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [0E] holds animation index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5855</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ObjAnimAttrHeap</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>204</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6186</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the object has a "half-width draw" attribute, then&#xD;
 go draw half-width.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6217</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L70B9_DrawHalfWidth</Label>
      <Comment> Mark the object narrow (half-width).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6210</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> For other objects, the caller controls mirroring and flipping.&#xD;
&#xD;
 If mirrored [0C], then draw it mirrored.&#xD;
 Else draw it horizontally flippable, controlled by [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6206</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If it's Link, write the sprites. He's never mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129598</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link isn't idle, go animate object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129604</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode 4, go animate object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129608</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode $10, go animate object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129613</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there was no direction input button, skip animating Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129620</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once the counter reaches 0, and if object is the player,&#xD;
 animate Link's object state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127735</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set X to 0 to refer to Link object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129726</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FABE_CheckState20</Label>
      <Comment> If major state = $20&#xD;
   if minor state = 0, make it 1&#xD;
   else OR state with $30&#xD;
   go set movement frame to 1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129696</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RollOverAnimCounter</Label>
      <Comment> Roll over the animation counter, and switch the movement frame.&#xD;
&#xD;
 Params:&#xD;
 [00]: new counter value&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83178</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Ending offset of first half of attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83182</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in submode 4,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83184</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then transfer top half.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83186</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Transfer bottom half.&#xD;
&#xD;
&#xD;
 Save low byte of PPU address of top of play area attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83197</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L144FD</Label>
      <Comment> Restore low byte of PPU address of top of play area attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82844</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Not lit. Dark to dark. Nothing to do.&#xD;
 Go finish initializing, and begin updating the mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82896</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> That is the door the player's entering the new room from.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124602</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use "open" door attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124600</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalculateNextRoomOW</Label>
      <Comment> Use player's direction bit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124561</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, all directions are open.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124563</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up door attribute for player's direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95522</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalculateNextRoomForDoor</Label>
      <Comment> Params:&#xD;
 [E7]: direction&#xD;
&#xD;
&#xD;
 Map door bit/direction to an index as follows:&#xD;
 1: 3&#xD;
 2: 2&#xD;
 4: 1&#xD;
 8: 0&#xD;
&#xD;
 Note that this is the opposite of the usual mapping.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95532</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If they don't match, go try the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5423</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMazes</Label>
      <Comment> Params:&#xD;
 Y: room ID&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5432</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If not in forest maze, go check mountain maze.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5415</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ForestMazeDirs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5437</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If direction doesn't match current step, go handle it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83044</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Scrolling left.&#xD;
&#xD;
&#xD;
 $81 in UW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83082</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82670</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> else lay out the next room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82677</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L142F5</Label>
      <Comment> Here, "previous" means "current", because we already changed TempDoorDirHeldOpen.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82778</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go continue setting up transfer of attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82826</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1438A_DarkenRoom</Label>
      <Comment> Going from room with light to a dark room.&#xD;
&#xD;
&#xD;
 The next room will not be lit yet.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82831</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start a fade-to-black cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82842</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it was lit, then go start a fade-to-black cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83037</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> $E0 in OW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83050</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> $41 in OW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83052</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1446C_SetColumn</Label>
      <Comment> Set CurColumn to the value we determined.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83054</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to submode 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83026</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14452_Inc2Submodes</Label>
      <Comment> From submode 0 go to submode 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82594</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Because CurHScroll is now 0 and base nametable is 0;&#xD;
 we would be showing the new room at the end of the scroll&#xD;
 but with old attributes.&#xD;
&#xD;
 So, now use NT 1, until after we copy the attributes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82597</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82559</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Does scroll position match reference scroll position [01]?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82561</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83195</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then don't use NT 1 anymore.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83191</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If scrolling horizontally,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1311</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CandleState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82824</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the current room is dark by default, go see if it was lit up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83132</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, then don't need to handle dark rooms. Go finish up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83139</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the room isn't dark, then go finish up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5457</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If going right in the forest, allow exit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5449</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DB9_ResetMazeStep</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5459</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DC3_Reset</Label>
      <Comment> Else you have to start over.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5462</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Go set the next room to the current one, and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5439</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The direction matches the step.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5443</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DB3_AdvanceMaze</Label>
      <Comment> Haven't passed the last step. So increment the step,&#xD;
 but repeat this room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5482</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DDA_PlaySecretTune</Label>
      <Comment> Play secret tune, and let the player leave the maze.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5441</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the last step matches, go let the player pass.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5466</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If not in the mountain maze either, go reset the maze step and leave room alone.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5419</Address>
      <AddressType>SaveRam</AddressType>
      <Label>MountainMazeDirs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5471</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the direction matches the current step, go see if it's the last one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5475</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If not going left in the mountain, go start over.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5477</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Else allow exit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5480</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If this isn't the last step, then go advance the step, but repeat the room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130784</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WaterPaletteTransferBufTemplate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130826</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CueTransferPondPaletteRow</Label>
      <Comment> Params:&#xD;
 Y: a point in the cycle (0 to $B)&#xD;
&#xD;
&#xD;
 Copy water palette (palette row 3) transfer buf to dynamic&#xD;
 transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130792</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PondCycleColors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130841</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Patch byte 3 of palette row with the right color in the cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130849</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the index is $A,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130851</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then make most water tiles (&lt; $99) walkable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83141</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set CurRow = 0 (was $FF) to signal to mode 4 that&#xD;
 it might need to brighten the new room, because we&#xD;
 scrolled from a dark one.&#xD;
&#xD;
 This isn't a concern, if you enter a room by any other mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1306</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SecretColorCycle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>234</Address>
      <AddressType>InternalRam</AddressType>
      <Label>WhirlwindPrevRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94503</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawSpritesBetweenRoomsAndAdvanceSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84882</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Update the position once every 4 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84886</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not time to change position, go draw.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84875</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode10Stairs_Full</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84880</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If player touched a stairs tile instead of a cave or dungeon entrance, go end the mode without animating Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84895</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link hasn't reached the end of the walk, go draw.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84897</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14BA1</Label>
      <Comment> Else go to the target mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84888</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move Link down 1 pixel.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TargetMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84892</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: StairsTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83515</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the target Y coordinate $10 pixels below current one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83510</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83505</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83503</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If player touched any stairs tile instead of a cave or dungeon entrance, go start updating.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: StairsTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126591</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126443</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WalkableTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126604</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tile doesn't match this element, go check the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126606</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The tile was found in the list. Substitute $26 for it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126599</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tile wasn't found, quit the loop.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126593</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for the tile in a list of walkable tiles. If it's found,&#xD;
 then turn it into $26 to simplify walkability tests.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126613</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object is not Link, then return without changing anything else.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126619</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not in special OW room $1F, return. There's a false wall.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126625</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction is horizontal or 0, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126627</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link is at X=$80, Y&lt;$56; then set the tile to walkable tile $26.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126560</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the tile at this column and row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126562</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the tile in the object's tile slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1182</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjCollidedTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126586</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE7A_CheckWalkable</Label>
      <Comment> Get the tile to return, if needed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126571</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The direction in [0F] is vertical. Check the tile in the next column.&#xD;
 It might be a blocking tile. Blocking tiles are arranged after&#xD;
 walkable tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126569</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction in [0F] is horizontal or 0, skip checking another column.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126581</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If second tile number &gt;= first tile number,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126583</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use the second one, because it might be blocking.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126553</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract status bar height $40 from Y coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126556</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Divide Y coordinate by 8 to get the row it sits inside.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126552</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore adjusted Y coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126507</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save adjusted Y coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126539</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Divide this multiple by 4 to get the offset of the 2-byte address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126542</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the address of the column in [00:01].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126508</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE2C_AsIsX</Label>
      <Comment> Take the X coordinate as is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126493</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction is horizontal or 0, go adjust X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126495</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction is down and Y coordinate &lt; $DD,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126503</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE27_AdjustY</Label>
      <Comment> then pop Y coordinate,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126504</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> and add [04] offset from hotspot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126482</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start with a Y coordinate $B pixels down from top of object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126488</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save this first adjusted Y coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126513</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE31_AdjustX</Label>
      <Comment> Adjust the X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126515</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction is left and X coordinate &gt;= $10&#xD;
 or direction is right and X coordinate &lt; $F0,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126531</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE43_AddHotspotOffset</Label>
      <Comment> then add [04] offset from hotspot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126537</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mask to make X coordinate a multiple of 8, the column size.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126480</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetCollidableTile</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 Y: offset from hotspot&#xD;
 [0F]: direction or 0&#xD;
&#xD;
 Returns:&#xD;
 A: tile&#xD;
 [049E][X]: tile&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126462</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not Link,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126464</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then use -$10 ($F0) for the hotspot offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126466</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE02</Label>
      <Comment> If direction is up, left, or 0,&#xD;
 then use the offset we determined above.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126472</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else if it's down,&#xD;
 then use offset 8.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126478</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For right, use offset $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83842</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Submode 1.&#xD;
 Copies the whole play area to NT 0, one row each frame.&#xD;
&#xD;
 TODO:&#xD;
 If mode 7 scrolls to a dark room, then it sets&#xD;
 CurRow to zero. Otherwise it would be $FF.&#xD;
 A positive value triggers this submode 1 to transfer&#xD;
 the whole play area.&#xD;
&#xD;
 But why? As far as I can tell, the NT 0 is already in&#xD;
 a good state reflecting the new room. The only thing&#xD;
 needed is possibly to brighten the room by way of&#xD;
 changing the palette.&#xD;
&#xD;
 So why does mode 7 trigger this?&#xD;
 Is there another mode that truly needs this behavior?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83857</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Submode 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83897</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode4_Sub3</Label>
      <Comment> Submode 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83900</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not done animating, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83889</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start a fade-to-light cycle (reverse of cycle $40).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83862</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this room is dark, then nothing else to do. Go to submode 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95584</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalcNextRoomByDir</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
&#xD;
 Returns:&#xD;
 A: next room ID&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95603</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Adding offset and room ID yields next room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95597</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go check the next direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95586</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set up the single-bit mask.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95588</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each direction in [00]  indexed by X:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95590</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17566</Label>
      <Comment> Compare the direction argument with the single-bit mask [00].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95592</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If they match, go use this index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4129</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Negate</Label>
      <Comment> Params:&#xD;
 A: value&#xD;
&#xD;
 Returns:&#xD;
 A: result&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83864</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This is a light room.&#xD;
 See if we have to brighten it after leaving a dark room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83869</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract RoomId from next room ID that was calculated&#xD;
 to get room ID offset in that direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83872</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We really want the opposite offset/direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83875</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the current room ID to that to get the previous room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83882</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If previous room was light, then go to submode 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83884</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The previous room was dark.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83887</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But if it was lit up, then nothing else to do. Go to submode 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83844</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If CurRow is negative, then go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83849</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the last row has been copied,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83851</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1478B</Label>
      <Comment> then go to the next submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83916</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset [0300] to [051F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82630</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this doorway Link is entering from is not a true door,&#xD;
 then LayOutDoors called from LayOutRoom will clear it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83837</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in submode 0, go perform common tasks to enter a room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126409</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode $A, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127117</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MoveObject</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 [0F]: direction&#xD;
&#xD;
&#xD;
 Positive limit is 8 for Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127148</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F0AC_ApplyQSpeedToPosition</Label>
      <Comment> Check the direction variable for each direction bit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127137</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction is none, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127169</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F0C1_Down</Label>
      <Comment> Down&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127159</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Up&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127179</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F0CB_Right</Label>
      <Comment> Right&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127189</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F0D5_Left</Label>
      <Comment> Left&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4033</Address>
      <AddressType>SaveRam</AddressType>
      <Label>AddQSpeedToPositionFraction</Label>
      <Comment> Params:&#xD;
 [010E]: PositiveGridCellSize&#xD;
 [010F]: NegativeGridCellSize&#xD;
&#xD;
 Returns:&#xD;
 C: 1 if fractional position reached a whole pixel&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4072</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SubQSpeedFromPositionFraction</Label>
      <Comment> Params:&#xD;
 [010E]: PositiveGridCellSize&#xD;
 [010F]: NegativeGridCellSize&#xD;
&#xD;
 Returns:&#xD;
 C: 0 if fractional position reached a whole pixel&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>936</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjPosFrac</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>956</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjQSpeedFrac</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4043</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Save carry flag.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4057</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6849_ClearCarry</Label>
      <Comment> Replace saved (pushed) carry flag with 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4060</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Restore carry flag to use in addition below.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4061</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> But save it again in order to return it at the end.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4070</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Return carry flag from speed addition, or 0 if we reached a limit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4062</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Add only carry to the grid offset.&#xD;
 Carry represents whether the fractional position reached&#xD;
 a whole pixel (C=1).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>916</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjGridOffset</Label>
      <Comment> Used in movement like walking.&#xD;
 When grid offset = 0, an object is at an intersection point in the tile grid.&#xD;
 Otherwise, the object is between points along a line.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>270</Address>
      <AddressType>InternalRam</AddressType>
      <Label>PositiveGridCellSize</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>271</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NegativeGridCellSize</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4044</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Don't let positions go past the limits&#xD;
 If we're at a limit, then clear carry.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127119</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Negative limit is -8 for Link.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127129</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F099</Label>
      <Comment> Store the limits that we determined.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127123</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object isn't Link,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127125</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then use $10 and -$10.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127139</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> To allow a wide speed range, we keep the quarter speed.&#xD;
 Here, apply it 4 times to get the full speed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4082</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Save carry flag.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4083</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Don't let positions go past the limits&#xD;
 If we're at a limit, then set carry.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4096</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6870_SetCarry</Label>
      <Comment> Replace saved (pushed) carry flag with 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4099</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Restore carry flag to use in addition below.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4100</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> But save it again in order to return it at the end.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4101</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Subtract only carry from the grid offset.&#xD;
 Carry represents whether the fractional position reached&#xD;
 a whole pixel (C=0).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4109</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Return carry flag from speed subtraction, or 1 if we reached a limit.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126423</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EnsureObjectAligned</Label>
      <Comment> Params:&#xD;
 X: 0&#xD;
&#xD;
 Ensure that, if grid offset = 0, then X is a multiple of 8,&#xD;
 and Y is (multiple of 8) OR 5. For example, ($30, $7D) or ($58, $B5).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126416</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, then show link behind doors.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94487</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeSubroom_Sub0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3875</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> TODO: Is this ever run?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3835</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ShowLinkSpritesBehindHorizontalDoors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125892</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're walking from room to room:&#xD;
 * entering in mode 4 (method 2)&#xD;
 * leaving in mode 6&#xD;
&#xD;
&#xD;
 If relative position reaches 0, 8, or -8; then go to the next mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125912</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125910</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pass direction in [0F] to MoveObject.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126405</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_EndMoveAndAnimateInRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94338</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94340</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then clear the sprites that go above all the rest.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94343</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17087</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94363</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play "found secret" tune.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5394</Address>
      <AddressType>SaveRam</AddressType>
      <Label>WriteBlankPrioritySprites</Label>
      <Comment> TODO: Why are their Y coordinates $3D and $DD?&#xD;
 Those values are the highest and lowest that Link can normally take.&#xD;
&#xD;
 Repeat two sprites in the first $10 records. They have&#xD;
 transparent tile $1C, priority 1 (behind BG), and X=0.&#xD;
 The first of the pair has Y=$3D, and the second one has Y=$DD.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86746</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset kill count part of the room's flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86806</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15316_StoreMax</Label>
      <Comment> For this room in the level block, set kill count to max ($F).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1376</Address>
      <AddressType>InternalRam</AddressType>
      <Label>LevelKillCounts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>846</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomObjCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>863</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomObjTemplateType</Label>
      <Comment> TODO: Or RoomObjTemplate, or RoomMonsterTemplate,&#xD;
 or RoomTemplateObjType&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86758</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If RoomKillCount = 0, go compare it to RoomFoeCount.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86813</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For this room in world flags, set kill count to max (3).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86753</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If no monsters were made in this room, go store the max kill count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86760</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object template type is ...&#xD;
 &gt;= $32 and&#xD;
 &lt;&gt; $3A and&#xD;
 &lt;&gt; $3B and&#xD;
 &lt;  $49,&#xD;
 then it refers to a non-recurring foe that shouldn't be made&#xD;
 again. So, go store the max kill count for the room.&#xD;
 </Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86779</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L152FB</Label>
      <Comment> Compare RoomKillCount and RoomFoeCount.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86782</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If RoomKillCount &gt;= RoomFoeCount, go store the max kill count for the room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86784</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> RoomKillCount &lt; _RoomObjCount.&#xD;
 Add RoomKillCount to level kill count for this room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86793</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cap the kill count to 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86799</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1530F</Label>
      <Comment> Shift the adjusted kill count (up to 2) into the top 2 bits.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86803</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go combine this mask with the room's flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86743</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveKillCountUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86245</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveKillCountOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95332</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveKillCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86248</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put kill count from the room's flags in [02].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86252</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset kill count part of the room's flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86258</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: RoomKillCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86755</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: RoomKillCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86264</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If RoomKillCount &gt;= RoomFoeCount, go store the max kill count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86266</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Limit RoomKillCount to 7.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86268</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add it to kill count from flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the total &gt; 7,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86275</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15103_LimitCount</Label>
      <Comment> then limit it to 7.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86277</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15105</Label>
      <Comment> Combine this new total and the room's flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86815</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1531F_CombineWithFlags</Label>
      <Comment> Combine the mask with the room's flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94353</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get door type in direction we're facing</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94403</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetPassedDoorType</Label>
      <Comment> Returns door attr in direction Link's facing (mode 6),&#xD;
 or opposite direction (other modes).&#xD;
&#xD;
 Returns:&#xD;
 A: door attribute&#xD;
 Y: whether Link is facing an increasing direction (right or down)&#xD;
&#xD;
&#xD;
 If Link's direction is right or down, then 1 will be returned.&#xD;
 Else 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4115</Address>
      <AddressType>SaveRam</AddressType>
      <Label>GetOppositeDir</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
&#xD;
 Returns:&#xD;
 A: opposite direction&#xD;
 Y: a reverse direction index&#xD;
&#xD;
 The reverse direction index returned has this mapping:&#xD;
 In Dir: 1 2 4 8&#xD;
         -------&#xD;
 Index:  3 2 1 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94414</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode 6, use Link's direction to get a door attribute.&#xD;
 Else use the opposite direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94356</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the door attribute is "false wall",&#xD;
 then play the "found secret" tune.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player is at an "open", "key", or "shutter" door,&#xD;
 then the player walked all the way to the edge of the play&#xD;
 area. So, use index 2 to set Link's relative position to 0.&#xD;
&#xD;
 Otherwise, the player is at wall level. Link has to walk to the&#xD;
 edge of the play area. So, set a relative position that&#xD;
 reflects that distance: $28 or -$28.&#xD;
&#xD;
 If walking in a decreasing direction (left or up), then&#xD;
 Link's relative position is $28 and has to decrease to 0.&#xD;
&#xD;
 If walking in an increasing direction (right or down), then&#xD;
 Link's relative position is -$28 and has to increase to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94327</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LeavingRoomRelativePositions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94394</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset ObjState of all weapons.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>171</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomItemId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4884</Address>
      <AddressType>SaveRam</AddressType>
      <Label>GetRoomFlagUWItemState</Label>
      <Comment> Returns:&#xD;
 A: $10 if item was taken, else 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Room item</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96345</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Secret trigger</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96360</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Push block</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96379</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Room item</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96374</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the room item is a triforce piece,&#xD;
 the move it left 8 pixels.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96381</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Triforce piece</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91697</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16631</Label>
      <Comment> TriggeredDoorCmd &gt;= 5 or door type = 7&#xD;
&#xD;
 Shutters and the commands to open a door always change&#xD;
 tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96342</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If secret trigger is 3 "last boss" or 7 "foes for item",&#xD;
 then deactivate room item object. They'll be activated by&#xD;
 the secret action.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96357</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17865</Label>
      <Comment> If there's a push block in the room, then look for where&#xD;
 it goes, and activate it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96367</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1786F</Label>
      <Comment> Set the X and Y for the room item object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92151</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the unique room ID is $21, then&#xD;
 put the push block object at ($40, $80), and go set the type.&#xD;
&#xD;
 TODO: Where is room layout $21 used?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92165</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set the object type and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92168</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16808</Label>
      <Comment> Look for a block tile in row $A of play area, starting in column 4.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92196</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16824</Label>
      <Comment> The block was found in a column with an address at&#xD;
 offset %X in column table. So the column number would&#xD;
 be (%X/2), and X coordinate ((%X/2)*8). That means&#xD;
 multiplying %X by 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92201</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Row $A is at $90 from the top of the screen.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92145</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FindAndCreatePushBlockObject</Label>
      <Comment> Reset block state and direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91859</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Lastly, if the door is closed ([08] = 0) and provisional&#xD;
 face index &gt;= 3, then subtract 1 from it.&#xD;
&#xD;
 But if open ([08] &lt;&gt; 0) and provisional face index &lt;&gt; 5,&#xD;
 then make it 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92205</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Block object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96355</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17863_Deactivate</Label>
      <Comment> Deactivate room item object by setting ObjState[$13] to $FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96322</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player got the room item already, go deactivate&#xD;
 the room item object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91843</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L166C3</Label>
      <Comment> Calculate the door face index in three parts.&#xD;
&#xD;
 First, turn door type 4 into 8, and 1 into 4&#xD;
 (provisional face index in Y register).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91825</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PrepareWriteHorizontalDoorTransferRecords</Label>
      <Comment> Params:&#xD;
 [08]: 0 if closed&#xD;
&#xD;
 Returns:&#xD;
 X: current length of dynamic transfer buf&#xD;
 [00]: door VRAM address high byte&#xD;
 [01]: door VRAM address low byte&#xD;
 [02:03]: address of door tiles for direction and face&#xD;
 [05]: 2, the number of transfer records to write&#xD;
 [06]: 2, the number of tiles in each record&#xD;
 [07]: 0, the first index of a tile to transfer&#xD;
 [09]: door direction index&#xD;
&#xD;
 Note that this routine is called with triggered doors:&#xD;
 doors that can change state. Their door type numbers are &gt;= 4.&#xD;
&#xD;
 If this routine were ever called with a fixed door&#xD;
 ("open", "wall", or "false"), then it would produce non-sensical&#xD;
 values for the door face.&#xD;
&#xD;
&#xD;
 If triggered door type &gt;= 5 (keys and shutter), play door sound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreateRoomObjects</Label>
      <Comment> Reset ObjState[$13] to activate room item object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125669</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for the current room in room history.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125684</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not found, then store at the cycling history index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125709</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EB0D_RunTasksMode5</Label>
      <Comment> If not in mode 5, go start updating the mode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125715</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Run cross-room tasks that apply only to mode 5.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3004</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_BossRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86830</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get room flags for boss room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86836</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the boss was defeated, go turn off ambient sound effects.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86843</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sound effect index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86845</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shift the sound effect index to the low end of the byte.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86820</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BossSoundEffects</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86853</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the room has no boss sound effect, go turn off any that might be playing.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86824</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckBossSoundEffectUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86855</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the flag to repeat</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24865</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckInitWhirlwindAndBeginUpdate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125661</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RunCrossRoomTasksAndBeginUpdateMode</Label>
      <Comment> Called in modes 4, 5, 6, 9, $B, $C.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90</Address>
      <AddressType>InternalRam</AddressType>
      <Label>UndergroundExitType</Label>
      <Comment> 0: not at an underground exit&#xD;
 1: cave (OW), cellar (UW)&#xD;
 2: dungeon level</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83953</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> X coordinate where link comes out of underground</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83960</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Square row where Link comes out of underground, starting from square row 1. See the addition below.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84100</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Low 6 bits of monster list ID</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84107</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> High bit of monster list ID</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83962</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Multiply by $10 to get a height in pixels.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83966</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the first Y where Link can come out of underground.&#xD;
 $4D is $50 (the second square row) - 3 (Link's offset above the row).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83970</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player didn't step on a cave entrance to go underground,&#xD;
 then he used the stairs. So, skip starting the exit effect (method 1-b).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83976</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Enter method 1-a.&#xD;
&#xD;
 Store the Y coordinate that we determined as the Target Y.&#xD;
&#xD;
 DASM.EXPR: StairsTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83982</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But have Link start walking out from $10 pixels below.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83984</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play walking sound effect.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4021</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6825_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83991</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link faces down when coming out of a cave or dungeon.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83995</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset DoorwayDir, assuming there is no doorway.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91874</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L166E2_MakeForwardIndex</Label>
      <Comment> The routine that returned the door type also returned its&#xD;
 reverse direction index in [03].&#xD;
&#xD;
 We want a forward direction index. So, subtract [03] from 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126692</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetShoveInfo</Label>
      <Comment> Returns:&#xD;
 A: 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>832</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurObjIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94292</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ObjectRoomBoundsOW</Label>
      <Comment> Description:&#xD;
 Two sets of 5 elements:&#xD;
 * left bound for objects&#xD;
 * right bound for objects&#xD;
 * up bound for objects&#xD;
 * down bound for objects&#xD;
 * first unwalkable tile&#xD;
&#xD;
 The first set is for OW. The second is for UW.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94302</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetupObjRoomBounds</Label>
      <Comment> Offset of second set of bounds.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84265</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawLinkBetweenRooms</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125501</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawSpritesBetweenRooms</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83570</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EnteringRoomRelativePositions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84037</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14845_ChooseWalkDistance</Label>
      <Comment> Choose a distance to walk depending on the door you&#xD;
 come out of.&#xD;
&#xD;
 We'll get a 0 or 1 depending on the direction of the door.&#xD;
&#xD;
 If the attribute of the door is "open", "key", or "key 2";&#xD;
 then you have shorter distance to cover. So use the&#xD;
 previous value as is to use indexes 0 and 1.&#xD;
&#xD;
 Otherwise, add 2 to use indexes 2 and 3 to walk farther&#xD;
 to get out of the way of the wall or door.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84068</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14864</Label>
      <Comment> Reset common state of objects $B to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84063</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set current object slot variable to $B, to be ready for the&#xD;
 first frame of mode 5. So, that it begins updating objects&#xD;
 at slot $B.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84080</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: INC?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84083</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> By default, objects start in metastate 1 (first cloud state).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84086</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the default speed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84094</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the monster list ID in [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84108</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If high bit is set in attribute byte D,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84110</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Then set bit 6 of monster list ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84118</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get index of monster count from high 2 bits of attribute byte C.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2978</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_FoeCounts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84125</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the object count from level info.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84128</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But make the count 1, if  the object list ID &gt;= $32 and &lt; $62.&#xD;
 This includes bosses and other non-recurring objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84140</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L148AC</Label>
      <Comment> Put the count in [03].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86190</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModifyObjCountByHistoryOW</Label>
      <Comment>Look for the room in the history.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86675</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModifyObjCountByHistoryUW</Label>
      <Comment> Look for the room in the history.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84142</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use the room history to modify the number of objects to make.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86687</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It wasn't found. Check the kill count in the room flags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86682</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If found, go subtract kill count from object count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86694</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not all defeated, go subtract kill count from object count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86696</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The room is not in history, and all foes were defeated.&#xD;
 Does the object list ID indicate a non-recurring object?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86714</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L152BA</Label>
      <Comment> The object list ID is for recurring objects.&#xD;
 So, reset the kill count in room flags and level block.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86712</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's non-recurring, go reset the object count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86726</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L152C6_CalcObjCount</Label>
      <Comment> Subtract the level block's kill count from the object count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86734</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the result &gt;= 0, go set the object count to this.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86736</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L152D0_ResetObjCount</Label>
      <Comment> Else, reset object count and object list ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86197</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If found, go check kill count in depth.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86202</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It wasn't found. Check the kill count in the room flags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If kill count &lt; max, go check kill count in depth.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86211</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The room is not in history, and all foes were defeated.&#xD;
 So, reset the kill count in room flags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86218</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L150CA</Label>
      <Comment> If kill count in room flags = 0, leave object count alone, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86225</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If kill count = 7, go reset object count and object list ID.&#xD;
 Else subtract kill count from object count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the result &gt;= 0, go set the object count to this.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86238</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L150DE_ResetObjList</Label>
      <Comment> Else, reset object count and object list ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84155</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode 9 (most caves), then&#xD;
 reset object count and object list ID.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84167</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L148C7_StoreObjCount</Label>
      <Comment> Store the object count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84172</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object count = 0 or object list ID = 0, then&#xD;
 skip instantiating objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84178</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: If object list ID (or call it object template ID?) &gt;= $62,&#xD;
 then it refers to a list. Go handle it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84182</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Object list ID (or call it object template ID) refers to a&#xD;
 repeated object.&#xD;
&#xD;
 Set the object type at each element from 1 to Object Count&#xD;
 to object list ID (or call it object template ID).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84197</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L148E5_PlaceList</Label>
      <Comment> TODO: Object list ID (or call it object template ID) refers to a&#xD;
 list of object types.&#xD;
&#xD;
 Get the index of the list itself by subtracting $62.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84202</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the address of the list in [04:05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83775</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ObjListAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>60</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84215</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy elements from the list to ObjType up to object count [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84227</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14903_StoreObjTemplate</Label>
      <Comment> Remember the object template type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84334</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AssignObjSpawnPositions</Label>
      <Comment> Params:&#xD;
 [02]: object template ID&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84337</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object template type = 0 or refers to Zelda, then&#xD;
 skip spawning normal objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84352</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Monsters from the edges of the screen</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84354</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If monsters come in from the edges, go skip spawning normal objects.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84359</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object count = 0, go skip spawning normal objects.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84345</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, then see if monsters come in from the edges of the screen.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84361</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the direction from Link's direction (bit).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83526</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SpawnPosListAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83530</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SpawnPosListAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the address of the spawn list for Link's direction in [06:07].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1316</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SpawnCycle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84382</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Starting at object 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84384</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L149A0_LoopSpawnSpot</Label>
      <Comment> Get a spawn spot from the list.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84387</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn the column component into an X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84379</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Assign spawn coordinates to 9 object slots.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84393</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn the row component into a Y coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84396</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add $D to the Y coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84484</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IsSafeToSpawn</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 C: 1 if unwalkable&#xD;
&#xD;
&#xD;
 Save %Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84489</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore %Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>842</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjectFirstUnwalkableTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84525</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14A2D_ReturnUnsafeToSpawn</Label>
      <Comment> Unwalkable</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84523</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14A2B</Label>
      <Comment> Walkable</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84497</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tile at the object's hotspot is unwalkable, return unwalkable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84499</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IsDistanceSafeToSpawn</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 C: 1 if unwalkable&#xD;
&#xD;
&#xD;
 Get the absolute X distance to Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4127</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Abs</Label>
      <Comment> Params:&#xD;
 A: value&#xD;
&#xD;
 Returns:&#xD;
 A: absolute value&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84509</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If distance &gt; $22, return walkable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84511</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the absolute Y distance to Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84521</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If distance &lt; $22, go return unwalkable.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84405</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the next object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84406</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L149B6</Label>
      <Comment> Point to the next spawn spot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84409</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we went past the last spawn spot,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84411</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then reset the cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84420</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L149C4_AssignSpecialPositions</Label>
      <Comment> If in mode 9 (play cellar), then spawn 4 blue keeses.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84428</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L149CC</Label>
      <Comment> Blue Keese</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84326</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CellarKeeseXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84330</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CellarKeeseYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84424</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not in mode 9, go check caves.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84447</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L149DF_CheckCaves</Label>
      <Comment> If the mode is not $B nor $C (caves), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84455</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L149E7_InCave</Label>
      <Comment> We're in a cave.&#xD;
 Reset object types in slots 1 to 8.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84470</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cave</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84465</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> cave index = ((cave value) &gt;&gt; 2) - $10&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84477</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> cave dweller object type = $6A + (cave index)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84480</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Replace first non-Link object type with the cave dweller type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84289</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetupTileObjectOW</Label>
      <Comment> If this is a room with a dock ($3F and $55), then&#xD;
 set the dock object type ($61) in tile object slot ($B).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84304</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14950_PlaceTileObj</Label>
      <Comment> There's no dock here, but there might be a tile object that&#xD;
 we found while laying out the room. Set the type, X, and Y&#xD;
 to the details we determined.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84323</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Activate room tile object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95078</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitLinkSpeed</Label>
      <Comment> Link gets a quarter speed (QSpeed) of $60 by default (1.5 pixels a frame).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96318</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, go create heart container in room 5F.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124614</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MarkRoomVisited</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124617</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Visit state (UW)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1229</Address>
      <AddressType>InternalRam</AddressType>
      <Label>LevelBlockAttrsByteF</Label>
      <Comment> This seems to be used for convenience in accessing it multiple times in a room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84966</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTriggerNone</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84002</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The player entered the doorway in a room. So, set DoorwayDir.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84000</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14820_Method2</Label>
      <Comment> Enter method 2.&#xD;
 Room to room.&#xD;
&#xD;
 Get the direction that the player is entering from.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84007</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player is entering from a door that was opened, then&#xD;
 set the "close" door command.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83997</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go reset Link's relative position, and work on objects.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84017</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14831</Label>
      <Comment> If in OW, go reset Link's relative position, and work on objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94390</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetInvObjState</Label>
      <Comment> Reset LadderSlot. No ladder is active.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84021</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing right, then set Link's X to 0 at the left edge.&#xD;
 If direction is left, then set Link's X to $F0 at the right edge.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83948</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Enter method 1.&#xD;
&#xD;
 Set up Link's exit from underground.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>101</Address>
      <AddressType>InternalRam</AddressType>
      <Label>UndergroundEntranceTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83989</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14815</Label>
      <Comment> This part is the same no matter if the player went&#xD;
 underground by stairs or a cave entrance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83972</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> $24 is black entrance, and contrasts with $70 to $73 (stairs).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83946</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW and stepping out of cellar, Link is already where he needs to be. But go handle the rest (method 1-b).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83942</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not leaving underground, go handle method 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83940</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There's more than one way to enter a room.&#xD;
&#xD;
 1: Out of a cave, dungeon, or cellar&#xD;
     a. Walking exit&#xD;
     b. Next to stairs&#xD;
 2: Room to room&#xD;
&#xD;
 Determine which one we need.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95084</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, go use this speed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95086</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In OW. If standing on mountain stairs, then&#xD;
 use a lower quarter speed of $30.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95104</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's speed is not this lower speed,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95106</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then reset the position fraction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96393</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17889_MakeHeartContainerOW</Label>
      <Comment> Try to make the heart container in OW.&#xD;
&#xD;
&#xD;
 Heart container</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96401</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in mode 5, and in room $5F, then go store the coordinates&#xD;
 in the object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96397</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the coordinates of the heart container in&#xD;
 OW room $5F.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96327</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up the item for this room, and store it.&#xD;
 If it's item ID 3, then deactivate the object.&#xD;
&#xD;
 Item ID 3 normally means the master sword. But because the&#xD;
 usual value meaning "no item" ($3F) can't fit in the level&#xD;
 block attribute for a room item (up to $1F); use 3 to&#xD;
 stand in for it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91855</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L166CF</Label>
      <Comment> Second, subtract 3 from provisional face index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96413</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1789D</Label>
      <Comment> Else deactivate the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24576</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitWhirlwind</Label>
      <Comment> Params:&#xD;
 A: Y coordinate&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24868</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not teleporting, go start updating the mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24870</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Since we're already teleporting, the source room was&#xD;
 already done. Set up the whirlwind object in destination room.&#xD;
&#xD;
 Teleporting state 2 drops off Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24873</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Halt Link (state $40).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24877</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Whirlwind object goes in slot 9 in destination room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1315</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TeleportingLevelIndex</Label>
      <Comment> This index can take on any value. But there are 8 levels.&#xD;
 At the point of use, this is AND'ed with 7.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24857</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TeleportYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24879</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get Y coordinate of whirlwind in this destination.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125713</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not in mode 5, go start updating.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94669</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode9_WalkCellar</Label>
      <Comment> Set Link's input direction to the facing direction, and&#xD;
 update the player object; so that it walks down the stairs&#xD;
 of the cellar. Stop when it reaches Y coordinate $5D.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94683</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset player state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94687</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Remember that this is a cellar.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94691</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start updating the mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125310</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Submode 0.&#xD;
 First step, transfer level pattern blocks and copy common code.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125433</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: [17] ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125880</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If underground exit type &lt;&gt; 0, then in OW and ...</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84571</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Invincibility timers count down every 2 frames, while&#xD;
 object timers count every frame. So, these 2 timers measure&#xD;
 about the same amount of time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125023</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Unique room ID in both OW and UW.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84602</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a timer. But no one waits for it?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84606</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset submode, CurRow, and player's state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84614</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There will be 4 turns starting from down direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84620</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start updating.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85304</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The second sprite is 8 pixels to the right.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83923</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset door trigger info.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83929</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store level block attribute byte F for convenience.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>87</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Link_GoStraight</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94306</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, use second of bounds, and go copy them.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94308</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset DoorwayDir and use first set of bounds.&#xD;
&#xD;
&#xD;
 Offset of first set of bounds.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125651</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RunCrossRoomTasksAndBeginUpdateMode_EnterPlayModes</Label>
      <Comment> Called in modes 4, 5, 9, $B, $C.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125643</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RunCrossRoomTasksAndBeginUpdateMode_PlayModesNoCellar</Label>
      <Comment> Called in modes 5, $B, $C.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125973</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: StairsTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125976</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link has reached the target position, go finish the mode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125945</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EBF9_StepOutside</Label>
      <Comment> We're stepping out of underground or cellar.&#xD;
&#xD;
&#xD;
 If in UW, then go finish the mode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125963</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 4 frames, move Link up 1 pixel.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125949</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player stepped on stairs instead of an opening, then&#xD;
 go finish the mode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125955</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're entering the OW room from a cave or dungeon.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ChaseLongTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125890</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If UndergroundExitType is set, go step out of underground (or cellar).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94547</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeA_Sub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94535</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeA_Sub2</Label>
      <Comment> Light cellar -&gt; dark cellar cycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94524</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeSubroom_AnimateFade</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93216</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayoutRoom_SubmodeTask</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94566</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeA_Sub6_FillTileAttrsAndTransferTopHalf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94579</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeAOrB_TransferBottomHalfAttrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94539</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeA_Sub8</Label>
      <Comment> Dark cellar -&gt; light level cycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94554</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeA_SubA_GoToMode4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40424</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DeletedSlotBlankNameTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>15</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125557</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In UW.&#xD;
&#xD;
 Certain bosses and boss-like monsters need&#xD;
 their own palettes. If we're dealing with one, then get&#xD;
 the matching transfer buffer selector.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125628</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EABC_UseLevelPalette</Label>
      <Comment> Patch and cue palette row 7 transfer buf (6) with row 7&#xD;
 of level palette.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125577</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EA89_InOW</Label>
      <Comment> In OW.&#xD;
&#xD;
 If the room is 0F and we just walked in instead of&#xD;
 coming out of underground; then play "secret found" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125592</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EA98_ChooseTileObjPalette</Label>
      <Comment> Choose a palette transfer buf for a tile object that has sprites.&#xD;
 Rock, gravestone, Armos1, Armos2&#xD;
&#xD;
&#xD;
 Ghost palette row</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107158</Address>
      <AddressType>PrgRom</AddressType>
      <Label>OrangeBossPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125538</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SpecialBossPaletteObjTypes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125529</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SpecialBossPaletteTransferBufSelectors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125565</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object type doesn't match, go check the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125570</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go cue the transfer of this palette row. The selector is in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125575</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it doesn't match any boss type, go copy and transfer level palette row 7.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125599</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If tile object type is gravestone ($65), go cue transfer buf $20.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125603</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If tile object type is Armos1 ($66), go see if the room's attributes should override transfer buf $20.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125607</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If type is not rock ($62) (so Armos2), go set the right selector.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125609</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It's a rock tile object.&#xD;
 Choose palette based on inner palette attribute to match it.&#xD;
&#xD;
&#xD;
 Brown palette row</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125618</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the room's inner palette attribute is odd, go cue transfer buf chosen above ($20 if Armos1, else $24).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125622</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else it's even, so go cue transfer buf $22.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125624</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EAB8_UseRedArmosPalette</Label>
      <Comment> Tile object is Armos2. Use red Armos palette row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125626</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go cue this transfer buf.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107150</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AquamentusPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107010</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107142</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107077</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GhostPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107093</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BrownBgPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107085</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GreenBgPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107134</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedArmosPaletteRow7TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125620</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Green palette row</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IsDarkRoom_Bank4</Label>
      <Comment> Params:&#xD;
 Y: room ID&#xD;
&#xD;
 Returns:&#xD;
 A: $80 if dark, else 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78287</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not a dark room, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78289</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start a fade-to-light cycle (reverse of $40).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1310</Address>
      <AddressType>InternalRam</AddressType>
      <Label>BrighteningRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78311</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If done fading, go stop brightening the room.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78301</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Candle_StopBrightening</Label>
      <Comment> Stop brightening the room, and go set the candle state to done.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78308</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCandle_Brightening</Label>
      <Comment> Animating a brightening cycle.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78282</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCandle_Begin</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78270</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCandle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78300</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCandle_Done</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125983</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If brightening the room, then animate it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126025</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EC49_CheckPaused</Label>
      <Comment> If paused, then make sure to use NT 0,&#xD;
 update hearts and rupees, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125996</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EC2C_CheckMenuAndPause</Label>
      <Comment> Check menu and pause.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125998</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the submenu is active, go update it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126052</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not in the submenu, go check Start or update the world.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126054</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In submenu.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81920</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuAndMeters</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126095</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then we changed the mode, so don't update anything else.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126088</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EC88_NotInvincible</Label>
      <Comment> Update the player.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124929</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's no item to lift, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124936</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set player state to halted.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1286</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ItemLiftTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124934</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the item lift timer has expired, go return to normal.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125000</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EndLinkLiftingItem</Label>
      <Comment> Make Link idle, and reset the item type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125007</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, play the level's song again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124926</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckLiftItem</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126333</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ED7D_FinishUpdatePlay</Label>
      <Comment> These actions are done after Link is updated, regardless&#xD;
 of whether other objects were updated.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126098</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EC92_CheckChaseTarget</Label>
      <Comment> If Link can be chased, then set his coordinates as the target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91649</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn the door command into the desired open or closed state&#xD;
 to store in [08].&#xD;
&#xD;
 cmd:  7 6 3 2 &#xD;
 [08]: 2 0 0 0&#xD;
&#xD;
 There are other combinations, but 2, 3, 6, and 7 are the only&#xD;
 commands intended to be used.&#xD;
&#xD;
 3 is the end state of 2: close&#xD;
 7 is the end state of 6: open&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4917</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Switch to room item object slot $13.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4912</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If player took the room item, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124655</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Room item object state</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124697</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E719</Label>
      <Comment> Copy room item object position to sprite descriptor.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4919</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If room item object wasn't activated, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124674</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Stalfos</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124670</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Like-Like</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124678</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Gibdo</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124659</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the item type is "none" ($3F), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124684</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateRoomItemObject</Label>
      <Comment> Pass item type to AnimateItemObject.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124682</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> A monster is not carrying the item. So draw the item as usual.&#xD;
&#xD;
&#xD;
 Room item is in object slot $13.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124665</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's a room item, and object 1 is a like-like, stalfos, or gibdo;&#xD;
 then move the item along with the monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124650</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MoveAndDrawRoomItem</Label>
      <Comment> If the item was taken, or it wasn't active, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124645</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go draw the item at this position.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124648</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E6E8_PopAndExit</Label>
      <Comment> Pop and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124637</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateRoomItemOnMonster</Label>
      <Comment> Put room item object where the first monster is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4923</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Pass RoomItemId, also known as [98][$13] and ObjDir[$13],&#xD;
 to try to take the item.&#xD;
&#xD;
 DASM.EXPR: ObjRoomItemId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4876</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SetRoomFlagUWItemState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4981</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Unless it's the Triforce of Power; in which case&#xD;
 play the "item appears" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4925</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [04] holds the item type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4990</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If we're in a cave or cellar, then&#xD;
 prepare to lift the item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4976</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TakeItem</Label>
      <Comment> Params:&#xD;
 A: item ID&#xD;
&#xD;
 By default, we'll play the "item taken" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4974</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get the item type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4967</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If it is the room item that is taken, then&#xD;
 mark it taken in room flags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4996</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Lift for $80 frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5001</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Play the "item" song.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5009</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C01_SkipLift</Label>
      <Comment> Look up the item slot and sprite attributes by the item type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5006</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set the item type for lifting.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5017</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [0A] holds the item value from the low nibble of descriptor.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5023</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Check the high nibble which specifies the item's class.&#xD;
&#xD;
 A: item class&#xD;
 X: item type&#xD;
 Y: item slot&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4904</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TryTakeRoomItem</Label>
      <Comment> If Link is halted, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5043</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Finally, this is a simple item. Put the item value in the item slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5027</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Class 0. We have an item of a type that's unique or complex.&#xD;
&#xD;
 First, check the exceptions. If the item is a map, compass, or triforce; then go handle them.&#xD;
&#xD;
&#xD;
 Map item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5031</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Compass item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5035</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Triforce pieces item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5039</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Triforce of Power item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5145</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C89_TakeClass0Complex</Label>
      <Comment> We're taking a class 0 complex item found in UW.&#xD;
&#xD;
 A: item class&#xD;
 X: item type&#xD;
 Y: item slot&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5147</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If in OW, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78084</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13104</Label>
      <Comment> If lifetime reached 0, go destroy the object.&#xD;
&#xD;
 DASM.EXPR: Item_ObjItemLifetime&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4934</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If Y distance between Link and the item &gt;= 9, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4949</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If X distance between Link and the item &gt;= 9, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4961</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> In case this is the room item, set state to $FF to deactivate it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5058</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C32_CheckClass1</Label>
      <Comment> A: item class&#xD;
 X: item type&#xD;
 Y: item slot&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5292</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlayKeyTakenTune</Label>
      <Comment> Stop playing tune 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5297</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Play "key taken" tune.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5078</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> For key item slot, play the tune here.&#xD;
 Add to the amount below.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5085</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> For fairy item slot, go handle it where hearts are increased.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5089</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Keys and other items.&#xD;
 Add item value and value in item slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5099</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> For potion item slot, cap it at 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5109</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> For bomb item slot, cap it at MaxBombs.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5074</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Heart item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5070</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Rupee item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5066</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> 5 Rupees item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5062</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Class 1. We have a type of item with an amount.&#xD;
 Item value is the amount to add.&#xD;
&#xD;
&#xD;
 Heart container item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5095</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the sum overflowed,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5097</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C59_SetItemValueFF</Label>
      <Comment> then cap it at $FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5121</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Go set the item value and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5124</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C74_TakeHeartContainer</Label>
      <Comment> For heart containers, cap at $10.&#xD;
 Add a heart container and a heart.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5129</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If we already have max hearts, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5133</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Go set the item value and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5049</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C29_Take5Rupees</Label>
      <Comment> For 5 Rupees, perform the action for 1 rupee 5 times.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5283</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TakeOneRupee</Label>
      <Comment> Play "rupee taken" tune.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5195</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6CBB_TakeHearts</Label>
      <Comment> Params:&#xD;
 [0A]: item value/amount&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5198</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6CBE_TakeHeartsNoSound</Label>
      <Comment> Move item value in [0A] to [01].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5219</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If there are more hearts to add, go compare them to heart containers again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5200</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [01] holds the number of hearts to add minus 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5202</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6CC2_CompareHearts</Label>
      <Comment> For that many hearts, add them one by one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5205</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If there's room to add a whole heart, go add it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5214</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6CCE_AddWholeHeart</Label>
      <Comment> Add a whole heart.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5207</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If partial heart is not full, then fill it and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5060</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Go check class 2 items.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5139</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C83_CheckClass2</Label>
      <Comment> Make sure this is an item of a type ordered by grade.&#xD;
 Then go handle it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5141</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the class is $30, go set item value to $FF.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5252</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6CF4_HandleClass2</Label>
      <Comment> Class 2. We have a type of item that is ordered by grade.&#xD;
 Item value is the grade.&#xD;
&#xD;
 A: item class&#xD;
 X: item type&#xD;
 Y: item slot&#xD;
 [0A]: item value&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5257</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If we have a higher grade of this kind of item, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5262</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Ring item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5259</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set the new item grade.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5264</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the item is not a ring, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5266</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> We took a ring. Change Link's color.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5268</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get ring in inventory.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4901</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LinkColors_CommonCode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5271</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get the color for this ring value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5274</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get the offset of row 4, 5, or 6, depending on save slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5277</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Patch the color into the menu palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5280</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Then patch the color into the level's palette.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5149</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Triforce of Power item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5153</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Map item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5244</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6CEC_L_TakePowerTriforce</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32684</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwitchBank_Local1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5155</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If it's the map item slot,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5157</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> then signal the main loop to draw the status bar map.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5162</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Choose the right slot for the level. (map/map9, compass/compass9)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126329</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue the transfer of the level's status bar map.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5163</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Subtract one from level number to base it on 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5167</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the result &gt;= 8, we're in level 9,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5169</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> So add 2 to the item slot to use the one for level 9.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5171</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Make sure the level index is in the range 0 to 8.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5174</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Combine the mask for this level with the mask in the item slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5183</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the item taken was a triforce piece, then go to mode $12.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5185</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If it's not a triforce piece, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1289</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TriforceFanfareActive</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5025</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Go check classes 1 and 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25012</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Halt Link for $C0 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25009</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TakePowerTriforce</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1253</Address>
      <AddressType>InternalRam</AddressType>
      <Label>StatusBarMapTrigger</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126319</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Transfer the level's status bar map, if we got the signal.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126298</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sea sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124787</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E773_AddItemAndTableValue</Label>
      <Comment> Calculate sprite attributes by adding item value / sprite palette&#xD;
 row attribute and the element from ItemSlotToPaletteOffsetsOrValues,&#xD;
 which here represents an offset from the palette row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78089</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw the item. Fairies are animated separately.&#xD;
&#xD;
 DASM.EXPR: Item_ObjItemId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78365</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateFairyObject</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78104</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13118</Label>
      <Comment> If the player is halted, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78112</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In addition to Link, there are 3 objects that can pick up items: &#xD;
 * arrow&#xD;
 * sword&#xD;
 * boomerang&#xD;
&#xD;
 For each weapon that's active, substitute it's location for&#xD;
 Link's and try taking the item. Have Link himself check last.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78145</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13141_TryToTake</Label>
      <Comment> Try to take the item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78116</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13124_LoopItemTaker</Label>
      <Comment> Save Link's location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78155</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1314B_SkipTaking</Label>
      <Comment> Restore Link's location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78172</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there are more object slots to check from, go try the next one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78114</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0D] holds index into array of item slots that can take an item.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78170</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrease the index [0D].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78161</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reload object index in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78164</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If item object's item type is invalid, then the item was taken.&#xD;
 So, go destroy this object.&#xD;
&#xD;
 DASM.EXPR: Item_ObjItemId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78072</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ItemTakerObjSlots</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78124</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ItemTakerObjSlots-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78122</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Link's location to this object's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78137</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link is checking directly, go try to take the item.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78139</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object whose place Link is taking is not active, then&#xD;
 don't try to take the item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78081</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Item_ObjItemLifetime</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78148</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Item_ObjItemId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77942</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If found, go destroy the monster.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78175</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DestroyMonster_Bank4</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78472</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MoveFlyer</Label>
      <Comment> Add (flying speed AND $E0) to flying position fraction.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjSpeed&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78347</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetFlyerState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78324</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetUpFairyObject</Label>
      <Comment> Play "fairy appears" tune. It's also "object taken".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38821</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Animate the fairy specially.&#xD;
&#xD;
 DASM.EXPR: DemoItemIds</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38834</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L97B2_AnimateNormal</Label>
      <Comment> Animate normal items (type &lt; $30).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38844</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L97BC_AnimateFinal</Label>
      <Comment> At the end of the list of items are special items for Link&#xD;
 and the sheet of paper.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78448</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> (whole_speed &amp; $E0) = 0&#xD;
 Set a random timer between $40 and $7F.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78456</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to flying state 5.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69737</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_PeahatDecideState</Label>
      <Comment> Go to the next state randomly:&#xD;
 Random &gt;= $B0: 2&#xD;
 Random &gt;= $20: 3&#xD;
 Else:          4&#xD;
&#xD;
 Set up 6 turns.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78465</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If (whole_speed &amp; $E0) &lt; threshold, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78467</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else go to flying state 1, and return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78501</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L132A5_Left</Label>
      <Comment> Test left.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78484</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the fraction isn't whole yet, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78486</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Because this object can move in 8 directions,&#xD;
 test the object's direction with each cardinal direction,&#xD;
 to modify the coordinates accordingly.&#xD;
&#xD;
 Test right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78512</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L132B0_Down</Label>
      <Comment> Test down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78523</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L132BB_Up</Label>
      <Comment> Test up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78534</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L132C6_End</Label>
      <Comment> Increase the distance traveled; and keep the object within&#xD;
 the bounds of the room.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjDistTraveled&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78494</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Right is not a component? Go check next direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78505</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Left is not a component? Go check next direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78516</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Down is not a component? Go check next direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78527</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Up is not a component? Go finish up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78389</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlFairyFlight</Label>
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78422</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_Delay</Label>
      <Comment> Delay until ObjTimer[X] expires. Then go to flying state 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78438</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_SpeedUp</Label>
      <Comment> Increase speed each frame.&#xD;
 When it reaches a threshold, go to flying state 1.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjSpeed&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78432</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_SlowDown</Label>
      <Comment> Decrease speed each frame.&#xD;
 When it goes below a threshold ($20), go to flying state 5.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjSpeed&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78413</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_DoNothing</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78403</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_FairyDecideState</Label>
      <Comment> Set up 6 turns, and go to state 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1233</Address>
      <AddressType>InternalRam</AddressType>
      <Label>FlyingMaxSpeedFrac</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69755</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set 6 turns for the next state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78712</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_Wander</Label>
      <Comment> Description:&#xD;
 Delay and turn randomly a number of times.&#xD;
 The go to state 1. After each turn, delay $10 frames.&#xD;
&#xD;
&#xD;
 Delay until timer = 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78724</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13384</Label>
      <Comment> Set a delay of $10 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66739</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_KeeseDecideState</Label>
      <Comment> Go to the next state randomly:&#xD;
 Random &gt;= $A0: 2&#xD;
 Random &gt;= $20: 3&#xD;
 Else:          4&#xD;
&#xD;
 Set up 6 turns.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66745</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &gt;= $A0, go to state 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66750</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &gt;= $20, go to state 3.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66752</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else go to state 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66757</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set 6 turns for the next state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69743</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &gt;= $B0, go to state 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69748</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &gt;= $20, go to state 3.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69750</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else go to state 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69655</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_GhiniDecideState</Label>
      <Comment> Go to the next state randomly:&#xD;
 Random &gt;= $A0: 2&#xD;
 Random &gt;= $08: 3&#xD;
 Else:          4&#xD;
&#xD;
 Set up 6 turns.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69669</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11025</Label>
      <Comment> Go set the state we determined.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69661</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &gt;= $A0, go to state 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69666</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &gt;= 8, go to state 3.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69668</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else go to state 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78602</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If timer is not expired, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78600</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_Chase</Label>
      <Comment> Description:&#xD;
 Turn towards the player a number of times.&#xD;
 Then go to state 1. After each turn delay $10 frames.&#xD;
&#xD;
&#xD;
 Delay until timer = 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78751</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetObjDir8Index</Label>
      <Comment> Returns:&#xD;
 Y: index of 8-way direction of flyer object&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78414</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Directions8</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78763</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not found, then use index 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78728</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TurnRandomlyDir8</Label>
      <Comment> Turn according to a random value:&#xD;
 &gt;= $A0: don't turn&#xD;
 &gt;= $50: turn right&#xD;
 Else:   turn left&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78716</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrease the turn counter.&#xD;
 Once there are no more turns, go to flying state 1.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjTurns</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78748</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set object direction for 8-way index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78604</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrease the turn counter.&#xD;
 Once there are no more turns, go to flying state 1.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjTurns</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78614</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13316_SetDelayAndTurn</Label>
      <Comment> Set a delay of $10 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78698</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1336A_SetDir8ForIndex</Label>
      <Comment> Apply the new direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78618</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TurnTowardsPlayer8</Label>
      <Comment> Build a direction in [00] towards the player.&#xD;
&#xD;
 First, calculate a horizontal component:&#xD;
&#xD;
 If   observed player X = object X, [00] := 0 (none)&#xD;
 elif observed player X &gt; object X, [00] := 1 (right)&#xD;
 else                               [00] := 2 (left)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78634</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1332A_CalcVertical</Label>
      <Comment> Second, calculate a vertical component.&#xD;
 Combine it with the horizontal component:&#xD;
&#xD;
 Y := 4 (down)&#xD;
 if observed player Y &lt;&gt; object Y then&#xD;
   if observed player Y &lt; object Y then&#xD;
     Y := Y &lt;&lt; 1   -- makes it 8 (up)&#xD;
   [00] := [00] | Y&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78652</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1333C_SkipVertical</Label>
      <Comment> Get the index of the object's direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78655</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check 3 directions turning left:&#xD;
 1. right from object direction&#xD;
 2. object direction&#xD;
 3. left from object direction&#xD;
&#xD;
 If the target direction matches any of these, then&#xD;
 leave the object's direction alone.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78704</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13370_TestDir</Label>
      <Comment> If (test direction OR target direction) &lt; 7, then allow this turn.&#xD;
 Else go try the next test direction.&#xD;
&#xD;
 For 3/5 of the arrangements of angles between Link and&#xD;
 objects; this test yields a turn towards Link. The rest of&#xD;
 the time, the object will keep going in its original direction&#xD;
 or turn away from Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>97</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ChaseTargetX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ChaseTargetY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78680</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This brings the index to one turn left of the object's direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78661</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Modulo 8 to roll over the index as needed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78682</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Modulo 8 to roll over the index as needed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78669</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return if it matches.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78657</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds the count of directions to check</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78659</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn right.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78671</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn left.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78676</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check 3 directions turning right:&#xD;
 1. left of object direction&#xD;
 2. object direction&#xD;
 3. right of object direction&#xD;
&#xD;
 If any direction component of the target direction matches&#xD;
 these, then see if we should turn to this direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78692</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13364_NextLoopRight</Label>
      <Comment> Turn right.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78697</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We didn't find a direction to switch to.&#xD;
 So turn left once; to one turn right of object direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78377</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 4 frames, switch between the two sprite frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3881</Address>
      <AddressType>SaveRam</AddressType>
      <Label>BoundDirectionHorizontally</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 [0F]: direction&#xD;
&#xD;
 Returns:&#xD;
 Y: direction of boundary that was crossed&#xD;
 [0F]: original direction, or 0 if boundary was crossed&#xD;
&#xD;
&#xD;
 Checking left direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3891</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object slot &gt;= $D (items and weapons) or object type = $5C (boomerang),&#xD;
 then add $B to X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>839</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomBoundRight</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3909</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L67B5_Left</Label>
      <Comment> Check left boundary.&#xD;
 If X coordinate crosses (&lt;) left bound, go reset the direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>838</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomBoundLeft</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3885</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [00] holds X coordinate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3947</Address>
      <AddressType>SaveRam</AddressType>
      <Label>BoundDirectionReturn</Label>
      <Comment> If the reference direction in Y register is 0, then&#xD;
 return and leave direction alone.&#xD;
 Else reset the target direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3955</Address>
      <AddressType>SaveRam</AddressType>
      <Label>BoundDirectionVertically</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 [0F]: direction&#xD;
&#xD;
 Returns:&#xD;
 Y: direction of boundary that was crossed&#xD;
 [0F]: original direction, or 0 if boundary was crossed&#xD;
&#xD;
&#xD;
 Checking up direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3938</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L67D2_Right</Label>
      <Comment> Check right boundary.&#xD;
 If X coordinate is within (&lt;) right bound, return and leave direction alone.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3918</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object is the player, skip this.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3916</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object is not the player and (slot &gt;= $D or type = $5C),&#xD;
 then subtract $17 from X coordinate in order to check the&#xD;
 right bound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3929</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If not boomerang type, skip this.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3965</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object slot &gt;= $D (items and weapons) or object type = $5C (boomerang),&#xD;
 then add $F to X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3959</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [00] holds Y coordinate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3983</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L67FF_Up</Label>
      <Comment> Check up boundary.&#xD;
 If Y coordinate crosses (&lt;) up bound, go reset the direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>840</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomBoundUp</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>841</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomBoundDown</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3990</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object is not the player and (slot &gt;= $D or type = $5C),&#xD;
 then subtract $21 from Y coordinate in order to check the&#xD;
 down bound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4012</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L681C_Down</Label>
      <Comment> Check down boundary.&#xD;
 If Y coordinate is within (&lt;) down bound, return and leave direction alone.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3992</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object is the player, skip this.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4003</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If not boomerang type, skip this.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4019</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If Y coordinate crosses (&gt;=) right boundary, go reset target direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78548</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check vertical boundaries, if object is not a boulder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78558</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L132DE</Label>
      <Comment> If movement wasn't restricted, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78562</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ReverseObjDir8</Label>
      <Comment> Get the opposite direction of the one the object is facing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78572</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object type = $41 (moldorm), then go see if we need&#xD;
 to set the deferred bounce direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78579</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Apply the new direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78585</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L132F9_DeferBounce</Label>
      <Comment> If the object is segment 5 or $A of moldorm (a head), then&#xD;
 assign the new direction to the deferred bounce direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78541</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BoundFlyer</Label>
      <Comment> Returns:&#xD;
 A: original facing or the opposite&#xD;
 [0F]: 0 if blocked&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78498</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjOffsetX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78509</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjOffsetX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjOffsetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78531</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjOffsetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69719</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlPeahatFlight</Label>
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6107</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DrawObjectMirrored</Label>
      <Comment> Params:&#xD;
 A: frame image&#xD;
 X: object index&#xD;
 [00]: object X&#xD;
 [01]: object Y&#xD;
&#xD;
&#xD;
 Set [0C] mirrored.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6115</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set animation index = object type + 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6111</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DrawObjectNotMirrored</Label>
      <Comment> Params:&#xD;
 A: frame image&#xD;
 X: object index&#xD;
 [00]: object X&#xD;
 [01]: object Y&#xD;
 [0F]: flip horizontally&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6113</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set [0C] not mirrored.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6823</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckLinkCollision</Label>
      <Comment> Params:&#xD;
 X: monster object index&#xD;
&#xD;
 Returns:&#xD;
 [00]: 0 for Link slot&#xD;
 [06]: 1 if objects collide&#xD;
 [09]: 0 for Link damage type (none)&#xD;
 [0C]: 1 if objects collide&#xD;
 [034B]: ShotCollidesWithLink&#xD;
&#xD;
 TODO:&#xD;
 Returns:&#xD;
 Y: 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66721</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlKeeseFlight</Label>
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126373</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link is halted, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1298</Address>
      <AddressType>InternalRam</AddressType>
      <Label>LinkParalyzed</Label>
      <Comment> Put the monster at the same location as Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126381</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
&#xD;
 If Link is paralyzed (by a like-like), then&#xD;
 reset input direction.&#xD;
&#xD;
 As far as I can tell, ObjInputDir could have been set to 0,&#xD;
 instead of masking with $F0 for the same effect.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94906</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L172BA_CheckMovement</Label>
      <Comment> If player was shoved, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94874</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_HandleInput</Label>
      <Comment> If state = 0, handle A and B buttons.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4111</Address>
      <AddressType>SaveRam</AddressType>
      <Label>OppositeDirs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85388</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_FilterInput</Label>
      <Comment> [00] holds the opposite of Link's facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85406</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14D9E</Label>
      <Comment> [02] holds the coordinate (X or Y).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85408</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mask A button and directions if inner border is crossed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85395</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Call GetOppositeDir again to use this mapping:&#xD;
 In Dir: 1 2 4 8&#xD;
         -------&#xD;
 Index:  2 3 0 1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85398</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the appropriate coordinate for the direction:&#xD;
 X for horizontal&#xD;
 Y for vertical&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85409</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save reverse direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85419</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore reverse direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85445</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MaskInputInBorder</Label>
      <Comment> Params:&#xD;
 A: mask of buttons to block&#xD;
 Y: offset into BorderBounds&#xD;
 [00]: direction&#xD;
 [02]: coordinate&#xD;
&#xD;
 Returns:&#xD;
 [01]: button mask that was used&#xD;
       (set to $FF if boundary not crossed)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85447</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction is positive (right or down), then go handle it separately.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85453</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The direction is negative (left or up).&#xD;
&#xD;
 If the coordinate does not cross (&lt;) the boundary, then&#xD;
 go set mask $FF, so that no button is excluded.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85376</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BorderBounds</Label>
      <Comment> Three sets of border coordinates:&#xD;
 - outer OW&#xD;
 - outer UW&#xD;
 - inner&#xD;
&#xD;
 Within each set, the coordinates are arranged:&#xD;
 down, up, right, left&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85492</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14DF4_PositiveDir</Label>
      <Comment> The direction is positive.&#xD;
&#xD;
 If the coordinate crosses (&lt;) the boundary, then&#xD;
 go mask buttons.&#xD;
&#xD;
&#xD;
 Get coordinate in [02].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85499</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14DFB_ExcludeNone</Label>
      <Comment> The coordinate is not crossed; then set mask $FF,&#xD;
 so that no button is excluded.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85501</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds button mask.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85460</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14DD4_MaskButtons</Label>
      <Comment> The boundary was crossed. Mask buttons.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85462</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] button mask</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85466</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW or button mask &lt;&gt; 0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85474</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mask off input directions perpendicular to player's facing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85411</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 8 for the third set of border bounds. Each is 4 bytes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85414</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Button A will be masked off, if boundary is crossed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85421</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If inner boundary was not crossed, then we'll check the outer&#xD;
 boundary using player's direction and reverse direction index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85434</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14DBA</Label>
      <Comment> If in UW, use the second set of bounds by adding 4&#xD;
 to reverse direction index.&#xD;
&#xD;
 Else in OW, and use first set that begins at offset 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85429</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] now holds facing direction instead of the opposite.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85431</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the reverse direction index for the actual facing.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85443</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14DC3</Label>
      <Comment> We won't mask buttons (A) this time. Only directions now.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1326</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SwordBlocked</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94881</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the sword is not blocked, then handle the sword if A is pressed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85504</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldSword</Label>
      <Comment> If there's no sword, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85532</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldItem</Label>
      <Comment> If the letter slot is selected, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94897</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L172B1</Label>
      <Comment> If B is pressed, handle the item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>192</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjShoveDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94912</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, then move correctly inside doorways.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86335</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_ModifyDirInDoorway</Label>
      <Comment> In a doorway (UW), you can only move in the direction&#xD;
 that you entered it or the opposite.&#xD;
&#xD;
&#xD;
 If not in a doorway nor moving, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94919</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L172C7</Label>
      <Comment> Change directions according to whether the player is at an intersection point&#xD;
 (grid offset = 0) or between points along a line (grid offset &lt;&gt; 0).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DoorwayDir</Label>
      <Comment> The direction that Link entered a doorway.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86344</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the facing direction is part of the input direction, then&#xD;
 keep moving in the facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86351</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the opposite of the facing direction is part of the input direction, then&#xD;
 face the opposite direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86359</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If neither direction matched input direction, then&#xD;
 change input direction to facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95117</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_ModifyDirOnGridLine</Label>
      <Comment>&#xD;
 If not moving, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95122</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's more than one component in the input direction,&#xD;
 then take only one of them.&#xD;
&#xD;
 After this point, Y holds the reverse index of this single direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3523</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ReverseDirections</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95128</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the single input direction matches object direction,&#xD;
 then keep going in this direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95132</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the single input direction is the opposite of object direction, then&#xD;
 change to the single input direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95151</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L173AF</Label>
      <Comment> The directions are perpendicular.&#xD;
&#xD;
 Keep going in facing direction, if that's what Link's been told to do.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95140</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the directions are perpendicular, go handle this case.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95145</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetObjDirAndInputDir</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95134</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Combined opposite horizontals (1 OR 2).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95138</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Combined opposite verticals (4 OR 8).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94927</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_ModifyDirAtGridPoint</Label>
      <Comment> Grid offset = 0, so A = 0 here.&#xD;
 Reset some variables.&#xD;
&#xD;
&#xD;
 [0B] holds input direction count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95155</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link's movement grid cell size is 8. If he's moved half that&#xD;
 length or more, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95167</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds the opposite of facing direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95174</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link had turned back and is facing a grid point that he&#xD;
 had started walking from, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95192</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L173D8_ReverseDir</Label>
      <Comment> Reverse Link's direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95196</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reverse the grid offset. Yield an offset for the same position&#xD;
 in the line, but in the opposite direction. For example,&#xD;
 -1 =&gt; 7&#xD;
  3 =&gt; -5&#xD;
&#xD;
 Positive offset: -8 - -offset&#xD;
 Negative offset:  8 - -offset&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126928</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Walker_Move</Label>
      <Comment> If the object is being shoved, then go shove it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94933</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for walkable directions that are components of the&#xD;
 input directions.&#xD;
&#xD;
 Keep track of how many and which directions were input&#xD;
 directions and walkable.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94968</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there were no input directions, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94947</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the input dir count in [0B].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94941</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this direction doesn't match, skip it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94943</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] holds the last input direction found.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94945</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the reverse direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94963</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L172F3</Label>
      <Comment> Restore the reverse direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94955</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is unwalkable, skip it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94961</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increase the walkable direction count in [0C].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94959</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0D] holds the last walkable direction found.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94929</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0C] holds walkable direction count.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94973</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L172FD_HaveInput</Label>
      <Comment> There were input directions.&#xD;
&#xD;
 If there was only one input direction, go set object direction&#xD;
 to input direction, and set Link's speed.&#xD;
&#xD;
 Also, *RESET* Link_GoStraightWhenDiagInput&#xD;
 (X is still 0, because it's Link's object index).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94979</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There were more than one input directions.&#xD;
&#xD;
 If none were walkable, go set input direction to 0, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95071</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1735F_SetLinkDirAndSpeed</Label>
      <Comment> Set object and input direction to value in A.&#xD;
 Set Link_GoStraightWhenDiagInput to value X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94986</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1730A</Label>
      <Comment> Two input directions, and at least one of them is walkable.&#xD;
&#xD;
 Make Link go straight in one direction on the next grid line.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94931</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset this. We'll figure out if needs to be set again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94989</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW or only one direction of the two is walkable, then go set&#xD;
 object direction and input direction to last walkable direction&#xD;
 found, and set Link's speed.&#xD;
&#xD;
 Also, *RESET* Link_GoStraightWhenDiagInput.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95001</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In UW. There are two input directions, and they're both walkable.&#xD;
&#xD;
 Normally, turn to the direction that's perpendicular to object&#xD;
 direction. But keep going straight after that, while diagonal&#xD;
 input is held.&#xD;
&#xD;
 Handle special cases for doors.&#xD;
&#xD;
&#xD;
 1. Link at horizontal doors.&#xD;
&#xD;
 If Link's X = $20 or $D0 then&#xD;
   If Link's Y = $85 and facing down then&#xD;
     Go set object direction and input direction to object&#xD;
     direction, and set Link's speed. Also, *RESET*&#xD;
     Link_GoStraightWhenDiagInput.&#xD;
   Else&#xD;
     Go turn to the perpendicular direction&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94991</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0D] holds last walkable direction found.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95053</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1734D</Label>
      <Comment> Find the input direction that's perpendicular to the&#xD;
 object's direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95027</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17333</Label>
      <Comment> If allowed to turn when input is diagonal (2 directions), then&#xD;
 go take the direction perpendicular to object direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95033</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> At this point, Link_GoStraightWhenDiagInput is true.&#xD;
&#xD;
&#xD;
 2. Link at top door.&#xD;
&#xD;
 If Link's X &lt;&gt; $78 or Link's Y &lt;&gt; $5D then&#xD;
   Go set object direction and input direction to object&#xD;
   direction, and set Link's speed. Also, *SET*&#xD;
   Link_GoStraightWhenDiagInput.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95049</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object direction is vertical then&#xD;
   Go set object direction and input direction to object&#xD;
   direction, and set Link's speed. Also, *SET*&#xD;
   Link_GoStraightWhenDiagInput.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95056</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Do this to get reverse index of object direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95055</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make sure to set Link_GoStraightWhenDiagInput.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94870</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AxisMasks</Label>
      <Comment>Indexed by reverse direction index.&#xD;
&#xD;
Is used in mapping a direction to a mask for its axis.&#xD;
For example:&#xD;
- right masks off up and down&#xD;
- up masks off left and right&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95063</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mask input directions with the mask for the object's direction's axis.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95062</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save input directions.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95068</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore input directions.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Link_GoStraightWhenDiagInput</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95035</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Also do it if in OW. But if in OW, we returned already.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126648</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Obj_Shove</Label>
      <Comment> If this is not the first call to this routine for this instance of shoving (high bit is clear),&#xD;
 then go handle it separately.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126935</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFD7_ChooseObjDirOrInputDir</Label>
      <Comment> Summary: Choose object direction or input direction for movement as appropriate.&#xD;
&#xD;
 Player: If there's input, then use input direction when grid offset = 0,&#xD;
         or object direction when &lt;&gt; 0.&#xD;
&#xD;
 Other objects: Move in input direction, unless stunned or magic clock is active.&#xD;
&#xD;
 if slot = 0 and grid offset &lt;&gt; 0 then&#xD;
   if input dir = 0 then&#xD;
     use 0&#xD;
   else&#xD;
     use object direction&#xD;
 else&#xD;
   if slot &lt;&gt; 0 and (has clock or stunned) then&#xD;
     return&#xD;
   else&#xD;
     if input dir = 0&#xD;
       use 0&#xD;
     else&#xD;
       use input direction&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127548</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_EndMoveAndAnimate</Label>
      <Comment> Switches bank: 5&#xD;
&#xD;
 If teleporting by whirlwind, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126979</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F003_SetMovingDir</Label>
      <Comment> Mask off everything but directions.&#xD;
 (I don't think there's anything else)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126981</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] holds the movement direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126983</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0E]: $FF, if blocked by a door&#xD;
       else will hold the reverse index of the direction of a doorway if found&#xD;
 </Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126987</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object is Link and using or catching an item then&#xD;
 reset movement direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127003</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F01B</Label>
      <Comment> [0F] movement direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127005</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F01D_OnlyLink</Label>
      <Comment> If object is not Link, then skip the code below.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127075</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F063_CheckBoundary</Label>
      <Comment> This code applies to all objects.&#xD;
&#xD;
 Prevents movement outside the walls or border of a room,&#xD;
 even Link in front of a doorway.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24899</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Block</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24903</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Rock</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24907</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Gravestone</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24911</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Armos1?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24913</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it doesn't match any, go check the next object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24894</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckTileObjectsBlocking</Label>
      <Comment> Params:&#xD;
 [0F]: movement direction&#xD;
&#xD;
 Returns:&#xD;
 [0F]: untouched, or 0&#xD;
&#xD;
&#xD;
 Look for a tile object among objects 1 to 12 that can block&#xD;
 the player's movement.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24919</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not active, go check the next object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24921</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If X distance between Link and the object &gt;= $10, skip it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24933</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Y distance between Link and the object &gt;= $10, skip it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24936</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> First, adjust Link's position.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24948</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link is near the object. Reset movement direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127009</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check if tile objects block the player.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127017</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check whether a person blocks the player.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127020</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Grumble moblin</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127024</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Person1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127028</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Person8</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127035</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F03B_CheckSubroomOrDoorways</Label>
      <Comment> If in a doorway, then go check doorways instead of subrooms.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3654</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckPersonBlocking</Label>
      <Comment> Params:&#xD;
 [0F]: movement direction&#xD;
&#xD;
 Returns:&#xD;
 [0F]: untouched, or 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3658</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Return if Y coordinate &gt;= $8E.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3664</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If not moving up, then return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4024</Address>
      <AddressType>SaveRam</AddressType>
      <Label>BoundByRoom</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 [0F]: direction&#xD;
&#xD;
 Returns:&#xD;
 A: original direction, or 0 if boundary was crossed&#xD;
 Y: direction of boundary that was crossed&#xD;
 Z: 1 if boundary was crossed&#xD;
 [0F]: original direction, or 0 if boundary was crossed&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4022</Address>
      <AddressType>SaveRam</AddressType>
      <Label>BoundByRoomWithA</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 A: original direction, or 0 if boundary was crossed&#xD;
 Y: direction of boundary that was crossed&#xD;
 Z: 1 if boundary was crossed&#xD;
 [0F]: original direction, or 0 if boundary was crossed&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127102</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F07E_CheckTiles</Label>
      <Comment> This code applies to all objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127078</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F066_CheckDoorways</Label>
      <Comment> If object is Link, and level is in UW, and mode &lt;&gt; 9,&#xD;
 then check doorways.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127100</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore Link's object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86396</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckDoorway</Label>
      <Comment> Params:&#xD;
 [0F]: moving direction&#xD;
&#xD;
 Returns:&#xD;
 [0E]: reverse index of doorway direction found, or $FF if blocked&#xD;
 [0F]: untouched, or changed from 0 to a moving direction&#xD;
&#xD;
 When not at or in a doorway, this function leaves&#xD;
 [0F] moving direction as is.&#xD;
&#xD;
 When blocked by a door, [0E] will be set to $FF. But [0F]&#xD;
 will be left as is, assuming that it had been reset before this&#xD;
 routine by BoundByRoom.&#xD;
&#xD;
 Otherwise, [0F] will be changed from 0 to the door's direction.&#xD;
&#xD;
&#xD;
 If already in a doorway, go handle it separately.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86400</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15180_SearchOverflowBounds</Label>
      <Comment> Not in a doorway. Look for a doorway that Link might be in.&#xD;
&#xD;
 To match a doorway:&#xD;
 1. Link's [00] coordinate has to match the doorway's&#xD;
    (X=$78 for verticals, Y=$8D for horizontals)&#xD;
 2. Link's [01] coordinate has to &gt;=  min bound, and &lt; max bound&#xD;
&#xD;
 The "overflow" bounds are used that consider 1 pixel outside&#xD;
 a doorway to be part of it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86543</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetPlayerCoordsForDirection</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
&#xD;
 Returns:&#xD;
 [00]: coordinate on perpendicular axis&#xD;
 [01]: coordinate on direction's axis&#xD;
&#xD;
 [00]: Y if facing left or right, else X&#xD;
 [01]: X if facing left or right, else Y&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86434</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L151A2_InDoorway</Label>
      <Comment> In a doorway. DoorwayDir is in A.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86439</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get reverse index of doorway direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126969</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use this to take only one input direction, in case there are 2 (diagonal).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86460</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L151BC_SearchUnderflowDoorway</Label>
      <Comment> The player might be in the original doorway facing backwards,&#xD;
 outside it, or in the other doorway along the axis.&#xD;
&#xD;
 Look for a doorway that Link might be in.&#xD;
 The difference between this search and the one above&#xD;
 is that we check the "underflow" bounds that are shorter than&#xD;
 the full doorway length.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86486</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L151D6_TestDoorwayDoor</Label>
      <Comment>&#xD;
&#xD;
 [0E] holds reverse index of doorway direction found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86380</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorwayBoundsMinOver</Label>
      <Comment> Player coordinate must be &gt;= these bounds.&#xD;
 Using these bounds; the player will be considered within the&#xD;
 bounds of a doorway, if strictly inside or 1 pixel outside.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86384</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorwayBoundsMaxOver</Label>
      <Comment> Player coordinate must be &lt; these bounds.&#xD;
 Using these bounds; the player will be considered within the&#xD;
 bounds of a doorway, if strictly inside or 1 pixel outside.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86442</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] is Link's X, if facing horizontally; else Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86444</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player is within the bounds of the doorway for DoorwayDir&#xD;
 (for example the left door way, if DoorwayDir = left;&#xD;
 instead of right doorway while DoorwayDir = left),&#xD;
 and player is facing in DoorwayDir, then go repeat the&#xD;
 original search used to enter the doorway.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86407</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15187_LoopOverflowBounds</Label>
      <Comment> [00] is Link's Y, if facing horizontally; else X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86414</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] is Link's X, if facing horizontally; else Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86469</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] is Link's X, if facing horizontally; else Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86462</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L151BE_LoopUnderflowDoorway</Label>
      <Comment> [00] is Link's Y, if facing horizontally; else X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86484</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Not in a doorway. Go set DoorwayDir to 0, and leave [0F] alone.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86376</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorwayRequiredCoord</Label>
      <Comment> To be considered within a doorway, one condition is that&#xD;
 Link's perpendicular coordinate ([00]) has to match the doorway's&#xD;
 (X=$78 for verticals, Y=$8D for horizontals).&#xD;
&#xD;
 See GetPlayerCoordsForDirection.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86429</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1519D_NotInDoorway</Label>
      <Comment> Not in any doorway. Reset DoorwayDir.&#xD;
 Leave [0F] moving direction as is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86424</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If found a doorway, go see what it does when you touch it.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86388</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorwayBoundsMinUnder</Label>
      <Comment> Player coordinate must be &gt;= these bounds.&#xD;
 Using these bounds; the player will be considered within the&#xD;
 bounds of a doorway, if strictly inside except for 1 or 2 pixels&#xD;
 at the edge.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86392</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorwayBoundsMaxUnder</Label>
      <Comment> Player coordinate must be &lt; these bounds.&#xD;
 Using these bounds; the player will be considered within the&#xD;
 bounds of a doorway, if strictly inside except for 1 or 2 pixels&#xD;
 at the edge.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86488</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store input direction in [02] and [0C].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86497</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If input direction is not the doorway direction found, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86502</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Touch the door in the direction we found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86560</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TouchDoor</Label>
      <Comment> Params:&#xD;
 [0C]: door direction&#xD;
 [0E]: reverse index of direction&#xD;
&#xD;
 Returns:&#xD;
 [0E]: untouched, or $FF if blocked&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86585</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TouchDoorOpen</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86581</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TouchDoorWall</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86586</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TouchDoorFalse</Label>
      <Comment> At first, Link's timer = 0. So set it to $18 frames, and block movement.&#xD;
 Subsequently, block movement until timer = 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86602</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TouchDoorBombable</Label>
      <Comment> Block movement, if this door's direction is not in the open door mask.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86635</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TouchDoorKey</Label>
      <Comment> If this door was already opened, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86609</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TouchDoorShutter</Label>
      <Comment> If a door is triggered or this door wasn't already opened,&#xD;
 then block movement.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86514</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set variables to doorway direction found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86510</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If blocked, then return and leave DoorwayDir as it was.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86519</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] movement direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86523</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Movement was not blocked at a doorway.&#xD;
 If we're at a false wall or bombable, then go pass thru it&#xD;
 and leave the room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86505</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0D] holds the door attribute.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127362</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GoToNextModeFromPlay</Label>
      <Comment> Returns:&#xD;
 X: 0 (Link's object slot)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127218</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F0F2_CheckGridOffset</Label>
      <Comment> If grid offset &lt;&gt; 0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127223</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Grid offset = 0.&#xD;
 The object is at a point between cells in the grid.&#xD;
 So, we can check tiles for collision.&#xD;
&#xD;
 Reset [0E] alternate direction search step.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127225</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's a movement direction, go check tile collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Unknown object attribute</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127229</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Moving direction = 0.&#xD;
 If object is the player, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127233</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Moving direction = 0.&#xD;
 The object is not the player.&#xD;
&#xD;
 If object does not have attribute $10, then&#xD;
 set movement direction to input direction,&#xD;
 and go try to turn to an unblocked direction in order to move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127440</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ReverseObjDir</Label>
      <Comment> Note:&#xD;
 Also reverses movement direction in [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127248</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F110_Reverse</Label>
      <Comment> TODO:&#xD;
 This seems to be unused code triggered by object attribute $10.&#xD;
 But $10 is not used in the object attribute array at 07:FAEF.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127254</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F116_CheckTiles</Label>
      <Comment> The code below applies to Link and other objects.&#xD;
&#xD;
 Test the moving direction's walkability.&#xD;
&#xD;
 For the player, this is enough. For other objects, this &#xD;
 becomes a loop looking for an unblocked direction to move in.&#xD;
&#xD;
 If the colliding tile is walkable, go handle a walkable direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127273</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F129_TryNextDir</Label>
      <Comment> Get the next direction to check, and set moving direction to it.&#xD;
 If not at the end of the loop, go test the new direction's walkability.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127262</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The colliding tile is unwalkable.&#xD;
&#xD;
 If object is the player, then go check passive tile objects and&#xD;
 the screen edge, or stop moving.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127266</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F122_CheckObjAttr10AndAltDir</Label>
      <Comment> Not the player.&#xD;
 If object attribute has $10, go to the unused code above&#xD;
 to reverse direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127295</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F13F_StopMoving</Label>
      <Comment> Reset moving direction and buttons pressed.&#xD;
 If in UW, we're done.&#xD;
 In OW, go check the screen edge.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127384</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F198_CheckBoundary</Label>
      <Comment> If object crossed a boundary, then go check object&#xD;
 attribute $10 and another direction.&#xD;
 Else set object direction to moving direction [0F] and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127450</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Walker_AltDir_EndLoop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127407</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Walker_AltDir_GetRandomObjPerpendicularDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127427</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Walker_AltDir_GetMovingOppositeDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127329</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckScreenEdge</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127392</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Walker_GetNextAltDir</Label>
      <Comment> Description:&#xD;
 Calculates the next alternate direction to move in while&#xD;
 searching for an unblocked direction.&#xD;
&#xD;
 Params:&#xD;
 [0E]: the current step&#xD;
&#xD;
 Returns:&#xD;
 A: a direction for the current step, or 0 at the end of the loop&#xD;
 [0E]: the next step, or 0 to end the loop&#xD;
 ObjDir: might be modified&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127276</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set new moving direction, or 0 at the end of the loop.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127310</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F14E_GoWalkableDir</Label>
      <Comment> If object is not Link, then the tile is walkable. Go see if this direction&#xD;
 makes the object cross a boundary. Then go check another direction if it does,&#xD;
 or else make this the object direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127283</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F133_PlayerUnwalkable</Label>
      <Comment> Tile is not walkable. Object is player.&#xD;
&#xD;
 Check passive tile objects and the screen edge, and stop moving.&#xD;
&#xD;
 First, if in OW, check passive tile objects (armos and regular gravestone).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25123</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckPassiveTileObjects</Label>
      <Comment> Returns:&#xD;
 X: 0&#xD;
&#xD;
&#xD;
 If grid offset &lt;&gt; 0 or input direction = 0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Compare the collided tile with tiles $BC to $C3.&#xD;
 These are tiles for gravestone and armos squares.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25168</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link is facing vertically.&#xD;
&#xD;
 If Link touched the left side of the square with the right side&#xD;
 of his body, then add 8 to X.&#xD;
&#xD;
 If Link touched the right side of the square with the left side&#xD;
 of his body, then bitwise AND'ing with $F0 will align X with the square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25189</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6265_CheckHorizontal</Label>
      <Comment> Link is facing horizontally.&#xD;
&#xD;
 If Link touched the top of the square with the bottom&#xD;
 of his body, then add 8 to Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25201</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6271_FindSlot</Label>
      <Comment> Look for an empty slot to instantiate a monster in.&#xD;
 If none was found, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25154</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We'll be computing the location of the square.&#xD;
 Start with Link's location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25156</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] holds X coordinate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25160</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds Y coordinate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130747</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FindEmptyMonsterSlot</Label>
      <Comment> Look for an empty object slot for a monster from $B to 1.&#xD;
&#xD;
 Returns:&#xD;
 A: 0 if found an empty slot&#xD;
 Y: an empty slot, if found&#xD;
 Z: 0 if found an empty slot&#xD;
 [59]: an empty slot, if found&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89</Address>
      <AddressType>InternalRam</AddressType>
      <Label>EmptyMonsterSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25206</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> When dealing with objects, X usually indicates the slot number&#xD;
 of the object. Set it to the empty slot found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25208</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Offset the coordinates we calculated by a square length&#xD;
 in the direction Link is facing.&#xD;
&#xD;
 Set the new object's location to them.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25115</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LinkToSquareOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25119</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LinkToSquareOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25229</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126694</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetShoveInfoWith0</Label>
      <Comment> Params:&#xD;
 A: 0&#xD;
&#xD;
 Returns:&#xD;
 A: 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127544</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_EndMoveAndAnimateBetweenRooms</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25271</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L62B7_ChooseObjType</Label>
      <Comment> Choose the right object type for the tile.&#xD;
&#xD;
&#xD;
 Armos</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25247</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's no other object at this X, go try another.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25254</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's no other object at this Y, go try another.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25259</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's truly an object there, return without instantiating an object.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25264</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there was an initialized object at that location, return.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25266</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there was never an object there, go instantiate one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25234</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Because armos and flying ghini fade into existence over a little time,&#xD;
 see if one is already beginning to appear at that location.&#xD;
 Don't instantiate another one, if there is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1170</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjUninitialized</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25279</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flying Ghini</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25240</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Skip the empty slot we found. So go decrement index [03].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [03] holds the index of the slot to compare to the empty one.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25135</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] holds the collided tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] collided tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25277</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If tile &gt;= $C0, then instantiate an armos.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25284</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130778</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetObjMetastate</Label>
      <Comment> Reset the object metastate so that it's ready to start&#xD;
 behaving autonomously (updating on its own).&#xD;
 This is the normal state outside of the spawning cloud and&#xD;
 the death sparkle.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25287</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fade in for $3F frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25291</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L62CB_ExitX0</Label>
      <Comment> Restore player index in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130266</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitObject</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130276</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Enemies from edges</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For monsters that spawn in a cloud, set their start time to&#xD;
 the same value as the object slot; so that they all start&#xD;
 moving at different times.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130390</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FD56_FetchAttrs</Label>
      <Comment> Store the object attributes for fast access.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1215</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjAttr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129775</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ObjectTypeToAttributes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>95</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129870</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ObjectTypeToHpPairs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>38</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127331</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not moving, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127336</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the single moving direction is vertical, use Y.&#xD;
 Else use X coordinate.&#xD;
&#xD;
&#xD;
 Call this to get a single moving direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127199</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayerScreenEdgeBounds</Label>
      <Comment>Up, down, left, right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127350</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's coordinate does not match the screen edge coordinate&#xD;
 in the single moving direction, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127357</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're moving to the next screen.&#xD;
 Make sure Link faces the single moving direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127314</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The object is Link. We end up here regardless of walkability.&#xD;
&#xD;
 If not in mode 5 or ladder is in use, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130737</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DestroyMonster</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127324</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If grid offset &lt;&gt; 0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68800</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitArmosOrFlyingGhini</Label>
      <Comment> In UpdateObject, this object was flagged "initialized".&#xD;
 But if it's still fading in (timer &gt; 0), then flag it "uninitialized".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85883</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckLadder</Label>
      <Comment> Params:&#xD;
 [0F]: movement direction&#xD;
&#xD;
 Returns:&#xD;
 [0F]: movement direction or 0&#xD;
&#xD;
&#xD;
 If the ladder's not in use, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127105</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The player will check for the ladder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>100</Address>
      <AddressType>InternalRam</AddressType>
      <Label>LadderSlot</Label>
      <Comment> The object slot that holds the ladder. 0 if unused.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85887</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the ladder is done (state 0), go put away the ladder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85914</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14F9A</Label>
      <Comment> If instead it's facing horizontally, calculate the horizontal distance&#xD;
 between the ladder and Link.&#xD;
 If Link's Y no longer matches the ladder's, go put the ladder away.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85891</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the ladder is facing vertically, calculate the vertical distance&#xD;
 between the ladder and Link.&#xD;
 If Link's X no longer matches the ladder's, go put the ladder away.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85953</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14FC1_StashLadder</Label>
      <Comment> Put away the ladder. Reset ladder slot and destroy the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85928</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14FA8_CheckDistanceToLadder</Label>
      <Comment> If absolute distance &lt; $10, go handle movement on the ladder and set state 2.&#xD;
 If &gt; $10, go put the ladder away.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85931</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] holds the absolute distance between Link and the ladder in whichever axis is relevant.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85941</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Distance = $10. If player's not facing in the same direction as&#xD;
 the ladder, go put away the ladder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85947</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Distance = $10, and player's facing in the same direction.&#xD;
&#xD;
 If the ladder's still in initial state 1, then Link's facing the&#xD;
 ladder and had not stepped onto it yet.&#xD;
 Go handle movement on it, but don't change state yet.&#xD;
&#xD;
 But if ladder state is 2, then it means Link completely stepped&#xD;
 off of the ladder. So the ladder should be put away. In this&#xD;
 case, fall thru.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86033</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15011_DrawLadder</Label>
      <Comment> Draw the ladder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85961</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14FC9_SetState2</Label>
      <Comment>  Set state 2, because we're on the ladder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85965</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14FCD_HandleInput</Label>
      <Comment> If input direction = 0, go draw and reset moving direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85970</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Input direction &lt;&gt; 0. The player intends to move.&#xD;
 So, see if we need to override the moving direction.&#xD;
&#xD;
 A. If the distance &lt;&gt; 0, and they are facing the same way,&#xD;
 go draw and set moving direction to Link's direction.&#xD;
&#xD;
 This lets Link step onto the ladder. Otherwise he would have&#xD;
 been blocked by the water.&#xD;
&#xD;
 Or, Link already passed over the point right over the ladder&#xD;
 and was allowed to move onto the tiles after the ladder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85980</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14FDC</Label>
      <Comment> Distance = 0, or facing different directions.&#xD;
&#xD;
 B. If ladder's direction = Link's *moving* direction,&#xD;
 then go draw and keep moving.&#xD;
&#xD;
 This only applies when distance = 0. Otherwise, (A) would have caught it.&#xD;
&#xD;
 Before checking the ladder, a tile collision check allowed Link&#xD;
 to move onto the tiles after the ladder.&#xD;
&#xD;
 Note that if Link is not moving, then this test will fail,&#xD;
 and case (D) will catch it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85972</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] distance between Link and ladder</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85982</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] Link's moving direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85993</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> D. If opposite of ladder's direction &lt;&gt; down,&#xD;
 or input direction &lt;&gt; up,&#xD;
 then go reset moving direction, and draw.&#xD;
&#xD;
 This will catch all cases of Link facing perpendicular to&#xD;
 ladder direction. Also, it will catch Link not moving, unless&#xD;
 ladder direction is up and input direction is up (E).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86004</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> E. The ladder's direction is up and input direction is up.&#xD;
&#xD;
 An earlier call to check tile collision would have blocked&#xD;
 movement, because the tile under Link's top half is a water tile.&#xD;
 But because Link is squarely on the ladder, we really have&#xD;
 to check the tile above that one.&#xD;
&#xD;
 Set moving direction to input direction (up) and switch X to&#xD;
 the player's slot for the purpose of checking tile collision below.&#xD;
 Based on that, we'll set moving direction according to walkability.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86031</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1500F</Label>
      <Comment> Set A to reset moving direction in [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86007</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check the colliding tile as if Link was 8 pixels up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86021</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tile is walkable, go draw the ladder and leave the moving&#xD;
 direction as the input direction (in a roundabout way).&#xD;
 Else fall thru to reset moving direction and draw the ladder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86047</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetMovingDirAndSwitchToPlayerSlot</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
&#xD;
 Returns:&#xD;
 [0F]: direction&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85986</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> C. If opposite of ladder's direction = Link's facing direction,&#xD;
 then go draw and move in ladder's direction.&#xD;
&#xD;
 You can always step off the ladder where you came from.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85719</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSubroom</Label>
      <Comment> Params:&#xD;
 [0F]: movement direction&#xD;
&#xD;
 Returns:&#xD;
 [0F]: untouched, or 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127061</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If game mode = 9, or in OW, or in a doorway, then skip&#xD;
 checking room boundaries.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85788</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14F1C_InCave</Label>
      <Comment> In a cave.&#xD;
&#xD;
 Check whether a person is blocking the upper half of the room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85725</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In a cellar.&#xD;
&#xD;
 If Link's Y &gt;= $40 or input direction &lt;&gt; up, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check subrooms (caves and cellars) in modes 9, $B, $C.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85738</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for this room's ID in the 6-element cellar room array.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85749</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Determine the destination room ID, and go there.&#xD;
&#xD;
 If Link's X &lt; $80 look in level block attributes A, else B.&#xD;
&#xD;
 Note that in cellars, level block attributes A and B indicate&#xD;
 the destination room ID only.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85768</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Link's position in the destination room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129637</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set up horizontal flipping.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85848</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GoToModeAFromCellar</Label>
      <Comment> Params:&#xD;
 A: destination room ID&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127587</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Grid offset was a multiple of 8. So, we've stepped a whole tile,&#xD;
 and need to reset the subroom indicator.&#xD;
&#xD;
 That way, we know not to go into a subroom that we just came out of.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127589</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F265_CheckLadderRoom</Label>
      <Comment> If not in mode 5, go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127613</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F27D_CheckLadder</Label>
      <Comment> If in a doorway or missing the ladder, go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127595</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW and we're not in this list of 6 rooms, go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127622</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link is halted or using the ladder, go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127634</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the colliding tile in moving direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127643</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW and tile is not water (as in &lt; $8D or &gt;= $99), then&#xD;
 go check warps and animate.&#xD;
 If in UW, and tile &lt;&gt; $F4, go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127661</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F2AD_SetUpLadder</Label>
      <Comment> Look for an empty monster slot.&#xD;
 If none found, or input dir = 0, or input direction &lt;&gt; facing direction,&#xD;
 then go check warps and animate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127677</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> X register now holds the ladder's slot.&#xD;
 Set ladder slot to empty slot found.&#xD;
 Set ladder's direction to input direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127485</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LinkToLadderOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127489</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LinkToLadderOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127681</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add appropriate offset to player's position to set the ladder's position.&#xD;
&#xD;
&#xD;
 Call this for the reverse direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127700</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the ladder object's type. Reset shove params and invincibility timer.&#xD;
&#xD;
&#xD;
 Ladder</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127711</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the initial state of the ladder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95220</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckWarps</Label>
      <Comment> If just came out of a cave, dungeon, or cellar; or if grid offset &lt;&gt; 0;&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95245</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1740D_EnsureSquareX</Label>
      <Comment> In other OW rooms and in UW, make sure X is a multiple of $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95227</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW room $22 and Link's X is not a multiple of 8, then return.&#xD;
 This is a special case, because Level 6's entrance is wide.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95251</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17413_EnsureSquareY</Label>
      <Comment> If Link's Y is not at ((multiple of $10) + $D), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95259</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check tile collision standing still.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95262</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in OW, go handle the tile separately.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95343</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HandleWarpOW</Label>
      <Comment> Save the tile that Link is standing on; so that we know how&#xD;
 to go underground.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95269</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In UW.&#xD;
&#xD;
 If tile is not part of stairs square (tiles $70 to $74), return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95277</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Prepare to leave this room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1319</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CellarSourceRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95282</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Remember what room we were in.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95285</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for a room in cellar array that has the current room as&#xD;
 destination room A or B.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95304</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17448</Label>
      <Comment> Make the cellar found the current room, and the target mode 9.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95320</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the flute timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95310</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the target mode is not 9 (as in it's a cave), then silence all sound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95322</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1745A</Label>
      <Comment> Go to mode $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85857</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EndPrepareMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95345</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If (tile &lt; $70 or &gt;= $74) except for $24 and $88; then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95361</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link touched a stairs tile ($70 to $74), then&#xD;
 use $70 to represent them all.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95374</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cave index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95391</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1749F_LoadLevel</Label>
      <Comment> Load a level.&#xD;
&#xD;
 Shift right by two to get the level number.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the cave index attribute.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95376</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &lt; $40, go deal with a level.&#xD;
 $40 means cave index $10. Levels have cave indexes 1 to 9.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95380</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If attribute &lt;&gt; $50, go to mode $B for a regular cave.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95386</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Attribute = $50 meaning cave index $14 (shortcuts).&#xD;
 Go to mode $C for a shortcut cave.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95397</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Remember where we came from.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95400</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Target mode is 2 to load a level.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127723</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the last collided tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127738</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the last collided tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127501</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LadderRoomsOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85793</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If mode is not $C (shortcuts), go check the screen edge.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85797</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In a shortcut cave (mode $C).&#xD;
&#xD;
 If grid offset &lt;&gt; 0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85802</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's Y &lt;&gt; $9D, go check the screen edge.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85808</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> See if Link is on one of the 3 shortcut stairs.&#xD;
 X = $50: 1&#xD;
 X = $80: 2&#xD;
 X = $B0: 3&#xD;
&#xD;
 If he's not on any, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85878</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the player touched the edge of the screen and triggered&#xD;
 a transition to another mode, then go set up the right mode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85853</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GoToModeAFromCave</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85826</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14F42</Label>
      <Comment> Look for the current room in the cellar/shortcut room array.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85838</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the value of the shortcut chosen to whatever index&#xD;
 the current room has in the array.&#xD;
&#xD;
 This yields the index of one of the three shortcut rooms&#xD;
 after the current one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85842</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wrap around if needed. Go to that room by way of mode $A.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129634</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetUpWalkingSprites</Label>
      <Comment> Set up sprite position in the descriptors.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129627</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FA5B</Label>
      <Comment> Roll over the counter (6 frames).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85509</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to the sword slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85511</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &lt;&gt; 0, then sword or item is in use. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85515</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The first state lasts 5 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3456</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlayEffect</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3452</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlaySample</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85525</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sword sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85647</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldWeapon</Label>
      <Comment> Params:&#xD;
 A: initial state&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85649</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set q-speed $C0 (3 pixels a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4374</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlaceWeaponForPlayerStateAndAnim</Label>
      <Comment> Set player's animation counter to 1, so that it will roll over&#xD;
 as soon as possible, causing movement frame to become 0 (legs apart),&#xD;
 which is how we want to end item-use animations.&#xD;
&#xD;
 Set player's state to $10 (wielding sword/item).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4383</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlaceWeapon</Label>
      <Comment> Places the weapon $10 pixels away from the player in the&#xD;
 player's direction.&#xD;
&#xD;
 Params:&#xD;
 A: $10 for right and down&#xD;
 X: object index&#xD;
&#xD;
&#xD;
 Set the offset choices to:&#xD;
  $10 for right and down in [01]&#xD;
 -$10 for left and up in [02]&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4389</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set object's direction to the player's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4412</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ChooseOffsetForDirectionH</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
 [01]: value for right&#xD;
 [02]: value for left&#xD;
&#xD;
 Returns:&#xD;
 A: chosen value, or 0 if not horizontal&#xD;
 C: 0&#xD;
&#xD;
&#xD;
 Set default value 0 in default address 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4420</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Direction is horizontal. Increment index to 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4425</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Direction is left. Increment index to 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4418</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If vertical, go choose slot 0 (value 0).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4423</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If direction is right, go choose slot 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4429</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Clear carry in preparation for adding offset to another value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4426</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L69BA_GetValue</Label>
      <Comment> Load the offset for the calculated index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4393</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set object's X to player's X + offset for direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4400</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set object's Y to player's Y + offset for direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4402</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Shift player's direction, so that it behaves like a horizontal if it's vertical.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85657</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction is vertical, move the object right 3 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128873</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateSwordOrRod</Label>
      <Comment> If state = 0, the object is not active. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129109</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetObjState</Label>
      <Comment> Returns:&#xD;
 A: 0&#xD;
&#xD;
 If it's the room item, then deactivates it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128879</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement the state timer.&#xD;
 If it hasn't expired, go move the sword or rod.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128916</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F794_DrawSwordOrRod</Label>
      <Comment> Reset horizontal flipping in [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128920</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state = 5, return without drawing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128931</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F7A3_Add4</Label>
      <Comment> Set [00] to (state - 1) * 4:&#xD;
 the byte offset of the beginning of a set of pixel offsets.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set object's direction to player's. It might have changed&#xD;
 since the last frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128943</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add [00] and the reverse index of the direction to get&#xD;
 the byte offset of the pixel offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128951</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set object's X to player's X + offset for state and direction.&#xD;
 Copy the result to [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128841</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayerToWeaponOffsetsX</Label>
      <Comment> 4 sets of horizontal offsets, one for each state of weapon.&#xD;
 Each set contains 4 offsets in reverse direction index order:&#xD;
 up, down, left, right&#xD;
&#xD;
 These offsets are added to player X to get weapon X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128857</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayerToWeaponOffsetsY</Label>
      <Comment> 4 sets of vertical offsets, one for each state of weapon.&#xD;
 Each set contains 4 offsets in reverse direction index order:&#xD;
 up, down, left, right&#xD;
&#xD;
 These offsets are added to player Y to get weapon Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128961</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set object's Y to player's Y + offset for state and direction.&#xD;
 Copy the result to [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128971</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state = 1, use up direction.&#xD;
 Else use object direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128983</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F7D7_CalcAttrs</Label>
      <Comment> Store the weapon's frame (horizontal or vertical)&#xD;
 for the direction chosen above in [0C].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128991</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate sprite attributes.&#xD;
&#xD;
 If the weapon is the rod, calculate its sprite attributes:&#xD;
   base attribute OR 1&#xD;
 So, it uses palette row 5.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129003</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F7EB_CalcSwordAttrs</Label>
      <Comment> The weapon is the sword.&#xD;
 To calculate the sprite attributes: (item value - 1) + base attribute&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128269</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RDirectionToWeaponBaseAttribute</Label>
      <Comment> The base sprite attribute for weapon sprites, 1 for each&#xD;
 direction in reverse direction order: up, down, left, right&#xD;
&#xD;
 All of them are 0, except for the element for "down".&#xD;
 That one flips the vertical sword or rod image so that it points down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129010</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F7F2_SetAttrs</Label>
      <Comment> Set sprite attributes to the calculated value above.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128265</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RDirectionToWeaponFrame</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129013</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction is left, set [0F] to flip horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129019</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F7FB</Label>
      <Comment> If state = 1, return. Don't show the weapon.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129027</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Y to the right item slot to pass to the routine to write sprites:&#xD;
 sword or rod&#xD;
&#xD;
&#xD;
 Sword slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129033</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Rod slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129046</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State = 3. Time to instantiate a shot.&#xD;
&#xD;
 If object slot is not the rod's, go instantiate the sword shot separately.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129038</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &lt;&gt; 3, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129050</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Instantiate a magic shot (rod shot).&#xD;
 Switch to the shot slot $E.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129052</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If high bit of state is set, return. It's already active.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129059</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F823_MakeMagicShot</Label>
      <Comment> Play "magic shot" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129064</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Activate the shot object (state $80).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129073</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction is horizontal, and X &lt; $14 or &gt;= $EC, then&#xD;
 deactivate the shot object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129089</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F841_ChooseSpeed</Label>
      <Comment> If high bit of state is set, use $A0 else $C0 for the q-speed fraction.&#xD;
&#xD;
 The high bit is set for magic shot, and reset for sword shot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129102</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the shot object's grid offset the same as the player's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129158</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateFire</Label>
      <Comment> If this is not a walking fire (state $21), skip moving it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129114</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F85A_MakeSwordShot</Label>
      <Comment> Try to activate a sword shot.&#xD;
&#xD;
 Switch to shot slot $E.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129116</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &lt;&gt; 0, return. It's already activated.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129120</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If [0529] is set, go activate a sword shot regardless of hearts.&#xD;
&#xD;
 TODO: But is this used?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129125</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If full hearts &lt;&gt; (heart containers - 1), return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129154</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go finish setting up a sword shot in initial state $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129142</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If partial heart is less than half full, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129149</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F87D_SetUp</Label>
      <Comment> Sword shot sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127855</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateSwordShotOrMagicShot</Label>
      <Comment> If the shot is not active, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4135</Address>
      <AddressType>SaveRam</AddressType>
      <Label>MoveShot</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
 X: object index&#xD;
 [0E]: 0 to change grid offset, else leave it as is&#xD;
&#xD;
 Returns:&#xD;
 [0E]: $80 if blocked&#xD;
 [0F]: moving direction, or 0 if boundary was crossed&#xD;
&#xD;
&#xD;
 If a boundary was crossed, go set [0E] to $80 instead of moving.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4140</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Move the object as if grid offset were 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4153</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If [0E] is set, keep the original value in grid offset,&#xD;
 or else add the new amount to it.&#xD;
&#xD;
 TODO:&#xD;
 But I'm not clear about where [0E] was last set.&#xD;
 At least with a player's shot, [0E] was last written in&#xD;
 77E7 DrawObjectWithAnim to draw Link. It was set to&#xD;
 animation index 0. But is that always the case?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127879</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If grid offset is a multiple of 8, reset it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127889</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawSwordShotOrMagicShot</Label>
      <Comment> Prepare the sprite position.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127892</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction is horizontal, move the sprites down 3 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127907</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the sprite attributes to (base attribute OR (frame counter AND 3)).&#xD;
 This makes the shot flash by cycling all the palettes, one each frame.&#xD;
&#xD;
&#xD;
 Call this only to get reverse direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127920</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set [0C] to the correct frame for the direction: horizontal or vertical.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127925</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction is left, flip the right facing image by setting [0F] to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127931</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F3BB</Label>
      <Comment> If this a monster's shot, choose the item slot for drawing based on object type.&#xD;
   $57 (sword shot) =&gt; $22&#xD;
   other (presumably $58 or $59, magic shot) =&gt; $23&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127946</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F3CA_PlayerShot</Label>
      <Comment> But if the player shot it, the choice depends on the shot's state.&#xD;
   high bit set (magic)   =&gt; $23&#xD;
   high bit clear (sword) =&gt; $22&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127875</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If movement was blocked, go handle the situation.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127859</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If low bit is set, go handle shot spreading out.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127865</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F379</Label>
      <Comment> Move the shot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127956</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HandleShotBlocked</Label>
      <Comment> Params:&#xD;
 X: shot object index&#xD;
&#xD;
 If the object is a sword shot, go spread out the shot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127961</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This is a magic shot.&#xD;
&#xD;
 If missing the magic book, go deactivate the shot object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127966</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Try to activate a fire object. Temporarily mark the candle&#xD;
 unused, so it only has to depend on having an empty slot.&#xD;
&#xD;
 If successful, Link's state will have been changed to "using item".&#xD;
 But we don't want that in this case.&#xD;
&#xD;
 For both these reasons, save state and restore it afterward.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127988</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State $21 means that a moving fire was just made.&#xD;
&#xD;
 If it's any another value, then we didn't find an empty slot&#xD;
 to make a fire. In this case, all that's left to do is to go&#xD;
 deactivate the shot object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128029</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F41D_SpreadShot</Label>
      <Comment> MULTI: ObjDir -&gt; ObjSwordShotNegativeOffset&#xD;
&#xD;
 The shot is spreading out.&#xD;
&#xD;
 Copy base negative offset in [98][X] to [02] and [03].&#xD;
 These will be negated appropriately for each corner.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128035</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset [0F] to not flip horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128148</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> MULTI: ObjDir -&gt; ObjSwordShotNegativeOffset&#xD;
&#xD;
 Decrease the base negative offset to get farther away from&#xD;
 the center point.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128150</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> MULTI: ObjDir -&gt; ObjSwordShotNegativeOffset&#xD;
&#xD;
 Once the base negative offset reaches $E8, go deactivate the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128143</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the loop index, decrement it, and loop again if &gt;= 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop 4 times to draw each corner of the spreading sword shot.&#xD;
 The corners are: top-left, bottom-left, bottom-right, top-right&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128041</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F429_DrawShotCorner</Label>
      <Comment> Save the loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128049</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate and set sprite attributes for this corner:&#xD;
   base attribute OR (frame counter AND 3)&#xD;
&#xD;
 The base attribute defines how to flip the sprite.&#xD;
 The frame counter makes the shot flash by cycling each&#xD;
 palette row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128043</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save offset X [02] and Y offset [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127851</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwordShotSpreadBaseAttr</Label>
      <Comment> Sprite attributes that flip each corner of the spread shot&#xD;
 differently: H, H-V, V, 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128059</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the object's X (the center of the spread) and the&#xD;
 current offset in [02] to set sprite X in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128089</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the object's Y (the center of the spread) and the&#xD;
 current offset in [03] to set sprite Y in [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128066</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If sprite X &gt;= object X and sprite X &gt;= $FC, skip this corner.&#xD;
 Else calculate the distance from object X to sprite X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128117</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F475_NextCorner</Label>
      <Comment> Prepare to process the next corner.&#xD;
&#xD;
 First, restore X offset [02] and Y offset [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128085</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F455_CheckDistance</Label>
      <Comment> If distance &gt;= $20, skip this corner.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128096</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, and (sprite Y &lt; $3E or &gt;= $E8), then skip this corner.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128108</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F46C_Draw</Label>
      <Comment> Draw the corner.&#xD;
 Pass [0C] = frame 2 (spread shot), Y = $23 (sword 2).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128123</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Take turns negating X offset or Y offset for the next round.&#xD;
 - First turn:  loop index = 3, negate Y offset [03]&#xD;
 - Second turn: loop index = 2, negate X offset [02]&#xD;
 - Third turn:  loop index = 1, negate Y offset [03]&#xD;
 - Fourth turn: doesn't matter&#xD;
&#xD;
&#xD;
 Get the loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128126</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The first two loop indexes coincide with offset from address 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128128</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But for loop index 1,</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128130</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> make the offset 3 to negate the Y offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128022</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F416_SetShotSpreadingState</Label>
      <Comment> MULTI: ObjDir -&gt; ObjSwordShotNegativeOffset&#xD;
&#xD;
 Set the state to spreading out (low bit is set).&#xD;
&#xD;
 Set [98][X] to base negative offset -2. This is how far the left&#xD;
 corners will be shown relative to the center point at object X, Y.&#xD;
 The right corners will be shown 2 pixels in the opposite direction&#xD;
 of the center point.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4431</Address>
      <AddressType>SaveRam</AddressType>
      <Label>WieldCandle</Label>
      <Comment> Returns:&#xD;
 X: last object slot tested, regardless of whether it's empty&#xD;
&#xD;
 Fails if no empty slot was found, or the blue candle was already used.&#xD;
&#xD;
&#xD;
 Look in slots $10 and $11. If none are empty, return.&#xD;
 Otherwise, X will have the empty slot found.&#xD;
&#xD;
 Note that it's possible that we fail to find an empty slot,&#xD;
 but the caller might find slot X occupied by a fire made earlier.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4442</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L69CA_NotInUse</Label>
      <Comment> If we have the blue candle and it was used, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1299</Address>
      <AddressType>InternalRam</AddressType>
      <Label>UsedCandle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4454</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set the candle used.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4459</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Reset the new fire object's movement info.&#xD;
 Set quarter speed (q-speed) to $20 (half a pixel a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4472</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Activate the fire object. Initial state = $21 (moving fire).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4476</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Flame sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4481</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Each animation frame lasts 4 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4379</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlaceWeaponForPlayerState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127994</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make state $22 for a standing fire.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127996</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the shot's position and direction to the fire.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128013</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The fire lasts $4F frames.&#xD;
 Deactivate the shot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129322</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBombOrFire</Label>
      <Comment> If the object's not active, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129335</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBomb</Label>
      <Comment> This is a bomb.&#xD;
&#xD;
 If the timer has not expired, then go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129201</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F8B1_StandingFie</Label>
      <Comment> Check a standing fire.&#xD;
&#xD;
 If time has run out, deactivate the item and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129164</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move as if grid offset were 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129181</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add grid offset after the move to the original.&#xD;
 This makes it continuous, and useful as a distance traveled.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129188</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the absolute value of grid offset &lt; $10, go draw.&#xD;
 &#xD;
 Once the absolute value of grid offset = $10,&#xD;
 make the fire stand instead of move.&#xD;
 Set state $22 and last $3F frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129205</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in UW, update the candle to brighten the room if needed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129221</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F8C5_DrawAndCheckCollisions</Label>
      <Comment> Advance the animation counter, and draw.&#xD;
&#xD;
&#xD;
 4 frames in every animation cycle.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129673</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Anim_AdvanceAnimCounterAndSetObjPosForSpriteDescriptor</Label>
      <Comment> Params:&#xD;
 A: new value for animation counter, in case it rolls over&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 A: 0&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
 [0F]: 0 for no horizontal flipping&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6118</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DrawObjectWithType</Label>
      <Comment> Params:&#xD;
 A: frame&#xD;
 X: object index/cycle sprite index&#xD;
 Y: object type&#xD;
 [00]: object X&#xD;
 [01]: object Y&#xD;
 [0C]: mirrored&#xD;
 [0F]: flip horizontally&#xD;
&#xD;
 Note:&#xD;
 If the object is not mirrored, then it's horizontally flippable.&#xD;
&#xD;
 The animation index of most objects is (object type + 1),&#xD;
 to make up for the fact that Link uses two animation indexes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129241</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now check for a collision with the player.&#xD;
&#xD;
 First, if the player is invincible, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129293</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetWideObjectMiddle</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 Y: offset from [02] and [03] to store center X and Y&#xD;
&#xD;
 Returns:&#xD;
 [02 + Y]: center X&#xD;
 [03 + Y]: center Y&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129246</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the object index in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129248</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the player's center point coordinates in [04] and [05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129255</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the fire's center point coordinates in [02] and [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129262</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the objects don't collide (&lt; $E pixels in X and Y), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7675</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DoObjectsCollide</Label>
      <Comment> Params:&#xD;
 A: collision distance threshold (objects collide if nearer in X and Y)&#xD;
 [00]: weapon object slot (unused)&#xD;
 [02]: object 1 mid X&#xD;
 [03]: object 1 mid Y&#xD;
 [04]: object 2 mid X&#xD;
 [05]: object 2 mid Y&#xD;
&#xD;
 Returns:&#xD;
 A: 1 if objects collide&#xD;
 Y: weapon object slot&#xD;
 Z: 0 if objects collide&#xD;
 [06]: 1 if objects collide&#xD;
 [0A]: horizontal distance&#xD;
 [0B]: vertical distance&#xD;
&#xD;
&#xD;
 Use the same threshold value horizontally and vertically.&#xD;
 Copy it to [0D] for horizontal threshold, and [0E] for vertical one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7679</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DoObjectsCollideWithThresholds</Label>
      <Comment> Params:&#xD;
 [00]: weapon or Link object slot (unused)&#xD;
 [02]: object 1 mid X&#xD;
 [03]: object 1 mid Y&#xD;
 [04]: object 2 mid X&#xD;
 [05]: object 2 mid Y&#xD;
 [0D]: horizontal threshold&#xD;
 [0E]: vertical threshold&#xD;
&#xD;
 Returns:&#xD;
 A: 1 if objects collide&#xD;
 Y: weapon or Link object slot (copied from [00])&#xD;
 Z: 0 if objects collide&#xD;
 [06]: 1 if objects collide&#xD;
 [0A]: horizontal distance&#xD;
 [0B]: vertical distance&#xD;
&#xD;
&#xD;
 Reset [06] to indicate no collision by default.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7685</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Store in [0A] the horizontal distance between the two objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7695</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If distance &gt;= horizontal threshold in [0D], return 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7709</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If distance &gt;= vertical threshold in [0E], return 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7699</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Store in [0B] the vertical distance between the two objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7713</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If we get here, then the objects are close enough in both axes.&#xD;
 Return 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7718</Address>
      <AddressType>SaveRam</AddressType>
      <Label>BeginShove</Label>
      <Comment> Params:&#xD;
 X: caller's object index, a monster&#xD;
    the attacker, if monster attacks Link&#xD;
    else defender, if weapon attacks monster&#xD;
 [00]: 0 if monster attacks Link (defender),&#xD;
       else weapon slot (attacker)&#xD;
 [09]: damage type,&#xD;
       only if a monster is defending&#xD;
 TODO:&#xD;
 [0B]: direction&#xD;
&#xD;
 Only monsters (and fire) call this routine.&#xD;
&#xD;
 When monsters attack Link, they set [00] to 0 for Link's slot.&#xD;
&#xD;
 On the other hand, if a weapon attacks a monster,&#xD;
 the monster sets [00] to the weapon's slot.&#xD;
&#xD;
&#xD;
 If a weapon attacks a monster, and the weapon's damage&#xD;
 type matches the monster's invincibility mask;&#xD;
 then return without shoving.&#xD;
&#xD;
 If a monster attacks Link, then damage type will be 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6991</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Link_BeHarmed</Label>
      <Comment> Params:&#xD;
 X: object index of the attacker&#xD;
 [0D]: damage points high byte&#xD;
 [0E]: damage points low byte&#xD;
&#xD;
&#xD;
 If object type is not whirlwind, then make the "hurt" sound effect.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The player and the fire collide.&#xD;
&#xD;
 Make the fire shove the player.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129282</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Harm the player $80 points.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1634</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvRing</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129232</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> A: frame 0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129234</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0C]: not mirrored</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Y: animation index $40 (but will use $41)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>211</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjShoveDistance</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86507</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Can set [0E] to $FF, if a door blocks the way.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TriggeredDoorDir</Label>
      <Comment> Set TriggeredDoorCmd [54] to animate this door opening or closing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84698</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TriggerOpenDoor</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39</Address>
      <AddressType>InternalRam</AddressType>
      <Label>DoorTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129663</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If walking frame 1, then animation frame 1 (legs together).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129710</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateLinkObjState</Label>
      <Comment> If major state = $10&#xD;
   if minor state = 0, make it 1&#xD;
   else OR state with $30&#xD;
   go set movement frame to 1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129753</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FAD9_CheckState30</Label>
      <Comment> If in state $30, then make Link idle, except for halting.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TriggeredDoorCmd</Label>
      <Comment> Used together with TriggeredDoorDir [55] to open and close a door.&#xD;
&#xD;
 To close a door, set this variable to 2.&#xD;
 During world update, it will be turned into 3, Link's timer will&#xD;
 be set to $30, and the door timer will be set to 8.&#xD;
&#xD;
 To open a door, set this variable to 6.&#xD;
 During world update, it will be turned into 7, and the&#xD;
 door timer will be set to 8.&#xD;
&#xD;
 Once the door timer expires, door tiles and state will be changed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86624</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go block movement while timer &lt;&gt; 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86641</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If a door is triggered, go block movement while Link's timer &lt;&gt; 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86645</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we don't have the magic key nor any normal keys, &#xD;
 go block movement.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86655</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we don't have the magic key, decrease the key count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86658</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15282_TriggerDoor</Label>
      <Comment> Trigger this door to open.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86663</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set player's timer to block for $20 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86670</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1528E_BlockUntilTime</Label>
      <Comment> Block movement while Link's timer &lt;&gt; 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86619</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128884</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 2 will last 8 frames. The higher ones last 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128896</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F780</Label>
      <Comment> Set both the player's animation counter and the sword's&#xD;
 animation counter/timer to this value.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128902</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the next state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128904</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once we reach state 6, deactivate the object.&#xD;
 Otherwise, go draw it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129747</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FAD3_SetMovementFrame1</Label>
      <Comment> To animate the state, the animation counter had to have&#xD;
 reached 0. Right after this routine, the counter will be&#xD;
 rolled over, and the movement frame will be switched.&#xD;
&#xD;
 So, set movement frame to 1 (legs together) at the end of&#xD;
 the animation here, in order to immediately change it to&#xD;
 0 (legs apart) after this.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85703</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldRod</Label>
      <Comment> Switch to the rod slot.&#xD;
 If it's already in use, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85709</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The first state lasts 5 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The initial state is 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85714</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The initial state is $31.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128830</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRodOrArrow</Label>
      <Comment> The rod uses states $3x. Arrow uses $1x and $2x.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1633</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvBook</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7731</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [08], [04], and [05] are used in determining the direction to push Link,&#xD;
 if he is defending. The goal is to push Link away from the monster.&#xD;
&#xD;
 If instead a monster is defending, then all this calculation&#xD;
 won't matter, because the shove direction will be set to the&#xD;
 weapon's direction.&#xD;
&#xD;
 As such, calculate a direction from the monster to the defender,&#xD;
 assuming it's Link.&#xD;
&#xD;
 Start with an assumption that the direction is vertical:&#xD;
 Store 8 (up) in [08], monster Y in [04], and other Y in [05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7744</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the defender is Link and his grid offset &lt;&gt; 0 then&#xD;
 use his usual object direction variable to determine&#xD;
 which axis to check.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7761</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> For monsters defending, or Link with grid offset = 0,&#xD;
 check direction in [0B].&#xD;
&#xD;
 For monsters defending, this won't matter. For Link with grid&#xD;
 offset = 0, I believe the result will be arbitrary.&#xD;
&#xD;
 TODO:&#xD;
 Is [0B] always set if Link's grid offset = 0?&#xD;
 It doesn't seem to be if candle fire attacks him.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7767</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L76C7_CheckHorizontal</Label>
      <Comment> If the direction checked is left or right,&#xD;
 set [08] to 2 (left), monster X in [04] and other X in [05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7780</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L76D4_CheckVertical</Label>
      <Comment> If the monster is down or right of the other object,&#xD;
 then use the opposite direction already in [08].&#xD;
 Else shift [08] right to turn it into the opposite&#xD;
 direction up or down.&#xD;
&#xD;
 Again assuming Link is the defender; after this, [08] points&#xD;
 Link away from the monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7788</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If a monster is the defender, go handle it separately.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7792</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Link is the defender.&#xD;
&#xD;
 If Link is invincible, return without shoving.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7797</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Store the shove direction we determined.&#xD;
&#xD;
 Turn on the high bit to indicate that the next time we try to&#xD;
 move by shoving, it will be the first time for this shove action.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7803</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Mark Link invincible $18 frames, and should move $20 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7812</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If Link was shoved by one of his own weapons, then&#xD;
 nothing else to do. Return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7816</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Link was shoved by a monster.&#xD;
&#xD;
 If the monster's object attribute "reverse after hit Link" is set,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7823</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the attacker is a vire, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7830</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Turn the attacker in the opposite direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7838</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L770E_MonsterDefender</Label>
      <Comment> A monster is the defender. A weapon is the attacker.&#xD;
&#xD;
 Set the shove direction to the weapon's direction,&#xD;
 instead of the direction passed in [0B].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7843</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 If the monster's attribute "reverse after hit Link" is set, then&#xD;
 combine the shove direction with $40.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7856</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the monster is invincible, then return without shoving.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7861</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the monster is not a Gohma, then go store the shove direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7889</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7741_SetShoveDir</Label>
      <Comment> Store the shove direction for the monster.&#xD;
&#xD;
 Turn on the high bit to indicate that the next time we try to&#xD;
 move by shoving, it will be the first time for this shove action.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7895</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Mark the monster invincible $10 frames, and should move $40 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1202</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjInvincibilityMask</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126653</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear the high bit, so we don't repeat this initialization.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126656</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object faces horizontally, go check which axis shove&#xD;
 direction is on.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126662</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The object faces vertically.&#xD;
&#xD;
 If the shove direction is vertical, return. We're OK to shove.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126683</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EEDB_FacingHorizontally</Label>
      <Comment> If shove direction is horizontal, return. We're OK to shove.&#xD;
 Else go check the object's grid offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126666</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EECA_CheckPerpendicularShove</Label>
      <Comment> Allow a perpendicular shove, if grid offset = 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126671</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else change the shove direction.&#xD;
&#xD;
 If the object is not Link, then reset it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126675</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Since it's Link, shove in the opposite direction that he's facing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126688</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EEE0_MoveIfNotDone</Label>
      <Comment> If shove distance hasn't gone down to 0, go move some more.&#xD;
 Else reset shove info.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126699</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShoveMoveMin</Label>
      <Comment> Try to move 4 pixels. [03] is the counter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126703</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EEEF_LoopShovePixel</Label>
      <Comment> If the object's grid offset = 0, make sure it's aligned to the grid.&#xD;
 Then, stop shoving if the object hits a tile.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126725</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF05_CheckBoundary</Label>
      <Comment> Regardless of the grid offset, if the object runs into the&#xD;
 bounds of the room, then stop shoving.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126734</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there is a grumble moblin or person in the room (regardless&#xD;
 of which object is being shoved), then see if it's blocked by&#xD;
 the person. Stop shoving if it is blocked.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126756</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF24_ChooseSpeed</Label>
      <Comment> If the direction is right or down, store 1 in [02], else -1.&#xD;
 This is the amount to change the relevant coordinate by.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126768</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're OK to change the position. So, decrease the distance&#xD;
 that's left to move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126770</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change the grid offset by the amount in [02] (1, -1).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126779</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If grid offset is a multiple of $10, or the object is Link and grid offset&#xD;
 is a multiple of 8, then reset grid offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126794</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF4A_ApplySpeed</Label>
      <Comment> If the direction is horizontal, add the amount in [02] to X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126810</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF5A_AddToY</Label>
      <Comment> Else add the amount to Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126817</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF61_NextShovePixel</Label>
      <Comment> Loop again if [03] is not going down to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7003</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> For every level of ring (1 or 2), divide the 16-bit damage amount in [0E:0D] by 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1575</Address>
      <AddressType>InternalRam</AddressType>
      <Label>WorldKillCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>80</Address>
      <AddressType>InternalRam</AddressType>
      <Label>HelpDropCount</Label>
      <Comment> When [50] HelpDropCount &gt;= $A, specific items are dropped.&#xD;
 See [51] HelpDropValue.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81</Address>
      <AddressType>InternalRam</AddressType>
      <Label>HelpDropValue</Label>
      <Comment> Determines which item to drop when [50] HelpDropCount &gt;= $A.&#xD;
 0:     5 rupees&#xD;
 other: bomb&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7015</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L73D7_ResetHelp</Label>
      <Comment> Reset values used in special item drops.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7024</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If heart partial &gt;= low damage points byte, then simply&#xD;
 subtract the damage byte from heart partial.&#xD;
 Else go borrow from full hearts.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7037</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If full hearts &gt;= high damage points byte, then simply&#xD;
 subtract the damage byte from full hearts.&#xD;
 Else go handle Link dying.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7081</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7419_HandleDied</Label>
      <Comment> Link died.&#xD;
&#xD;
 Set full hearts, partial heart, and Link's object state to 0.&#xD;
 Make Link face down.&#xD;
 Go to mode $11.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7056</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7400_BorrowHeart</Label>
      <Comment> This isn't a simple case of borrowing. For example, supposing:&#xD;
   full heart=4 partial heart=$70&#xD;
 The straightforward way to subtract $80 would yield $3F0.&#xD;
 But the method here yields $3EF, because partial heart is&#xD;
 considered full when = $FF instead of $100.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7069</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If we can't borrow from full hearts, then Link died.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85618</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldArrow</Label>
      <Comment> If there's no bow, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85623</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to the arrow slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85625</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &lt;&gt; 0 and high bit is clear, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85632</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14E80</Label>
      <Comment> If there are no rupees, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85637</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Boomerang/arrow sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85642</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Post a rupee to subtract.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85645</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Arrows start in state $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126110</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EC9E_UpdateWeapons</Label>
      <Comment> Update weapons and items.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128438</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5B6_CheckState20</Label>
      <Comment> If major state &lt;&gt; $20, go check other states.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128300</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F52C_State10</Label>
      <Comment> State $1x. Fly away from the thrower.&#xD;
&#xD;
 Reset [0E], which will indicate:&#xD;
 - into MoveShot:   0 update grid offset, else don't&#xD;
 - out of MoveShot: $80 if blocked&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128442</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State $2x. Spark.&#xD;
&#xD;
 Change the state to $28, and decrement animation counter.&#xD;
 If it hasn't reached 0, then go draw and check for collision&#xD;
 (with Link, if this is a monster's boomerang).&#xD;
&#xD;
 TODO: Why state $28?&#xD;
 I thought that it was set to $28, so that the animation frame cycle will&#xD;
 start over again when spinning.&#xD;
 But when animation counter reaches 0, state will be set to $40.&#xD;
 If the counter hasn't reached 0, then I don't *think* that&#xD;
 any drawing code depends on the minor state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128533</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State $3x. Slow down.&#xD;
&#xD;
 Reset grid offset for movement.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128529</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F611_CheckState30</Label>
      <Comment> If major state &lt;&gt; $30, go check other states.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128577</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F641_CheckOtherStates</Label>
      <Comment> State $40 or $50. Return to thrower: $40 slow, $50 fast.&#xD;
&#xD;
 The boomerang will now return. Reset the grid offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128285</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset [00], which will hold the number of axes where the distance &lt;= 8&#xD;
 when calculating the angle to return to thrower.&#xD;
 See states $40 and $50 and GetDirectionsAndDistancesToTarget.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128289</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not in major state $10, go check other states.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128160</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBoomerangOrFood</Label>
      <Comment> If state = 0, then not active. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126140</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not time to change the chase target, then&#xD;
 skip this and go update objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128304</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object's direction has a horizontal component, then&#xD;
 move it horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128315</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F53B</Label>
      <Comment> If the object was blocked, go handle it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128329</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F549</Label>
      <Comment> If the object was blocked, go handle it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128320</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object's direction has a vertical component, then&#xD;
 move it vertically.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128334</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object is an arrow (Link's or a monster's), go set up sprite parameters.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128349</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For boomerangs, get the absolute value of the weapon's grid offset:&#xD;
 the distance traveled.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128379</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawArrow</Label>
      <Comment> This is an arrow. Set up sprite parameters.&#xD;
&#xD;
 If facing left, set horizontal flipping in [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128394</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the weapon's frame (up or right) in [0C].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128399</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the base sprite attribute in [04].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128404</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is a monster's arrow, add 2 to sprite attributes in [04].&#xD;
 This chooses palette row 6.&#xD;
&#xD;
 Otherwise, add the arrow item value less 1. This chooses&#xD;
 palette row 4 if the arrow is wooden, otherwise 5 for silver.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128431</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the attribute to [05], and go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1625</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvArrow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128391</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F587</Label>
      <Comment> Get the reverse direction index that the weapon is facing.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128359</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F567_CompareLimit</Label>
      <Comment> For boomerangs, compare it to the movement limit.&#xD;
 If it reached the limit, set state $20 and a new movement&#xD;
 limit of $10, and go handle the rest as if blocked.&#xD;
 State $20 will become $30 below in HandleArrowOrBoomerangBlocked.&#xD;
&#xD;
 Otherwise, only animate and check collision as usual.&#xD;
&#xD;
 In major state $30, ObjMovingLimit is a timer to change the state to $40.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128313</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If MoveShot were called again, then don't update grid offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128788</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F714_OffsetAndDrawArrow</Label>
      <Comment> Params:&#xD;
 Y: reverse direction index that the weapon is facing&#xD;
&#xD;
&#xD;
 [00] and [01] will hold sprite X and Y.&#xD;
 Begin with the horizontal and vertical offsets.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128273</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RDirectionToOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128277</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RDirectionToOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128798</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Arrow item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128800</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_DrawArrowOrBoomerang</Label>
      <Comment> Add the weapon's true coordinates to offsets in [00] and [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128814</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state = $2x (spark), use palette row 5 to write sprites.&#xD;
 Otherwise, use the sprite attributes we already calculated.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128481</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HandleArrowOrBoomerangBlocked</Label>
      <Comment> Use animation counter to count down 3 screen frames in case the state is $20 (spark).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128486</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add $10 to the state to make it $2x.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128493</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5ED_DrawArrowOrBoomerangAndCheckCollisions</Label>
      <Comment> If the weapon is a boomerang (not a monster arrow nor player arrow),&#xD;
 then go draw it and check for a collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128511</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5FF_PrepareArrow</Label>
      <Comment> Start preparing to draw an arrow.&#xD;
&#xD;
 Set arrow slot frame 2 (spark) in [0C],&#xD;
 and no horizontal flipping in [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128519</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get reverse index of weapon's direction, and base sprite attribute 0,&#xD;
 and go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128451</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Animation counter = 0.&#xD;
&#xD;
 Set state to $40. It will become $50 below in&#xD;
 HandleArrowOrBoomerangBlocked.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128455</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is an arrow (monster's or player's), then deactivate it.&#xD;
 Else go handle the boomerang being blocked.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128473</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's a monster's arrow, then destroy it in the monster slot,&#xD;
 including clearing object type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>844</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ActiveMonsterShots</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130739</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetTypeAndClearObject</Label>
      <Comment> Params:&#xD;
 A: object type&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4517</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DestroyObject_WRAM</Label>
      <Comment> Params:&#xD;
 A: 0&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66374</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DestroyCountedMonsterShot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85560</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldBoomerang</Label>
      <Comment> If missing wooden boomerang and magic boomerang, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85568</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to the boomerang slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85570</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state in object slot &lt;&gt; 0 and high bit is clear, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85577</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14E49</Label>
      <Comment> Set state to $10 for boomerang.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85581</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the farthest distance the boomerang can fly based on&#xD;
 the type of boomerang.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>896</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjMovingLimit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85530</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BoomerangLimits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85590</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set up the boomerang.&#xD;
 QSpeed = $C0 (3 pixels a frame)&#xD;
&#xD;
 TODO:&#xD;
 Each turning animation frame lasts 3 screen frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85608</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's an input direction, then use it as the weapon's direction.&#xD;
 It might be diagonal, with horizontal and vertical components.&#xD;
 Else use Link's facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85603</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> See PlaceWeaponForPlayerStateAndAnim for the reason&#xD;
 that Link's animation counter is set to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128164</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the high bit of state is clear, then go update the boomerang.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128167</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The object is food.&#xD;
&#xD;
 Once the timer has expired, increment the state and set timer to $FF.&#xD;
 If we reach state $83, then go deactivate the object.&#xD;
&#xD;
 Nothing changes between the states. So, they are used as&#xD;
 a way to extend the timer. $2FD screen frames in total.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128696</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateBoomerangAndCheckCollision</Label>
      <Comment> Decrement animation counter; and when it reaches 0:&#xD;
 1. arm it again for 2 frames&#xD;
 2. advance the minor state within a cycle of 8&#xD;
 3. see if it's time to play the sound effect, if the boomerang belongs to Link&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3600</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlayBoomerangSfx</Label>
      <Comment> Params:&#xD;
 Y: 2&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128723</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawBoomerangAndCheckCollision</Label>
      <Comment> If the boomerang belongs to a monster, then check for&#xD;
 collision with Link.&#xD;
&#xD;
 If they collide, then set state $20 and animation counter 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128744</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F6E8_CalcBoomerangFrame</Label>
      <Comment> The minor state (low 3 bits of state) is used to&#xD;
 set the right frame in [0C] for this point in the spinning cycle.&#xD;
&#xD;
 Reset [00] and [01]. These are the offsets for boomerang's position.&#xD;
 In other words, don't offset the coordinate below.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128718</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Boomerang effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128229</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BoomerangFrameCycle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128762</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the base sprite attribute for this point in the cycle in [04].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128238</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BoomerangBaseSpriteAttrCycle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128768</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
 If base sprite attribute in [04] = 8, then leave [04] as it is.&#xD;
 Else add the item value of the magic boomerang.&#xD;
&#xD;
 But none of the values in the base sprite attributes array is 8.&#xD;
&#xD;
 As far I can tell, the magic boomerang's item value (0 or 1) in&#xD;
 the inventory will always be added to the base sprite attribute.&#xD;
&#xD;
 So, palette row 4 or 5 will be chosen.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128783</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Boomerang item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4170</Address>
      <AddressType>SaveRam</AddressType>
      <Label>GetDirectionsAndDistancesToTarget</Label>
      <Comment> Params:&#xD;
 A: object index of target&#xD;
 X: object index of origin&#xD;
 [00]: 0&#xD;
&#xD;
 Returns:&#xD;
 [00]: the number of axes where the distance &lt;= 8&#xD;
 [03]: distance X&#xD;
 [04]: distance Y&#xD;
 [0A]: vertical direction from origin to target&#xD;
 [0B]: horizontal direction from origin to target&#xD;
&#xD;
&#xD;
 Handle the horizontal.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4291</Address>
      <AddressType>SaveRam</AddressType>
      <Label>GetOneDirectionAndDistanceToTarget</Label>
      <Comment> Params:&#xD;
 A: target coordinate&#xD;
 Y: origin coordinate&#xD;
 [00]: a value&#xD;
 [0A]: the decreasing direction on the coordinates' axis (2 or 8)&#xD;
&#xD;
 Returns:&#xD;
 A: the distance from origin to target&#xD;
 [00]: the original value + 1, if &lt; 8 pixels between origin and target&#xD;
 [0A]: the direction from origin to target&#xD;
&#xD;
&#xD;
 If the origin coordinate already &gt;= target coordinate, then&#xD;
 the direction in [0A] is already correct. Otherwise, shift it right&#xD;
 to flip it.&#xD;
&#xD;
 After this, [02] will &gt;= [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4305</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6941_Subtract</Label>
      <Comment> If the difference between the coordinates &lt; 9, increment [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128582</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the horizontal and vertical directions and distances to the thrower.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128592</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the boomerang hasn't reached the thrower ([00] &lt; 2),&#xD;
 then go move towards the thrower, draw, and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128598</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The boomerang has reached the thrower.&#xD;
&#xD;
 Reset the distance to move.&#xD;
 If this is a monster's boomerang, go handle the monster catching it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128607</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link has caught the boomerang.&#xD;
&#xD;
 Combine Link's state with $20 for having caught the boomerang.&#xD;
&#xD;
 If Link catches it some time after throwing it,&#xD;
 his state will become $20, and he will show the catch animation.&#xD;
&#xD;
 But if he catches it right after throwing it, the state becomes&#xD;
 $30 ($10 OR $20), which is the end state of using an item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128613</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make to set Link's animation counter to 1, so that he picks&#xD;
 up the new state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128618</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Deactivate the boomerang.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128657</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F691_MoveTowardThrower</Label>
      <Comment> Move towards the thrower.&#xD;
&#xD;
 Middle speed index 4 goes equally fast in X and Y axes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4207</Address>
      <AddressType>SaveRam</AddressType>
      <Label>_CalcDiagonalSpeedIndex</Label>
      <Comment> Params:&#xD;
 Y: middle speed index (4)&#xD;
 [03]: horizontal distance&#xD;
 [04]: vertical distance&#xD;
 [0A]: vertical direction&#xD;
 [0B]: horizontal direction&#xD;
&#xD;
 Returns:&#xD;
 Y: speed index (0 to 8) for the angle&#xD;
&#xD;
&#xD;
 TODO: call it speed index or angle?&#xD;
 Store the middle speed index in [00]. It will be changed to the&#xD;
 right speed index to use incrementally.&#xD;
 Lower speed indexes yield faster X speeds and lower Y speeds.&#xD;
 Higher speed indexes yield faster Y speeds and lower X speeds.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4231</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L68F7_Swap</Label>
      <Comment> TODO: call it speed index or angle?&#xD;
 If the difference in distances is within 8 pixels,&#xD;
 return the speed index (angle) we have.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4213</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 If horizontal distance [03] &lt; vertical distance [04], swap [03] and [04],&#xD;
 and store positive speed index 1 in [01] to go towards the Y axis.&#xD;
&#xD;
 The point is to put the greater value in [03] and the lesser one in [04],&#xD;
 and use a speed index offset (1 or -1) that will point us in the direction&#xD;
 of the farther distance faster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128679</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move horizontally towards the thrower.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128662</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move vertically towards the thrower.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128247</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BoomerangQSpeedFracsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128256</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BoomerangQSpeedFracsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4267</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SetBoomerangSpeed</Label>
      <Comment> Params:&#xD;
 A: q-speed fraction&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128668</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0A] vertical direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128687</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0B] horizontal direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128674</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save speed index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128680</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore speed index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4209</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Assuming horizontal distance &gt;= vertical distance, the&#xD;
 index offset in [01] is negative (-1) to go towards the X axis.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4240</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6900_Turn</Label>
      <Comment> TODO: call it speed index or angle?&#xD;
 Otherwise, go to the next speed index (angle).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4247</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> TODO: call it speed index or angle?&#xD;
 If a speed index (angle) limit (0 or 8), we've gone all the way to an axis&#xD;
 (0, 90, 180, 270 degrees). So return this speed index (angle).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4253</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Subtract the lesser distance from the greater distance.&#xD;
 If they still haven't crossed, then we can turn more.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4264</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6918_Return</Label>
      <Comment> TODO: call it speed index or angle?&#xD;
 Return the speed index (angle) we found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4270</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If in major state $50, use this speed as is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4278</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Else, in major state $40, go at half the speed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4281</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Once we've traveled the target amount of time, set state $50 to go faster.&#xD;
 In major state $40, ObjMovingLimit is a timer to change the state to $50.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128586</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Monster thrower object index&#xD;
 DASM.EXPR: ObjRefId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4190</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Handle the vertical.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128626</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F672_CatchBoomerang</Label>
      <Comment> A monster caught the boomerang that it threw.&#xD;
&#xD;
 Set a timer for the thrower based on a random value:&#xD;
 &lt; $30: $30&#xD;
 &lt; $70: $50&#xD;
 Else:  $70&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128649</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the thrower's state to make it idle or restart its state machine.&#xD;
 Destroy the monster's boomerang.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128538</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go slow at q-speed fraction $40 (1 pixel a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128543</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing left and X &lt; 2, then go change state to $40. The&#xD;
 boomerang is too close to the left edge of the screen.&#xD;
 Another move might make it wrap around.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128565</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F635_SetState40</Label>
      <Comment> Set state $40, and a time to move of $20 frames.&#xD;
&#xD;
 In major state $40, ObjMovingLimit is a timer to change the state to $50.&#xD;
&#xD;
 Also, animate, draw, and handle any collision (with Link, if a monster's boomerang).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128557</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F62D_MoveBoomerang</Label>
      <Comment> Move the boomerang.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128560</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement timer ObjMovingLimit. Once it reaches 0, change&#xD;
 state to $40.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85671</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldFood</Label>
      <Comment> Switch to the food slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85673</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's an item already active in the slot (state &lt;&gt; 0), return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85677</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The first state of food lasts $FF frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4372</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlaceWeaponForPlayerStateAndAnimAndWeaponState</Label>
      <Comment> Params:&#xD;
 A: initial state&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85681</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set up the food in state $80.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128188</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blue moblin</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128192</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Red darknut</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128196</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Vire</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128200</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blue keese</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128204</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Red keese</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128185</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F4B9_CheckMonsterType</Label>
      <Comment> If the template object type in the room is one of:&#xD;
 moblin, goriya, octorock, vire, keese&#xD;
 then attract these monsters to the food.&#xD;
&#xD;
 They will chase the food instead of Link when given a chance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128216</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F4D8_Draw</Label>
      <Comment> Draw the food.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128221</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Food item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128219</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Red sprite palette</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85686</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldPotion</Label>
      <Comment> If there's nothing in the item slot, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85691</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're using one potion. So decrement the item value.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85694</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flag that we're filling hearts and involuntarily paused.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126833</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldFlute</Label>
      <Comment> Play the flute's tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>60</Address>
      <AddressType>InternalRam</AddressType>
      <Label>FluteTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126838</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the flute timer for $98 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1307</Address>
      <AddressType>InternalRam</AddressType>
      <Label>UsedFlute</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126919</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFC7_FlagFluteUsed</Label>
      <Comment> Flag that we used the flute.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126842</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In UW, go flag that we used the flute, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126846</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not in mode 5, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126852</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get and save the quest number.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126822</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FluteRoomSecretsOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>11</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126858</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for the current room in this list of $A that have a flute secret.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126872</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF98_Found</Label>
      <Comment> Found.&#xD;
&#xD;
 If it was the first room in the list, handle it specially.&#xD;
 This room is the only one in Q1 with a flute secret. It's also&#xD;
 the only one in the list without a flute secret in Q2.&#xD;
&#xD;
 In Q2, go summon the whirlwind. In Q1, continue to reveal&#xD;
 the secret.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126905</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFB9_FluteSecretNotFound</Label>
      <Comment> Not found.&#xD;
&#xD;
&#xD;
 Pop and throw away the quest number.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126906</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFBA_SummonWhirlwind</Label>
      <Comment> Summon the whirlwind.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126914</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the bank at the beginning of the routine.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126881</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFA1_Normal</Label>
      <Comment> For other rooms in the list:&#xD;
 In Q1, go summon the whirlwind.&#xD;
 In Q2, continue to reveal the secret.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126884</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFA4_RevealSecret</Label>
      <Comment> If the cycle of colors is complete or in progress, then return. The secret is already revealed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126889</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 Look for an empty slot from 8 to 0 (?!).&#xD;
&#xD;
 TODO:&#xD;
 Does it ever get to 0? Would it work? Would an object in that&#xD;
 slot be updated?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126899</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we find one, set up a flute secret object there.&#xD;
 It will handle the rest.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24744</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SummonWhirlwind</Label>
      <Comment> If not in mode 5, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24750</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the teleporting index, and store the mask for its level in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24821</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AdvanceTeleportingLevelIndex</Label>
      <Comment> If Link is facing an increasing direction (right or down), then&#xD;
 increase the index. Otherwise, decrease it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24756</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Truncate to wrap the index around.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24764</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L60BC_LoopTriforcePiece</Label>
      <Comment> If there are no triforce pieces, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24769</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have gotten this triforce piece, then go try to make a&#xD;
 whirlwind.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24759</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Note that this is from element 1 instead of 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1288</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SummonedWhirlwind</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24800</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L60E0_MakeWhirlwind</Label>
      <Comment> If already summoned or in the middle of teleporting, then&#xD;
 return and don't summon another one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24808</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return if we can't find an empty monster slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24813</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> An empty slot was found. Flag that summoned the whirlwind.&#xD;
 Switch to the empty slot, and go set up a whirlwind object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24578</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetUpWhirlwind</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
&#xD;
 Set the whirlwind's Y to Link's, X to 0, and type $2E.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24773</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We have not gotten this piece.&#xD;
 First, advance the teleporting index again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24776</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction Link is facing is an increasing one, then&#xD;
 rotate the level mask in [00] left to correspond to the higher&#xD;
 level number. Then go test this new mask.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24791</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L60D7_DecreasingDir</Label>
      <Comment> If instead the direction is a decreasing one, then&#xD;
 rotate right to correspond to the lower level number.&#xD;
 Then go test this new mask.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ChaseOtherTarget</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130196</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoNothing</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24600</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateWhirlwind_Full</Label>
      <Comment> Get Link's halted state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24605</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 2 to whirlwind X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24837</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawWhirlwind</Label>
      <Comment> Frames last 1 screen frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24612</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link is not halted or teleporting state = 0, then&#xD;
 go check for collision with Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24621</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else Link is halted (state $40) and teleporting state &lt;&gt; 0.&#xD;
&#xD;
 Set Link's X to whirlwind's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24649</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6049_CheckCollision</Label>
      <Comment> Link is not halted or teleporting state = 0.&#xD;
 Try to pick up Link.&#xD;
&#xD;
 If the whirlwind does not collide with Link, then go check&#xD;
 for the screen's right edge.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24693</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6075_CheckRightEdge</Label>
      <Comment> If whirlwind's X &lt; $F0, go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24717</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DestroyWhirlwind</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24699</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The whirlwind has reached the right edge of the screen.&#xD;
&#xD;
 Destroy the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24702</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If teleporting state &lt;&gt; 0, we picked up Link.&#xD;
 So, go to the next mode.&#xD;
&#xD;
 Either way, draw one last time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24842</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The whirlwind flashes by using a palette row based on the&#xD;
 screen frame counter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24849</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flip horizontally based on movement frame, which is&#xD;
 switched based on animation counter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24852</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Whirlwind has only 1 animation frame image.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24656</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Collided with Link.&#xD;
&#xD;
 Make Link face right. Reset shove info and subroom type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24667</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Halt Link (state $40), and hide him.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24679</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Find and set the room that will behave as the previous room&#xD;
 when scrolling right to the room with the level's entrance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24690</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set teleporting state 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24623</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If teleporting state = 1 or whirlwind's X &lt;&gt; $80, go check&#xD;
 the right screen edge and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24630</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Teleporting state = 2 and whirlwind's X = $80.&#xD;
&#xD;
 Reset Link's state, teleporting state, and whirlwind object type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24639</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Update the player position marker, and draw one last time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130769</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitFluteSecret</Label>
      <Comment> Summary:&#xD;
 The flute secret object manages the secret color cycle.&#xD;
&#xD;
 The flute secret object is initialized in the same frame that&#xD;
 the flute was wielded. But this object won't update until&#xD;
 the flute timer expires.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130811</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 7 of every 8 frames, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130819</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> So, every 8 frames:&#xD;
 1. Increment the secret color cycle count.&#xD;
 2. Change the water palette.&#xD;
&#xD;
 But when the count = $B, go reveal the stairs.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69434</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Secret found/taken</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69431</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flag the secret found in this room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69761</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlaySecretFoundTune</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130857</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FF29_RevealPondStairs</Label>
      <Comment> Set X and Y in this slot for the stairs in the pond.&#xD;
 Go reveal the stairs as a secret.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69426</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RevealAndFlagSecretStairsObj</Label>
      <Comment> Params:&#xD;
 X: object index of the tile object&#xD;
&#xD;
&#xD;
 First tile of stairs</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69344</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RevealSecretTileObj</Label>
      <Comment> Params:&#xD;
 A: the first tile of tile object&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125026</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ChangeTileObjTiles</Label>
      <Comment> Params:&#xD;
 A: first tile&#xD;
 X: object index&#xD;
 [F7]: not 0 to switch to bank 4 before returning&#xD;
&#xD;
&#xD;
 First, cue the transfer of the 4 tiles to nametable 0.&#xD;
&#xD;
 [05] holds the first tile.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125120</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125028</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125032</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [03] holds the X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125036</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] holds the Y coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5488</Address>
      <AddressType>SaveRam</AddressType>
      <Label>MapScreenPosToPpuAddr</Label>
      <Comment> Params:&#xD;
 [02]: Y&#xD;
 [03]: X&#xD;
&#xD;
 Returns:&#xD;
 [00]: high byte of PPU address&#xD;
 [01]: low byte of PPU address&#xD;
&#xD;
&#xD;
 Turn the 16-bit value 08YY into the PPU address&#xD;
 ($2000 + (YY * 4)) by multiplying it by 4.&#xD;
&#xD;
 Each row of tiles is 32 tiles (and bytes) long, and 8 pixels tall.&#xD;
 This is why the Y coordinate is multiplied by 4 (= 32 / 8).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5504</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Now divide X coordinate by 8, because each tile is 8 pixels wide.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5509</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Combine the low address of the row with the column to get&#xD;
 the final low byte of PPU address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125041</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start writing from where we left off last time.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125044</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Two transfer records will be written to the buffer and an end marker.&#xD;
&#xD;
 Each record is 5 bytes and will transfer 2 tiles arranged vertically.&#xD;
 In total, 11 bytes will be written.&#xD;
&#xD;
 First, write the high byte of PPU address in each record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125052</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the low address in the first record. In the second record,&#xD;
 write (low address + 1).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125063</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the first tile twice in each record. Patch them later.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125077</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If tile &gt;= $46 and &lt; $F3, add 2 to the tile bytes in the second record.&#xD;
 Add 1 more to the second byte in each record.&#xD;
 Here is an example result of this manipulation:&#xD;
   record 1: $70, $71&#xD;
   record 2: $72, $73&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125100</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E8AC_SetCountBytes</Label>
      <Comment> Set the count byte in each record to $82:&#xD;
 2 tiles arranged vertically&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125108</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the end marker.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125113</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Update dynamic buffer length with 10 new bytes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93124</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ChangePlayMapSquareOW</Label>
      <Comment> Save object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93143</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93188</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93126</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're dealing with squares.&#xD;
 So, align the object's X coordinate with 16 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93130</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Divide it by 4 to get the offset of the address of the column&#xD;
 in play area map.&#xD;
&#xD;
 The calculation is: address offset = (X / 8) * 2&#xD;
 8 for the width of the column; 2 for the width of the address&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the address of the column in [00:01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93146</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Align the object's Y coordinate with 16 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93150</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract $40 for the status bar; and divide by 8 for&#xD;
 the height of each row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93156</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add this row offset to the column address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93165</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If tile &lt; $27 or &gt;= $F3, we'll write a type 3 square.&#xD;
 So, we have to look up the square index corresponding&#xD;
 to primary square/tile in [05].&#xD;
&#xD;
 Look in primary square table from $E to 1. If a match is found,&#xD;
 then the X register will have the square index value.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93159</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Assume that we'll write a type 1 square with primary square&#xD;
 taken from [05]. If so, the square index doesn't matter&#xD;
 as long as &gt;= $10. See WriteSquareOW.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93183</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16BFF_Write</Label>
      <Comment> Write the square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125130</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
 If [F7] is set, switch to bank 4, and reset [F7].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125127</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change the tiles in the play area map.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4317</Address>
      <AddressType>SaveRam</AddressType>
      <Label>WieldBomb</Label>
      <Comment> If there are no bombs in inventory, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4322</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Look in slot $10. If it's empty or there's a fire&#xD;
 (state = 0, or major state &lt;&gt; $10), then&#xD;
 go activate a bomb.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4334</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Else look at slot $11.&#xD;
 If there's a bomb there (major state = $10), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4345</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6969_FoundSlot</Label>
      <Comment> We found a slot that's empty or has a fire. It could be $10 or $11.&#xD;
 If the other slot has a bomb that's not yet detonating (state &lt; $13),&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4358</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6976_Activate</Label>
      <Comment> We're using a bomb. Decrement the count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4361</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Play the "set a bomb" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4366</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Reset the object timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4370</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Start in state $11.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129326</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bomb major state = $10. Fire major state = $20.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129309</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F91D_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129339</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The timer has expired. Set another based on the minor state.&#xD;
 Advance the state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129351</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the minor state = 3, play the sound effect.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129366</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If minor state = 5, then deactivate the bomb, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129376</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Bomb_CheckState4</Label>
      <Comment> If minor state &lt;&gt; 4, go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129380</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Minor state = 4. Try to break a wall.&#xD;
&#xD;
 If in OW, go draw. Rock walls have a tile object that checks for bombs.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129454</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawBomb</Label>
      <Comment> Draw the bomb or dust cloud.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4539</Address>
      <AddressType>SaveRam</AddressType>
      <Label>UpdateBombFlashEffect</Label>
      <Comment> If state &lt;&gt; $13, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129474</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawBombOrCloudNoFlashing</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
&#xD;
&#xD;
 Set frame image = minor state - 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129481</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawCloud</Label>
      <Comment> Params:&#xD;
 A: frame image (1 to 3)&#xD;
 X: object index&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
&#xD;
&#xD;
 [0C] frame image</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129485</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] no horizontal flipping</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129487</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write sprites with blue sprite palette row and bomb item slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129492</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bomb item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4545</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The effect involves turning grayscale rendering on and off&#xD;
 in PPUMASK.&#xD;
&#xD;
 Start by setting A register to the PPU mask shifted right to&#xD;
 throw away the grayscale bit.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4548</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Then, based on the timer value, shift in a 1 or 0 in the low bit.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4550</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> At times $16 and $11, rotate carry=1 to the low bit.&#xD;
 Carry will have been set, because of the comparison (CPY).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4562</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6A42_Clear</Label>
      <Comment> At times $12 and $D, shift left to make the low bit 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4571</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6A4B_SetMask</Label>
      <Comment> Only at times $16, $11, $12, $D do we commit the mask&#xD;
 we calculated.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129460</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If minor state = 2, we drew a bomb. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129468</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, we drew one dust cloud. Go draw the others.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129471</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawBombOrCloudAt</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129509</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawOtherBombClouds</Label>
      <Comment> For each of 3 clouds, indexed by Y register:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129513</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every other screen frame, add 6 to the index to point inside&#xD;
 the second set of coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129497</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombCloudOffsetsY1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129500</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombCloudOffsetsX1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129503</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombCloudOffsetsY2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129506</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombCloudOffsetsX2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129523</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F9F3_Draw</Label>
      <Comment> Set [01] to cloud position (object Y + Y offset).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129531</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set [00] to cloud position (object X + X offset).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129539</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw the cloud at this position.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129511</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F9E7_LoopCloud</Label>
      <Comment> Save cloud index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129542</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore cloud index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129544</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop while &gt;= 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129384</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bombs don't blast walls in cellars (mode 9). Go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129390</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We're in UW. See if the bomb is near a bombable wall.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129393</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If none is found, then go draw.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129395</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the bomb's X is not within $18 pixels of the hotspot, then&#xD;
 go check the next hotspot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombableWallHotspotsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129318</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombableWallHotspotsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129408</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the bomb's Y is not within $18 pixels of the hotspot, then&#xD;
 go check the next hotspot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129421</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store in [02] the direction corresponding to the hotspot's index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129426</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it was already opened or triggered, then go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129434</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not a bombable wall, go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129446</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Trigger this bombable wall to open.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81932</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Update menu in UW.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81953</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14021</Label>
      <Comment> Update menu in OW.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82224</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MovePositionMarkers</Label>
      <Comment> Params:&#xD;
 A: vertical velocity of menu scrolling&#xD;
&#xD;
&#xD;
 [00] holds the vertical velocity of menu scrolling.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82226</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's position marker is visible, then move it by the velocity in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82239</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1413F</Label>
      <Comment> If in UW and have the compass, then move the triforce position marker.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81991</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 1 pixel</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81996</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set menu state 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81998</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> SubmenuScrollProgress begins at $2B. Each frame it will be&#xD;
 decremented. It encodes a submenu row index in bits 1 to 7,&#xD;
 and a flag in bit 0.&#xD;
&#xD;
 When the flag is 1, a full row of black tiles will be transferred&#xD;
 at the current row. Otherwise, one of various static visual&#xD;
 elements will be transferred.&#xD;
&#xD;
 For example:&#xD;
 1. In the first frame of scrolling, $2B indicates that a full row&#xD;
    of black tiles must be transferred to row $15.&#xD;
 2. In the second frame ($2A), submenu row will again be&#xD;
    $15, but something else will be transferred.&#xD;
 3. In the third frame ($29), a full row of black tiles will be&#xD;
    transferred to row $14.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107440</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuAttrs1TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107449</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuAttrs2TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107454</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlankBottomRowNT2TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94778</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Submenu_CueTransferRowUW</Label>
      <Comment> If menu scroll value is negative, then we transferred everything.&#xD;
 So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94782</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shift right. The value in A is now (menu scroll value) / 2,&#xD;
 and represents the current row of the submenu being processed.&#xD;
 The bottom bit tells us (1) whether to transfer a full row of&#xD;
 black tiles, or (0) a row of the map or other piece of the GUI.&#xD;
&#xD;
 If the bottom bit is set, go prepare the full black row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94811</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1725B_PrepFullBlackRow</Label>
      <Comment> Prepare the dynamic transfer buf with a row of blank ($24) tiles&#xD;
 to transfer to row (7 + Y).&#xD;
&#xD;
 Calculate PPU address ($28E0 + Y*$20).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94823</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> High PPU address</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94829</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Low PPU address</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94834</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Repeating 1 byte $20 times</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94839</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blank tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94844</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> End marker</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107420</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SheetMapBottomEdgeTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94796</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1724C</Label>
      <Comment> If map row = $15, go cue the transfer of the bottom edge&#xD;
 of the big map sheet.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107384</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuMapRemainderTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>36</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94867</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17293</Label>
      <Comment> Decrease the counter for the next frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82041</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14079</Label>
      <Comment> Move position markers and advance nametable scrolling;&#xD;
 so that we scroll down 3 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82053</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There's nothing else to do until we reach hardware VScroll=$41. Return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82057</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> VScroll reached $41.&#xD;
 Advance the submenu state.&#xD;
 If in OW or in a cellar, we're done. Return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94808</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17258_DecSubmenuScroll</Label>
      <Comment> Decrease the counter for the next frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95621</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write an end marker at the end of the row data.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95615</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Submenu_WriteSheetMapRowTransferRecord</Label>
      <Comment> The row is $10 tiles and bytes long.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95617</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the submenu row by dividing (current menu scrolling value) by 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95626</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We'll transfer $10 bytes.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95631</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate PPU address ($290C + X*$20).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95652</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write a map mark in the dynamic transfer buf for each room&#xD;
 in the range currently being scanned.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95754</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Call this to load the address of level block world flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95757</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save current room ID.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95794</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17632_WriteMapTile</Label>
      <Comment> Restore current room ID and dynamic buffer offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurScanRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95764</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set OpenDoorMask to $13, in case the room has not been&#xD;
 visited. $E2 will be added, yielding $F5, which is the blank&#xD;
 map mark tile.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95760</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Temporarily set current room ID to the room ID we're scanning,&#xD;
 in order to look up its information.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95773</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Visit state</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95769</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the currently scanned room's visit state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95775</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's been visited, then check each of the 4 doors,&#xD;
 and build an open door mask.&#xD;
&#xD;
 Start with direction up and direction index 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95779</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] holds door direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95799</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The map marks are arranged in the same order as all the&#xD;
 possible values of OpenDoorMask.&#xD;
&#xD;
 Add $E2 for the first map mark tile, and store it in the&#xD;
 dynamic transfer buf at the current offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95752</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Submenu_WriteScanningMapRoomMark</Label>
      <Comment> Params:&#xD;
 Y: offset from the third element in dynamic transfer buf&#xD;
    to write at (between 1 and $10)&#xD;
&#xD;
&#xD;
 Save dynamic transfer buf offset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the current scanned room index before writing any marks.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95663</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the current scanned room index and subtract $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95655</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L175A7</Label>
      <Comment> Y register is $10.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2987</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_SubmenuMapRotation</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95669</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the level info indicates that the submenu map should be&#xD;
 rotated horizontally, then loop to rotate right the number of&#xD;
 bytes indicated.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95697</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L175D1_DoneRotate</Label>
      <Comment> Exclude rooms that are not part of this level, and certain rooms&#xD;
 that should never be marked visited in the submenu map.&#xD;
&#xD;
 First calculate the map row:&#xD;
 ((current menu scrolling value) / 2) - $D&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3005</Address>
      <AddressType>SaveRam</AddressType>
      <Label>LevelInfo_SubmenuMapMask</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95607</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MapRowMasks</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95706</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L175DA_MaskRooms</Label>
      <Comment> For each element ($10) in the row, starting from $F:&#xD;
 If the current row is set in the submenu map mask,&#xD;
 then replace the tile with $F5, a blank map tile.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SubmenuScrollProgress</Label>
      <Comment> SubmenuScrollProgress begins at $2B. Each frame it will be&#xD;
 decremented. It encodes a submenu row index in bits 1 to 7,&#xD;
 and a flag in bit 0.&#xD;
&#xD;
 When the flag is 1, a full row of black tiles will be transferred&#xD;
 at the current row. Otherwise, one of various static visual&#xD;
 elements will be transferred.&#xD;
&#xD;
 For example:&#xD;
 1. In the first frame of scrolling, $2B indicates that a full row&#xD;
    of black tiles must be transferred to row $15.&#xD;
 2. In the second frame ($2A), submenu row will again be&#xD;
    $15, but something else will be transferred.&#xD;
 3. In the third frame ($29), a full row of black tiles will be&#xD;
    transferred to row $14.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94786</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Submenu rows $D to $15 are parts of the map.&#xD;
 Submenu rows 0 to $C are fixed text and boxes.&#xD;
&#xD;
 If submenu row &lt; $D, cue a transfer of the static transfer&#xD;
 buffer for this row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107360</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InventoryBoxBottomTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107344</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UseBButtonTextTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107336</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SelectedItemBoxBottomTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107319</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuBoxesSidesTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>17</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107299</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuBoxesTopsTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107286</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InventoryTextTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94805</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17255</Label>
      <Comment> Else row is between $D and $14. Prepare a map row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82069</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate the X coordinate of the submenu position marker.&#xD;
&#xD;
 First, mask off the high nibble of the room ID and multiply by&#xD;
 the width of a tile, 8. Store the result in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82111</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mask off the low nibble of room ID to get a multiple of $10.&#xD;
 Divide by 2 to get a multiple of the tile height.&#xD;
 Then add $69 to get the Y coordinate of the sprite.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82121</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write tile $3E (dot) and attributes 0 (Link palette row 4).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82078</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the submenu map's rotation &gt;= 8, it's the same as a&#xD;
 negative or left rotation by ($10 - rotation value).&#xD;
&#xD;
 Subtract the two values as shown. Multiply the result by 8,&#xD;
 the width of a tile. Then negate it. The final result is the&#xD;
 negative offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82099</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L140B3_ShortRotation</Label>
      <Comment> The submenu map's rotation &lt; 8.&#xD;
 It represents the number of tiles to move right.&#xD;
 So, multiply it by 8.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82102</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L140B6_SumMarkerX</Label>
      <Comment> Add the offset we calculated, and $62 to [00] to get&#xD;
 the position marker's X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82138</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If buttons Up and A are down on the second controller, then&#xD;
 1. reset submenu state&#xD;
 2. go to mode 8&#xD;
 3. silence sound&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82163</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L140F3</Label>
      <Comment> If Start was pressed, then hide all sprites except&#xD;
 Link and triforce position markers, and go to the next state (scroll up).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95911</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawSubmenuItems</Label>
      <Comment> Look for a magic boomerang, then a wooden boomerang.&#xD;
 If you find one, then draw it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95931</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] X</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95927</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] Y</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95934</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95923</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If you don't find either, skip drawing a boomerang.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95938</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L176C2_DrawOtherItems</Label>
      <Comment> Look at the rest of the items, starting at index 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95961</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L176D9</Label>
      <Comment> If there are none of this item, then go advance the index and loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95965</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If at the letter item slot, look at what's in the potion slot.&#xD;
 If there is a potion, then go advance the index and loop again.&#xD;
 That's because we already prepared sprites for the potion.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96021</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95974</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L176E6</Label>
      <Comment> Save the item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95976</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save item slot to Y register. Maybe this was in anticipation of calling E735?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95895</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuItemXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95980</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] X</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95977</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the X coordinate of this item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95982</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the item goes in the first selectable row (item slot &lt; 5),&#xD;
 then go set Y coordinate to $36 and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96023</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17717_NextLoopDrawItem</Label>
      <Comment> Loop until item slot = $12.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95988</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the item goes in the second selectable row (item slot &lt; 9 or = $F),&#xD;
 then go set Y coordinate to $46 and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95998</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the item goes in the unselectable row at the top (item slot &lt; $10),&#xD;
 then go set Y coordinate to $1E and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95943</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If at the compass item slot, check this level's compass.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95950</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set compass item slot $10 again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95952</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L176D0</Label>
      <Comment> If at the map item slot, check this level's map.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95959</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set map item slot $11 again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96004</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The Y coordinate of the compass is $9E; and the map's is $76.&#xD;
 The X coordinate for both is $2C.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96016</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17710_Draw</Label>
      <Comment> [01] Y</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96038</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateSubmenuSelection</Label>
      <Comment> Pseudo-item slot 0 is for boomerangs.&#xD;
 If it's not the currently selected item slot, then skip this.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96043</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for a magic boomerang, then a wooden boomerang.&#xD;
 If you find one, then use its item slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96057</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17739_DrawBreakoutItem</Label>
      <Comment> Draw the item in the box for the currently selected item,&#xD;
 if we have it.&#xD;
&#xD;
 There's also the special case for the letter. If the selected item&#xD;
 is the letter, but we have a potion, then skip this.&#xD;
&#xD;
 If the letter is selected and there's no potion, then make&#xD;
 the item value 1 in [04]. Except that, the call to 05:B81C&#xD;
 below will overwrite [04].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96086</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17756_AfterBreakoutItem</Label>
      <Comment> If the selected item slot is the letter's and we have potions,&#xD;
 then select the potion item slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96071</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Special case for letter selected and no potion.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96073</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17749</Label>
      <Comment> [04] holds the item value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96081</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] X</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96077</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] Y</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96103</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17767_DrawCursor</Label>
      <Comment> Look up the X coordinate for the selected item slot.&#xD;
 Set it for the left cursor sprite.&#xD;
 Then add 8 to set the right cursor sprite's X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96029</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuCursorXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96115</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The Y coordinate is $36 for item slots &lt; 5, else $46.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96129</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> $1E is the cursor tile.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96137</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flash the cursor.&#xD;
 Use palette rows 5 and 6 for 8 frames each.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96149</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flip the right sprite horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96154</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 If input direction = [EF] item search direction in the previous frame, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96161</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy input direction to X register.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96162</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If input direction = 0, up, or down; then we won't change&#xD;
 the change the selected item slot forward or backward.&#xD;
&#xD;
 Instead, jump to this routine to make sure an occupied slot&#xD;
 is selected, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96168</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue the "selection changed" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96173</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the selection in the input direction.&#xD;
&#xD;
&#xD;
 Save the input direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96178</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the input direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96174</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save selected item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96182</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the new item slot = old item slot, go cancel the&#xD;
 "selection changed" tune.&#xD;
&#xD;
&#xD;
 Pop selected item slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96188</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else the selection changed. The new slot should have an item.&#xD;
 If it does not, then cancel the "selection changed" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94744</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuTransferBufSelectorsUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82169</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save Link's position marker's Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82173</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save triforce's position marker's Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82180</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore triforce's position marker's Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82184</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore Link's position marker's Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82203</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If hardware vertical scroll still &lt; $F0, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82207</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once vertical scroll &gt;= $F0, switch to NT0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5386</Address>
      <AddressType>SaveRam</AddressType>
      <Label>BlankPrioritySpriteTemplates</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
 In UW, write $10 transparent sprites starting from index 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82216</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14128</Label>
      <Comment> We reached the end. So, reset hardware vertical scroll&#xD;
 and submenu state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82222</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the position markers 2 pixels down, because we&#xD;
 overshot and reached vertical scroll $F2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82258</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TriforceTransferBufOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82306</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TriforceTransferBufTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82282</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TriforceTriforceBufReplacements</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2163</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TriforceTextTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>11</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2119</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TriforceRow0TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2127</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TriforceRow1TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2137</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TriforceRow2TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2149</Address>
      <AddressType>SaveRam</AddressType>
      <Label>TriforceRow3TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82344</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset triforce tile slot. These range from 0 to $17.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82353</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L141B1_LoopTile</Label>
      <Comment> Get the offset into the submenu triforce transfer buffers of&#xD;
 the current tile slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82356</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the level test bit is not in the triforce mask, then we don't&#xD;
 have this piece. So, go loop again, and leave the tile in the&#xD;
 empty state.&#xD;
&#xD;
&#xD;
 [06] level test mask</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82363</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We have the triforce piece.&#xD;
&#xD;
 If the base/empty tile already in the transfer buf = $E5 or $E6,&#xD;
 then make it $F5. These are tiles that were half full, and now&#xD;
 need to be full.&#xD;
&#xD;
 Else replace it with the one at the current triforce tile slot&#xD;
 in the replacement list.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82385</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L141D1_NextLoopTile</Label>
      <Comment> Bottom of the inner loop.&#xD;
&#xD;
 Increment the triforce tile slot.&#xD;
 Decrement [07] and loop again, if it's not 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82390</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the outer loop.&#xD;
&#xD;
 Shift the level test bit [06] left to test the next level.&#xD;
 When it becomes 0, we're done.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82345</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Outer loop.&#xD;
 A level test bit in [06] will be used to see whether&#xD;
 we have a triforce piece.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82349</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L141AD_LoopPiece</Label>
      <Comment> Inner loop.&#xD;
 Each level bit will make 3 triforce tile slots be&#xD;
 checked and replaced.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82347</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [06] level test bit</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82351</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [07] inner loop counter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82386</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [07] inner loop counter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81985</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move position markers and hardware vertical scroll position&#xD;
 down 1 pixel.&#xD;
&#xD;
 Because we'll be above the top of NT 0, switch to NT 2 to&#xD;
 be at the bottom of NT 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82002</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In UW, this variable will be used to scan every room in order&#xD;
 to build the big sheet map in the submenu. It will range&#xD;
 from $7F to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106713</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore VRAM address high byte.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94854</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shift right. The value in A is now (menu scroll value) / 2,&#xD;
 and represents the current row of the submenu being processed.&#xD;
 The bottom bit tells us (1) whether to transfer a full row of&#xD;
 black tiles, or (0) a row of the triforce or other piece of the GUI.&#xD;
&#xD;
 If the bottom bit is set, go prepare the full black row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94858</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There's nothing to do for row $15.&#xD;
 If submenu row &lt; $15, cue a transfer of a triforce or other&#xD;
 transfer buffer for this row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94757</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuTransferBufSelectorsOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>21</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107055</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuTriforceApexTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107061</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubmenuTriforceBottomTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126174</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ECDE_LoopObject</Label>
      <Comment> Update objects from $B to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126222</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ED0E_NextObject</Label>
      <Comment> Bottom of the object update loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126144</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the chase long-timer to a random value between 0 and 7.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126150</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch the flag indicating whether Link is the target.&#xD;
 If the value is 0 (Link *is* the target), then&#xD;
 skip this and go update objects.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126158</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's X has not changed since the last frame&#xD;
 (when Link was the target), then XOR the chase target&#xD;
 coordinates (which were Link's coordinates last frame).&#xD;
&#xD;
 This ends up reflecting Link's coordinates across the room;&#xD;
 so that monsters chase away from him.&#xD;
&#xD;
 But if Link's X has changed since the last frame, then&#xD;
 leave the chase target coordinates with his old coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126232</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If full hearts = 0, then only a partial heart is left.&#xD;
 So, turn on the "heart warning".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126227</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the current object slot to what it should be when we&#xD;
 begin updating objects again next frame: $B&#xD;
 the last object slot for monsters and tile objects&#xD;
&#xD;
 Before the first frame of mode 5, the current object slot variable&#xD;
 was set to $B in 05:87B9 (InitMode_EnterRoom).&#xD;
&#xD;
 TODO:&#xD;
 Can you call this the last slot for dynamically allocated objects?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ED6A_TransferStatusBarMap</Label>
      <Comment> If there are tiles or palettes in the dynamic transfer buf, then&#xD;
 do not handle the status bar map trigger.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126247</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ED27_CheckUW</Label>
      <Comment> If in UW, check statues, doors, secrets, and the power triforce.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126287</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ED4F_CheckOW</Label>
      <Comment> In OW.&#xD;
 If game mode = 5, turn on sea sound effect if the room's&#xD;
 attributes call for it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126306</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ED62_CheckZora</Label>
      <Comment> In OW, make a zora, if applicable.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67152</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateStatues</Label>
      <Comment> If person fireballs are enabled (from the two fires), then&#xD;
 go make fireballs with pattern 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126256</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Update statues.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67124</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StatueRoomLayouts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1228</Address>
      <AddressType>InternalRam</AddressType>
      <Label>PersonFireballsEnabled</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67159</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else if the room layout has two or four statues that shoot fireballs,&#xD;
 then go shoot fireballs with the corresponding pattern in Y register:&#xD;
 - layout $23: pattern 1: 2 statues&#xD;
 - layout $24: pattern 0: 4 statues&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67173</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10665_Shoot</Label>
      <Comment> Look for an empty monster slot.&#xD;
 If none is found, return.&#xD;
&#xD;
 Later, for each fireball, we'll call a routine to make the fireball&#xD;
 object. This routine takes a shooter object, and instantiates&#xD;
 a fireball object at the shooter's location.&#xD;
&#xD;
 The object slot we set up here will behave as the shooter.&#xD;
 For each fireball index, this object slot will have its coordinates&#xD;
 changed.&#xD;
&#xD;
 Note that this means that:&#xD;
 1. The first fireball made will be its own shooter.&#xD;
    Practically, there's nothing special about this.&#xD;
 2. If there is more than one fireball made in a frame,&#xD;
    then two of them will come from the same statue.&#xD;
&#xD;
&#xD;
 Save the fireball pattern.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67180</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the fireball pattern.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67183</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we found a slot, but it &lt; 6, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67187</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the object slot in [0A].&#xD;
 Store fireball pattern in [0B].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67191</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for the number of fireballs to make (minus 1) by pattern number.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67195</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1067B_LoopFireball</Label>
      <Comment> For each fireball to make, indexed by X, (1 or 3 down to 0):&#xD;
&#xD;
 Decrement the fireball timer at this index.&#xD;
&#xD;
 DASM.EXPR: Statue_ObjFireballTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67126</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StatueFireballCounts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67203</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it was not 0, then this fireball index has to keep waiting&#xD;
 to make a fireball. Go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67206</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the random value for this fireball index &gt;= $F0, go loop again.&#xD;
 This fireball index will wait another $100 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67129</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StatueFireballStartTimes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67212</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else choose one of four start times for the fireball based on&#xD;
 the random value.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67221</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The coordinate lists are divided into sets for each pattern.&#xD;
&#xD;
 Look up the index of the base of the set for the pattern in use.&#xD;
 Add it to the fireball index in X register to get the index of&#xD;
 the coordinate we want within each coordinate list.&#xD;
&#xD;
&#xD;
 Pattern</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67136</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StatueXs</Label>
      <Comment> A list of coordinates divided into sets for each pattern.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67144</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StatueYs</Label>
      <Comment> A list of coordinates divided into sets for each pattern.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67133</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StatuePatternToBasePositionIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67229</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the fireball index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67287</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L106D7</Label>
      <Comment> Restore the fireball index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67289</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L106D9_NextLoopFireball</Label>
      <Comment> Bottom of the loop.&#xD;
 Loop while fireball index &gt;= 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67231</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get Link's coordinates into [00] and [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to the new fireball's object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67238</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the X coordinate for the fireball object.&#xD;
 Also store it in [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67245</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the Y coordinate for the fireball object.&#xD;
 Also store it in [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67252</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set mask value 3 in [04].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67278</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If [04] &lt;&gt; 0, then its value is 1 or 3, meaning that it was shifted&#xD;
 0 or 1 time, instead of 2.&#xD;
&#xD;
 This, in turn, means that the distance between Link and the&#xD;
 fireball was &gt;= $18 in at least one axis.&#xD;
&#xD;
 So, we're OK to finish making the fireball.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67256</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop to compare each of Link's coordinates to the fireball's.&#xD;
 Each time the distance &lt; $18, the mask in [04] is shifted right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66223</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShootFireball</Label>
      <Comment> Params:&#xD;
 A: object type&#xD;
 X: shooter's object index&#xD;
&#xD;
&#xD;
 [00] holds the object type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66225</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return, if there's no empty slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66230</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the shooter's object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66241</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the shooter's object index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66232</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to and save the new object's slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66239</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the new object's slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66243</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the new object's location to the shooter's.&#xD;
 Offset the new object's X right 4 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84930</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Secret trigger</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84942</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Secret trigger</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24956</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckPowerTriforceFanfare</Label>
      <Comment> If the fanfare is not active, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126281</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check triforce fanfare.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67296</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckZora</Label>
      <Comment> If the zora attribute of this room is off, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67301</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Zora attribute</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67305</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If zora is active, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67310</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for an empty monster slot. If none is found, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67315</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop $D times looking for a water tile to put a zora on.&#xD;
 Indexed by [0D].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67319</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to the new object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126311</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check zora.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67321</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L106F9_LoopTileCandidate</Label>
      <Comment> Turn the random value at this index into a $10 pixel aligned X coordinate.&#xD;
 If it = 0 or $F0, go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67336</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn the random value into a $10 pixel aligned Y coordinate.&#xD;
 If it &lt; $50 or &gt;= $E0, go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67351</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn it into a normal object Y coordinate by OR'ing it with $D.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67355</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the tile at that location.&#xD;
 If it's not a water tile, then go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67366</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flag the zora active, and set up the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Zora object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67374</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1072E_NextLoopTileCandidate</Label>
      <Comment> Bottom of the loop. Keep going until loop index [0D] = 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1300</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ZoraActive</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84653</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckShutters</Label>
      <Comment>&#xD;
&#xD;
 If the shutters have not been triggered to open, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1230</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ShutterTrigger</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84658</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop to look for an unopened shutter.&#xD;
 The loop variable is a direction bit in [0E], starting with up (8).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84662</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14AB6_LoopOpenedDoorBit</Label>
      <Comment> If the door for the direction bit is not opened, go see if it's a shutter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84668</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14ABC_NextLoopOpenedDoorBit</Label>
      <Comment> This door was opened. Shift the direction bit right.&#xD;
 Loop until direction bit = 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84674</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14AC2</Label>
      <Comment> If there were no unopened shutters, then turn off the shutter trigger.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84680</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14AC8_TriggerIfShutter</Label>
      <Comment> Pass the direction bit as an argument to get the door attribute.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84684</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Why not call it door type instead of door attribute?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84687</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not a shutter, go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84691</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's already a triggered door command, quit.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84696</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else set a command to open the door in this direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84924</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckUnderworldSecrets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91635</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDoors</Label>
      <Comment> If mode = $12, or door timer &lt;&gt; 0, or door command = 0,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84986</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckHasLivingMonsters</Label>
      <Comment> Look for monsters in slots $C to 1 that are not bubbles.&#xD;
 If one is found, return.&#xD;
&#xD;
 Else flag Link not paralyzed (to cancel the effects of a like-like),&#xD;
 and set the all-dead-in-room flag.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>845</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RoomAllDead</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84927</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's no secret in this room, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84967</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTrigger</Label>
      <Comment> Returns:&#xD;
 C: 1 if the condition for the secret was met&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85018</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTriggerAllDead</Label>
      <Comment> If there are still monsters, not counting bubbles, then return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85023</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14C1F_TriggerShutters</Label>
      <Comment> No monsters are left. Trigger shutters to open, and return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85032</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTriggerRingleader</Label>
      <Comment> If the first monster slot is empty, go kill all monsters.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85103</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTriggerLastBoss</Label>
      <Comment> If the last boss was defeated, then&#xD;
 go trigger shutters to open, and return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85068</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTriggerBlockDoor</Label>
      <Comment> If the block has not been pushed completely, then return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85075</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTriggerBlockStairs</Label>
      <Comment> If the block has not been pushed completely, then return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85110</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTriggerMoneyOrLife</Label>
      <Comment> If the money-or-life man is gone, then&#xD;
 go trigger shutters to open, and return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84934</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the secret was not triggered, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the secret is not "foes for an item", then we're done.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84948</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the room item was already activated, or the item was&#xD;
 already taken, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84957</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else activate the room item, and play the "item appears" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85037</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the first monster slot has an object other than a monster,&#xD;
 then return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85041</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14C31_KillMonsters</Label>
      <Comment> For each object slot from $C to 1:&#xD;
&#xD;
 If the slot is empty, or has something not a monster, or is&#xD;
 already dying; then go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85058</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the object's metastate to die.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85066</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1650</Address>
      <AddressType>InternalRam</AddressType>
      <Label>LastBossDefeated</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85108</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85115</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85073</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else go trigger shutters to open, and return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1231</Address>
      <AddressType>InternalRam</AddressType>
      <Label>BlockPushComplete</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85096</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Stairs tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85086</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Tile object slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85088</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Stairs in UW always go at ($D0, $60).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85080</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If BlockPushComplete = 2, then it was pushed, and we already&#xD;
 took action for the secret. So, return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85083</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else BlockPushComplete = 1. It was pushed, but this is the&#xD;
 first time checking it for a secret. Make it 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66052</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBlock0Idle</Label>
      <Comment> If there are monsters in the room, go reset the push timer and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66147</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBlock1Moving</Label>
      <Comment> Move in the block's direction, and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66185</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBlock2Done</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66141</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1025D_ResetPushTimer</Label>
      <Comment> Reset the push timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66057</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's X is aligned with the block's, then get the difference&#xD;
 between Link's (Y + 3) and the block's Y.&#xD;
 Then go test the difference.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66076</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1021C_CheckAlignedY</Label>
      <Comment> If Link's (Y + 3) is not aligned with the block's Y, then&#xD;
 go reset the push timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66085</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link's (Y + 3) is aligned with the block's Y.&#xD;
 Get the difference in X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66092</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1022C_TestDifference</Label>
      <Comment> If the difference in coordinates is negative, then Link is&#xD;
 up or left of the block.&#xD;
&#xD;
 In that case, increase Y register to index the correct opposite&#xD;
 direction below. Also, negate the difference, so we test&#xD;
 positive values.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66098</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10232</Label>
      <Comment> If the distance &gt;= $11, then go reset the push timer and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66102</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> At this point, Link is aligned with the block.&#xD;
&#xD;
 If the input direction is not the required direction based on&#xD;
 Link's placement; then go reset the push timer and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66035</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlockPushDirections</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66110</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link is truly pushing the block.&#xD;
&#xD;
 Increase the push timer.&#xD;
&#xD;
 DASM.EXPR: ObjPushTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66113</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the push timer still &lt; $10, return.&#xD;
&#xD;
 DASM.EXPR: ObjPushTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66120</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link has pushed enough.&#xD;
 Set the block's direction to Link's, set state 1,&#xD;
 and change tiles at the source to a floor tile.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66124</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch back to bank 4 when returning from the call below.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66126</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Floor tile tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66136</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Frame image 0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66131</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawBlock</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66134</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement sprite Y, to draw at the object's true Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66157</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the block has not moved $10 pixels, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66168</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10278</Label>
      <Comment> The block has moved enough.&#xD;
 Play the "secret revealed" tune.&#xD;
 Change the tiles at the destination to the block tile.&#xD;
 Set state 2, and increment BlockPushComplete.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66173</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch back to bank 4 when returning from the call below.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85101</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91623</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorVramAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91627</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorVramAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91700</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16634_LoopTransferRec</Label>
      <Comment> Copy [06] to [04] for the call to write tiles below.&#xD;
 We need to remember how many tiles need to be copied&#xD;
 in each transfer record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91704</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the transfer record header for the door.&#xD;
&#xD;
&#xD;
 VRAM address high byte of door</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91710</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> VRAM address low byte of door</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91716</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 2 for 2 tiles</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>87040</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WriteDoorFaceTileHorizontally</Label>
      <Comment> Params:&#xD;
 [02:03]: address of door tiles for direction and face&#xD;
 [04]: count of tiles remaining&#xD;
 [07]: current index (0 to 3) of the tile to copy&#xD;
       to the dynamic transfer buf&#xD;
 [09]: door direction index&#xD;
&#xD;
 Returns:&#xD;
 Z: 1 if wrote the last tile / [04] became 0&#xD;
 [04]: original value - 1&#xD;
 [07]: original value + 1&#xD;
&#xD;
 The door face tile list at [02:03] has pairs of tiles arranged&#xD;
 vertically. The point of this routine is to access them&#xD;
 horizontally in order to transfer them to a nametable.&#xD;
&#xD;
&#xD;
 For the direction index in [09], look up the base offset of the&#xD;
 set of 4 indexes in HorizontalDoorFaceIndexes that point to&#xD;
 the door face tiles at [02:03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91737</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the end marker, and update buffer length.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91746</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the command.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91748</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If (new command AND 3) = 0, go update door flags and masks,&#xD;
 and resetting the door command.&#xD;
 This ends up catching original states 3 and 7.&#xD;
&#xD;
 Else set door timer to 8 and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91619</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HorizontalDoorFaceIndexesBaseOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91722</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1664A</Label>
      <Comment> Write two tiles in a short loop indexed by [04].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91727</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> OR the low VRAM address with $20 to go down one row&#xD;
 in order to work on the second row of door tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91733</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
 Loop again to write the second transfer record for the&#xD;
 second pair of door tiles, if [05] has not reached 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91605</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HorizontalDoorFaceIndexes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>87045</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add [07] to the base offset we got above. This yields one&#xD;
 of four consecutive indexes into HorizontalDoorFaceIndexes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>87049</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> With that index, look up the index to use with the door face&#xD;
 list of tiles at [02:03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>87053</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now we can read one of four tiles inside a door face tile map,&#xD;
 and copy it to the dynamic transfer buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>87046</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Current index of a tile, abstractly (0 to 3)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>87058</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Prepare for the next call:&#xD;
 - increment dynamic transfer buf pointer&#xD;
 - increment index of tile to copy [07]&#xD;
 - decrement count of tiles remaining&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91729</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] low VRAM address</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91879</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Call this to put the address of door face tiles in [02:03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91882</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return the address of the door in the nametable in [01:00].&#xD;
 Note the order is reversed, as usual with VRAM addresses.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91892</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return the direction of the door in [09], and the dynamic&#xD;
 transfer buf length in X register.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91897</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return some hardcoded values in [05], [06], [07]. See the comments above.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84640</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetDoorFlag</Label>
      <Comment> Params:&#xD;
 X: door direction index&#xD;
&#xD;
 Returns:&#xD;
 Y: room ID&#xD;
 [00:01]: address of level block world flags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91759</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1666F</Label>
      <Comment> If the door command = 4 after incrementing it, then&#xD;
 it was 3 (close door). So:&#xD;
 1. reset this door's flag&#xD;
 2. remove it from the opened door mask&#xD;
 3. reset the door command&#xD;
 4. go lay out doors in the play area map&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91765</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [09] door direction index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91778</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_ResetDoorCmdAndLayOutDoors</Label>
      <Comment> Reset door command</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91770</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Remove the triggered door from opened door mask.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91785</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16689</Label>
      <Comment> Door command &lt;&gt; 4.&#xD;
 It must be 8, which means it was 7: open door.&#xD;
&#xD;
 If the door is a shutter (7), then go add the door to the&#xD;
 opened door mask, reset door command, and lay out doors.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91796</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else the door is not a shutter.&#xD;
&#xD;
&#xD;
 [09] door direction index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91801</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the next room's ID.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91807</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flip the door direction index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91811</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the door flag for the opposite door in the next room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91818</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L166AA</Label>
      <Comment> Add the door to the opened door mask, reset door command,&#xD;
 and lay out doors.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91631</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DoorNextRoomIdOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91776</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_SetOpenedDoorMaskAndResetCmdAndLayOutDoors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84701</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Open door command</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91677</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The command to close a key door or bombable wall does not&#xD;
 do anything.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91664</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Command 2 sets Link's timer to $30.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24961</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> When Link's timer expires, go finish up the fanfare.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24965</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> While Link's timer is counting down, every 4 frames, switch&#xD;
 between the level palette and the white palette.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24967</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Redundant check of Link's timer that won't branch.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24989</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L619D_EndFanfare</Label>
      <Comment> The fanfare is done.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24992</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the song for level 9 again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25003</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make Link idle and not halted.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25005</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flag the fanfare not active.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25050</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the dynamic transfer buf length, so we write from were we last wrote.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25053</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the palette row 7 transfer record to dynamic transfer buf (8 bytes).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25067</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Update the dynamic transfer buf length.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25072</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 Replace the last 3 color bytes (brown shades) that we just&#xD;
 copied to the dynamic transfer buf with ... (are they colors&#xD;
 for the pile of ashes?)&#xD;
&#xD;
 Note that here the dynamic transfer buf is being written with&#xD;
 absolute offsets, instead of relative ones used in copying&#xD;
 the base palette row transfer record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25084</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch back to the current object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25029</Address>
      <AddressType>PrgRom</AddressType>
      <Label>_UnknownColorTriples</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25021</Address>
      <AddressType>PrgRom</AddressType>
      <Label>_UnknownPaletteTransferRecord</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25046</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ReplaceAshesPaletteRow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91444</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the direction index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91384</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_LayOutDoors_LoopDoors</Label>
      <Comment> For each door, indexed by X, from 3 (N) to 0:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91388</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_LayOutDoors_LoopHalves</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91412</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16514_SetPF9</Label>
      <Comment> We jump here if the door type is bombable and was opened.&#xD;
 Change the provisional door face to value 9, which&#xD;
 will become the "hole in the wall".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91426</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Furthermore, if door type = 0, then use 4 as the provisional face.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91485</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Furthermore, if the latest provisional door face &gt;= 3, then&#xD;
 subtract one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6608</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterCollisions</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Note:&#xD;
 This routine might modify the facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6100</Address>
      <AddressType>SaveRam</AddressType>
      <Label>AnimateAndDrawObjectWalking</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126191</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 If the object is autonomous and not checking collisions itself,&#xD;
 then see about checking collisions and drawing on its behalf.&#xD;
&#xD;
 Else go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126202</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Self checks collisions and draws</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Skip drawing or self-draw?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126206</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 If attribute = 0, then it indicates not to skip drawing. So, animate and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126216</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ED08</Label>
      <Comment> Either way, we'll check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6701</Address>
      <AddressType>SaveRam</AddressType>
      <Label>GetObjectMiddle</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 [02]: center X&#xD;
 [03]: center Y&#xD;
&#xD;
&#xD;
 Start with offset 8 for X and Y in [02] and [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6707</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object attribute $40 is set, make X offset 4.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6716</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Add object's X coordinate to [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6723</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Add object's Y coordinate to [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6710</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Half width (for collision detection)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6714</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Cut the X offset [02] in half.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6611</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the object is invincible, skip checking collisions with Link's weapons.&#xD;
 But go check for a collision with Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6618</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If temporarily invincible, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6623</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Check for collisions with each weapon.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7106</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterBoomerangOrFoodCollision</Label>
      <Comment> Params:&#xD;
 X: monster slot&#xD;
 Y: weapon slot&#xD;
 [02]: monster mid X&#xD;
 [03]: monster mid Y&#xD;
&#xD;
 Returns:&#xD;
 [00]: weapon slot&#xD;
&#xD;
 If the weapon slot holds food (high bit of state is set), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7325</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterSwordShotOrMagicShotCollision</Label>
      <Comment> Params:&#xD;
 X: monster slot&#xD;
 Y: weapon slot&#xD;
 [02]: monster mid X&#xD;
 [03]: monster mid Y&#xD;
&#xD;
 Returns:&#xD;
 [00]: weapon slot&#xD;
&#xD;
 [00] holds the weapon slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7388</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterBombOrFireCollision</Label>
      <Comment> Params:&#xD;
 X: monster slot&#xD;
 Y: weapon slot&#xD;
 [02]: monster mid X&#xD;
 [03]: monster mid Y&#xD;
&#xD;
 Returns:&#xD;
 [00]: weapon slot&#xD;
&#xD;
 [00] holds the weapon slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7465</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterSwordCollision</Label>
      <Comment> Params:&#xD;
 X: monster slot&#xD;
 Y: weapon slot&#xD;
 [02]: monster mid X&#xD;
 [03]: monster mid Y&#xD;
&#xD;
 Returns:&#xD;
 [00]: weapon slot&#xD;
 [06]: 1 if objects collide&#xD;
&#xD;
 [00] holds the weapon slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7519</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterArrowOrRodCollision</Label>
      <Comment> Params:&#xD;
 X: monster slot&#xD;
 Y: weapon slot&#xD;
 [02]: monster mid X&#xD;
 [03]: monster mid Y&#xD;
&#xD;
 Returns:&#xD;
 [00]: weapon slot&#xD;
 [06]: 1 if objects collide&#xD;
&#xD;
 [00] holds the weapon slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6614</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Invincible</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6664</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> This monster is dying.&#xD;
&#xD;
 If it's a goriya that threw a boomerang, then destroy the boomerang.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6668</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Red Goriya</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6685</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L728D_CheckCaptors</Label>
      <Comment> If the monster is a wallmaster or like-like and there's a hit&#xD;
 (using [0C] flag), then set the monster's capture flag.&#xD;
&#xD;
 Wallmaster object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6689</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> LikeLike object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6656</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the monster is not dying, then go see about monsters&#xD;
 that capture Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7327</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set magic shot damage type ($10) in [09].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6676</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get the object slot of this goriya's boomerang.&#xD;
 DASM.EXPR: ObjRefId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129915</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object was initialized, go update it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129918</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] holds the original value of "uninitialized" flag.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129949</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FB9D_Update</Label>
      <Comment> The object was already initialized.&#xD;
&#xD;
 If meta-state &lt;&gt; 0, go update the meta-object&#xD;
 (spawning cloud or dying sparkle).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130184</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMetaObject</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129957</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FBA5</Label>
      <Comment> This is a normal update.&#xD;
&#xD;
 If object type &gt;= $6A, then switch to bank 1,&#xD;
 and go update a cave.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129969</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FBB1_NormalObject</Label>
      <Comment> Else call the object update routine.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129925</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Armos</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129929</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flying Ghini</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129933</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flying Rock</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129922</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object type starts with a spawning cloud&#xD;
 (type &lt; $53, except armos and flying ghini),&#xD;
 then set object timer to 7.&#xD;
&#xD;
 But this will be overridden during initialization.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129941</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FB95_Init</Label>
      <Comment> Flag the object initialized, and go initialize it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130269</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We want to handle "enemies from the edges of the screen".&#xD;
&#xD;
 So, if not in UW, or "enemies from edges" attribute is clear,&#xD;
 or the object is (zora, fire, armos, whirlwind), or any object&#xD;
 that does not spawn with a cloud (type &gt;= $53);&#xD;
 &#xD;
 then go initialize the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130283</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Zora</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130287</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fire</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130291</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Armos</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130295</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Whirlwind</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130299</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flying rock</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75</Address>
      <AddressType>InternalRam</AddressType>
      <Label>MonstersFromEdgesLongTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130303</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FCFF_UninitMonsterFromEdge</Label>
      <Comment> If the "monsters from edges" long timer expired, then&#xD;
 go bring the monster in.&#xD;
 Else revert the flag, so this monster becomes uninitialized.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130375</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Armos</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130379</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flying Ghini</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130383</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flying rock</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130364</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FD3C_NormalSpawn</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130397</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] holds object type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130399</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Hit points are packed two values to a byte.&#xD;
 Divide the object type in half in order to index&#xD;
 into the hit points table.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77824</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ExtractHitPointValue</Label>
      <Comment> Params:&#xD;
 A: hit point doublet (byte)&#xD;
 [00]: object type&#xD;
&#xD;
 Returns:&#xD;
 A: hit points for object type&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130412</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cave 1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130424</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FD78_CheckTileObj</Label>
      <Comment> If object is a cave or tile object (type &gt;= $5F),&#xD;
 go assign object attribute $81, and get&#xD;
 it ready to behave autonomously and updating.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130410</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object is a cave, go initialize it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130421</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Init cave</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130431</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FD7F</Label>
      <Comment> Else run the object initialization routine.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130774</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ResetObjMetastateAndTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130762</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitTileObjOrItem</Label>
      <Comment> TODO: Describe attribute $81. 1 is self-check collisions and draw.&#xD;
&#xD;
 Set object attribute to $81, and go reset metastate and timer;&#xD;
 so that the object is ready to start updating itself.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17872</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitCave</Label>
      <Comment> The person goes at location ($78, $80).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65573</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitWalker</Label>
      <Comment> If the facing direction was already set, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129551</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the metastate &gt;= $10, go animate and draw the death sparkle.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129558</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Animate and draw the spawning cloud.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129563</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FA1B_CheckMetaObjTimer</Label>
      <Comment> If the object's timer has expire, then go to the next metastate&#xD;
 and last 6 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129548</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateAndDrawMetaObject</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130197</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMetaObjectEnd</Label>
      <Comment> Metastate = 4 or $14.&#xD;
&#xD;
 If it's 4, go reset the metastate. The object is ready to update&#xD;
 on its own.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130204</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Metastate = $14&#xD;
&#xD;
 Copy the object type, so that it can be used in setting up&#xD;
 a dropped item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129575</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FA27_AnimateSpark</Label>
      <Comment> If metastate = $10, then go increment metastate and set&#xD;
 object timer without drawing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129579</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the frame image in [0C] (1, 0, 1) for the metastate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129583</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Normal sprite, palette 5 (blue)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129588</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Death spark</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1322</Address>
      <AddressType>InternalRam</AddressType>
      <Label>WorldKillCycle</Label>
      <Comment> TODO: 0 to 9&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130222</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the world kill cycle (0 to 9).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130237</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object is not a zora, then increase room kill count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130240</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Zora</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130247</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FCC7_DropItem</Label>
      <Comment> Turn this object into a dropped item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130214</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Child Gel</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130218</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Red Keese</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130210</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Certain objects don't advance the world kill cycle.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130252</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flag it uninitialized.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130255</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77930</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetUpDroppedItem</Label>
      <Comment> Reset [01] which holds the row number of the drop item table.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77934</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Compare dead object's type to array of 7 that don't drop items.&#xD;
 If found, go destroy the monster.&#xD;
&#xD;
 DASM.EXPR: Item_ObjMonsterType</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77947</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for object type in array of 6. These use drop item table row 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77957</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment row number in [01] to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77959</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for object type in array of 9. These use drop item table row 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77969</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment row number in [01] to 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77971</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for object type in array of 9. These use drop item table row 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77981</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment [01]. The rest use row 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77983</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1309F_Found</Label>
      <Comment> If object slot = 1 and object is stalfos or gibdos, then&#xD;
 go destroy the mosnter, because it might already be carrying&#xD;
 a room item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77995</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L130AB_LookUpItem</Label>
      <Comment> Look up the base offset of the row in the drop item table.&#xD;
 Add it and WorldKillCycle to look up the dropped item for&#xD;
 this object type and store it in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77882</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DropItemSetBaseOffsets</Label>
      <Comment> Multiples of $A to index the base of each row of items in DropItemTable.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77851</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoDropMonsterTypes</Label>
      <Comment> Types of objects that do not drop items.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>7</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77858</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DropItemMonsterTypes0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77864</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DropItemMonsterTypes1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77873</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DropItemMonsterTypes2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77890</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DropItemTable</Label>
      <Comment> ID's for items dropped by monsters.&#xD;
 WorldKillCycle addresses the column.&#xD;
&#xD;
 Monsters are arranged in groups that determine the row.&#xD;
 There are four rows.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>40</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77886</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DropItemRates</Label>
      <Comment> Top drop an item, a random value must be less than the&#xD;
 element for the monster group.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77952</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If found, use row 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77964</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If found, use row 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77976</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If found, use row 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78008</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] Dropped item ID</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78031</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bomb</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78025</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, the item will be guaranteed to be made.&#xD;
 [51] HelpDropValue determines which kind:&#xD;
 - 0:     5 rupees&#xD;
 - other: bomb&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78010</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Is this really what [0627] represents?&#xD;
 If the global kill count = $10, set the dropped item to a fairy.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78043</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L130DB_RandomlyCancel</Label>
      <Comment> If the random value &gt;= drop item rate for the monster's group,&#xD;
 then go destroy the monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78052</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L130E4_Commit</Label>
      <Comment> Set ObjItemLifetime to $FF.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78019</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If help drop counter &lt; $A, then use the dropped item ID as is.&#xD;
 But there is a random chance that the item drop will be canceled.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78057</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set ObjItemId.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78061</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the item is a fairy, we have to finish setting it up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78033</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L130D1_SetHelpItem</Label>
      <Comment> [00] Item ID</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78336</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set flying speed fraction to $7F.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78341</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set maximum speed fraction to $A0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Face up at first.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78349</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130340</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the monsters-from-edges long timer to a random value&#xD;
 between 2 and 5. So, it will last 20 to 50 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130349</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the distance to Link is too close to Link, then&#xD;
 go flag the monster uninitialized again, so we can&#xD;
 try to spawn it again next time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130359</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> OK to spawn.&#xD;
 In this situation, monsters don't spawn from a cloud.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130322</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Extract and set the monster's location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130311</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FD07_InitMonsterFromEdge</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86131</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
 If you reach the original cell, then stop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86114</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15062_GetRowOffset</Label>
      <Comment> Turn the row part of [0A] into a tile index.&#xD;
 row := (([0A] AND $F0) - $40) / 8&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86052</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FindNextEdgeSpawnCell</Label>
      <Comment> Load [0A] with the value before the call.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86077</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1503D_CheckTopOrBottom</Label>
      <Comment> Next, if high nibble = $E, then we're at the bottom edge.&#xD;
 Move right one pixel.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86096</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15050_PointToColumn</Label>
      <Comment> Time to get the address of the column.&#xD;
 Starting at the top of the leftmost column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86057</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15029_LoopEdgeCell</Label>
      <Comment> Loop to look for a place to spawn a monster from the edge&#xD;
 of the screen. Move counterclockwise, one square at a time.&#xD;
&#xD;
 First, if low nibble = 0, then we're at the left edge.&#xD;
 We'll move down $10 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86065</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else if low nibble &lt;&gt; $F, then we're at the top or bottom.&#xD;
 Don't move vertically.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86071</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15037_HandleLeftOrRight</Label>
      <Comment> Else low nibble = $F. We're at the right edge,&#xD;
 and we'll move up $10 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86073</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add $10 or -$10 at the left or right edge.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86090</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1504A</Label>
      <Comment> Else if high nibble &lt;&gt; 4, then we're at the left or right.&#xD;
 Dont' move horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86094</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else high nibble = 4. We're at the top edge.&#xD;
 Move left 1 pixel.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86099</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add $2C to the address as many times as the low nibble of [0A],&#xD;
 in order to point to the column we want.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86106</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1505A</Label>
      <Comment> Each column is $16 tiles. Each square column has two columns.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86125</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tile &lt; $84, then it's walkable. So, go use it.&#xD;
 $84 is a sand tile, which is OK for many monsters; but not&#xD;
 when coming in from the edges.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86138</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1507A_SetSpawnCell</Label>
      <Comment> Set the spawn cell to the one we found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130325</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Square column in low nibble. Multiply by 16 to get X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Square row in high nibble. Subtract 3, for the usual offset, to get Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77825</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Even object types only have to mask off the bottom nibble.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77835</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Odd object types have to multiply by 16.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67413</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitSlowOctorockOrGhini</Label>
      <Comment> Assign QSpeed $20 (0.5 pixels a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67417</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitFastOctorock</Label>
      <Comment> Assign QSpeed $30 (0.75 pixels a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67445</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitPeahat</Label>
      <Comment> Peahats do not use a spawn cloud. Also, go up at first.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69637</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlFlyingGhiniFlight</Label>
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68922</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flying Ghini</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68810</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flying Ghini</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68907</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D2B_FinishInit</Label>
      <Comment> Facing and input directions down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68805</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's still fading in, then go finish some initialization needed&#xD;
 for fading in.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68914</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every other frame, return without drawing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68807</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once the object timer reaches 0; if the object is flying ghini,&#xD;
 go finish initializing it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68814</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else we have an armos.&#xD;
&#xD;
 Store stairs tile $70 in [00] for use later.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68749</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawGhiniAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68930</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_EndInitFlyingGhini</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68919</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Finish initializing based on type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67452</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EndInitFlyer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68933</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we're finally leaving the object flagged "initialized",&#xD;
 then reset metastate and initialize this as a flyer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68752</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset [0D]: frame image number. "Back" frame for up.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68754</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction has an "up" component, then keep the&#xD;
 frame image 0, and go figure out horizontal flipping.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68760</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else make the frame image 1 for the "down" frame.&#xD;
 Note that this is the frame image to use, even if there's no&#xD;
 down component in the direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68762</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If right is a component of the direction, then go set horizontal&#xD;
 flipping. Else leave horizontal flipping = 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68770</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10CA2_CheckHorizontalFlip</Label>
      <Comment> Set horizontal flipping if right is a direction component.&#xD;
 This essentially the same test as above, but for when we jump&#xD;
 from the "up" test.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69192</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 0.&#xD;
&#xD;
 If this is not a gravestone (but it's a rock), and there is no&#xD;
 bracelet, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1637</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvBracelet</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69204</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10E54_CheckQuest</Label>
      <Comment> If there is a mismatch between the current quest and the quest&#xD;
 needed for the secret in this room, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69466</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IsQuestSecretMismatch</Label>
      <Comment> Returns:&#xD;
 C: 1 if there is a mismatch between current quest&#xD;
    and quest number for the secret in the room&#xD;
&#xD;
&#xD;
 The quest secret is in the high two bits.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69475</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's 0, then return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69477</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up a quest number (0 or 1) indexed by quest secret (0 or 1).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69463</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SecretQuestNumbers</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69481</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the save slot's quest number matches the room's&#xD;
 secret quest number, then return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69488</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else return C=1. There is a mismatch in quest numbers.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The gravestone and rocks can only be pushed vertically.&#xD;
 Return, if X's don't match.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69215</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the difference between Link's (Y + 3) and the block's Y&#xD;
 is positive; then go use it along with a flag that indicates that&#xD;
 Link is "down" from the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69227</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else negate it, and indicate Link is "up" from the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69233</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10E71_CheckDistance</Label>
      <Comment> If the distance &gt;= $11, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69186</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RockPushDirections</Label>
      <Comment> Also used for the gravestone.</Comment>
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69237</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the input direction has no vertical component, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69244</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this vertical input direction does not match the one needed&#xD;
 to push the rock or gravestone, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69249</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set it to the object's direction. Go to the next state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69253</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store current room ID.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69260</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Gray floor tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69315</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object is a gravestone ($65), go use a gravestone tile ($BC).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69258</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change from a gravestone tile to the gray floor tile.&#xD;
 The gravestone object will be drawn above it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69266</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10E92_State1</Label>
      <Comment> State 1.&#xD;
&#xD;
 Move in the object's direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw the sprites one pixel above the object's location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69281</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object's grid offset (distance moved) &lt;&gt; $10 nor -$10,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69292</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10EAC</Label>
      <Comment> Flag the room visited.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69306</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object is a rock ($62), go use a rock tile ($C8).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69321</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else use an armos tile ($C0). Dead code?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69323</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10ECB_ReplaceTiles</Label>
      <Comment> Change the tiles at the end location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69328</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the stairs tile in [00] for use in revealing the secret.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the position of the stairs in this room, and set it for the object.&#xD;
&#xD;
 DASM.EXPR: TileObjRoomId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18083</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetUpCommonCaveObjects</Label>
      <Comment> Params:&#xD;
 A: X coordinate&#xD;
 Y: Y coordinate&#xD;
&#xD;
 Set the person's coordinates, HP, and attributes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18097</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Halt Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18101</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set up the two bonfires.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17898</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L45EA_TakeType</Label>
      <Comment> Else the cave/person simply does:&#xD;
 - taken:     no person, no text&#xD;
 - not taken: show a person and text&#xD;
&#xD;
 So, if the item was not taken, then go set up the text.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17903</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise destroy the person object, and let Link continue.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17879</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the cave/person does not remember state (give item, door charge),&#xD;
 then go handle other kinds.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65618</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Normal sprites and palette row 6 (red)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65623</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Up</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65630</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If type &lt;&gt; $40, then never use horizontal mirroring. Dead code?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65641</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10069</Label>
      <Comment> Frame image 0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69360</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there is no detonating bomb (state $13) in slots $10 and $11,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to slot $11.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69428</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RevealAndFlagSecretTileObj</Label>
      <Comment> Params:&#xD;
 A: the first tile of tile object&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69629</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the low bit of the flying distance traveled.&#xD;
 But this doesn't seem to be used.&#xD;
 The following call clobbers the A register.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjDistTraveled&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69377</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10F01_FoundBomb</Label>
      <Comment> Store the bomb's object slot in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69384</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Black tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69439</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckTileObjWeaponCollision</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 Y: weapon object index&#xD;
 [00]: weapon object index&#xD;
&#xD;
 Returns:&#xD;
 A: 1 if objects collide&#xD;
&#xD;
 Put the midpoint coordinate of the weapon in [04] and [05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69455</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the tile object's midpoint coordinates in [02] and [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69458</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 10 pixel collision threshold</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69379</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tile object and weapon collide, then reveal the secret.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69395</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there is no standing fire (state $22) in slots $10 and $11,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69412</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10F24_FoundFire</Label>
      <Comment> Store the fire's object slot in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69421</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tile object and weapon collide, then reveal the secret.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69414</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the standing fire's timer &gt;= 2, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1632</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvRaft</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69577</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10FC9_State1</Label>
      <Comment> State 1. Down&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69557</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 2. Up&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69503</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 0&#xD;
&#xD;
 Choose an X coordinate for the dock:&#xD;
 $80 in room $55&#xD;
 $60 in the other room ($3F)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69513</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10F89</Label>
      <Comment> If the player is not aligned with the dock, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69517</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the dock object's X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69519</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Determine whether Link is coming or going.&#xD;
 If Y = $3D, then he's at the top edge of the screen. Use state 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69527</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But if Y = $7D, then he's at the dock. Use state 2.&#xD;
 Otherwise, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69534</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Show the raft beneath Link: 6 pixels down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69539</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the "secret found" tune, and halt Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69492</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RaftDirections</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69546</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Link's direction based on the raft's state.&#xD;
&#xD;
 DASM.EXPR: RaftDirections-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69552</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10FB0_HandleOtherStates</Label>
      <Comment> Is state = 1?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69561</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's Y = $3D, then leave the room.&#xD;
 Else go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69592</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10FD8_ResetLinkAndRaftStateAndDraw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127507</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_EndMoveAndAnimate_Bank4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69598</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10FDE_Draw</Label>
      <Comment> Save raft object slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69603</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore raft object slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69608</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Normal sprites, palette row 4 (Link).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69610</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Raft item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69581</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's Y &lt;&gt; $7F, go draw.&#xD;
 Note that Y is below $7D, which would trigger going up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69587</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link's grid offset at $7F must be 2 ($7F - $7D).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69605</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Why animate the raft?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68947</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's still shoved, then don't animate. Only go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68969</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawArmosAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68866</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D02_NextLoopArmosRoom</Label>
      <Comment> Bottom of the loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68786</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SecretArmosRoomIds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>7</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68793</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SecretArmosXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>7</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68818</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for the current room ID in an array of room ID's that&#xD;
 have armos secrets.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68822</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this element does not match the current room ID, go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68827</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The secret (usually stairs) is under one of the armoses.&#xD;
&#xD;
 If the armos's X coordinate does not match the one needed&#xD;
 for the current room in the list, then go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68834</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the armos's Y coordinate &lt;&gt; $80, go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68840</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the loop index &lt;&gt; 0, go use the stairs tile to patch the floor.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68844</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The room ID at index 0 is $24. Instead of stairs, this room&#xD;
 has the power bracelet.&#xD;
&#xD;
 Set up the room item with the armos's coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68850</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This resets the room item's state, which activates it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68852</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the room item ID.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68856</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the bracelet has not been taken, then play the "secret found" tune.&#xD;
&#xD;
 Either way, quit the loop, and replace the tile with a floor tile.&#xD;
&#xD;
 Note that, if the item was already taken, then the room item&#xD;
 object will stay activated. But in E6EA (MoveAndDrawRoomItem),&#xD;
 it will be ignored, because that routine checks whether&#xD;
 the item was taken.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68869</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D05_UseFloorTile</Label>
      <Comment> Not found, or found the power bracelet.&#xD;
 Use a floor tile $26 to replace the armos.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68875</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the replacement tile is a stairs tile, then play the "secret found" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68883</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D13</Label>
      <Comment> Replace the tile where the armos was.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68894</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a speed (q-speed fraction) randomly:&#xD;
 $20 if random value &lt; $80&#xD;
 $60 otherwise&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68889</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Because the armos object is aligned to the square grid&#xD;
 (because it was made from a square),&#xD;
 set its grid offset to 3 to compensate.&#xD;
&#xD;
 Most objects are aligned to the grid vertically when the&#xD;
 low nibble is $D.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68951</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Animate.&#xD;
&#xD;
 Decrement the animation counter. But if it hasn't reached 0,&#xD;
 then only go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68956</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Armos animation frames last 6 screen frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68961</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Armos doesn't simply flip horizontally to animate. That would&#xD;
 change the position of the shield. To keep fixed it in place,&#xD;
 there are separate frame images for each animation frame.&#xD;
&#xD;
 Frame images 0 and 1 depict the first animation frame, facing front and back.&#xD;
 Frame images 2 and 3 depict the second animation frame, facing front and back.&#xD;
&#xD;
 Here flip between the two sets by XOR'ing with 2.&#xD;
 Then choose the direction at the point of drawing below.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68974</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing up, then use the second frame image in the set ("back").&#xD;
 Else use the second.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68987</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the armos is still fading in, then go for check collision with Link,&#xD;
 but not with weapons.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68991</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else check for all collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68994</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Why?&#xD;
 If the armos has died, then set object type to $5D.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69698</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Take low bit of the flying distance traveled as the frame image.&#xD;
 So, the faster it moves, the faster it animates.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjDistTraveled&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69706</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In flying state 5, check for all collisions (so it can get hurt).&#xD;
 In all other states, only check for collisions with Link.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjFlyingState&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69682</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11032</Label>
      <Comment> If we have the clock or the object is stunned, go draw&#xD;
 and check for collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69689</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else move around.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66589</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitBlueKeese</Label>
      <Comment> Choose one of eight random directions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66613</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitRedOrBlackKeese</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66616</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Red and black keeses are like blue ones, but faster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66706</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Like peahats, keeses animate as fast as they move.&#xD;
 But keese beat their wings at half the rate.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjDistTraveled&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>843</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ShotCollidesWithLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6841</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If Link is invincible, or we have the magic clock,&#xD;
 or Link is stunned, or the monster is stunned;&#xD;
 then return no collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6853</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckLinkCollisionPreinit</Label>
      <Comment> If Link is halted or paralyzed, then return no collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6864</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the object is a monster's shot/projectile, and it's not in a&#xD;
 state that it can do damage; then return no collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6879</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Store Link's midpoint coordinates in [04] and [05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6893</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If both objects are 9 pixels apart or more, then return no collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6900</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> They collide. Now find out how they collide.&#xD;
&#xD;
 If it's a regular monster, go harm Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6730</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ObjTypeToDamagePoints</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>93</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6907</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Here, the attacker is a monster's shot/projectile.&#xD;
 Flag this kind of collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6910</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If object type = Fireball2 ($56) or $5A, or Link is not idle;&#xD;
 then go harm Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6924</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If Link and the shot are not facing opposite directions,&#xD;
 then go harm Link.&#xD;
&#xD;
 Note the bitwise AND in the test. It picks out one direction&#xD;
 component of a monster that can move diagonally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6944</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7390_FacingOpposite</Label>
      <Comment> Link and the shot are facing opposite directions.&#xD;
 Link can parry certain weapons/shots.&#xD;
&#xD;
 For flying rock, $54, arrow, and boomerang, this means&#xD;
 no harmful collision; but it still counts as a shot collision.&#xD;
 So, go treat this as a parry.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6955</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the magic shield is missing, then the rest of the shots do damage.&#xD;
 So, go harm Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6960</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L73A0_Parry</Label>
      <Comment> Else Link parries.&#xD;
&#xD;
 Play the "parry" tune, and cancel the collision (reset [06]).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6975</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Unpack the damage points for the monster's type.&#xD;
 The low nibble is the high byte.&#xD;
 (Damage points byte AND $F0) is the low byte.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6973</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Flag collision with [0C], even though [06] was already set.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6826</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Reset variables to return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7112</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [00] holds the weapon slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7114</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set boomerang damage type (2) in [09].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7118</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set collision threshold $A in both axes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7124</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The boomerang's middle X is 4 pixels to the right. Store in [04].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7132</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The boomerang's middle Y is 8 pixels down. Store in [05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7140</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Reset [06] for no collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7144</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the weapon's not active (state = 0), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7151</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the objects do not collide, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7621</Address>
      <AddressType>SaveRam</AddressType>
      <Label>PlayParryTune</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7156</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the weapon is a boomerang ...&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7170</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set the boomerang state to return fast to the thrower.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7160</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> ... and the monster is invincible to it,&#xD;
 then play the parry sound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7175</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the monster is invincible to the boomerang, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7182</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Still the boomerang.&#xD;
 Reset [07] damage points, and set the monster's stun timer to $10 ($A0 frames).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7273</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L_PlayParrySoundForDamageType</Label>
      <Comment> Play the parry sound for all but fire and bomb damage types.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7190</Address>
      <AddressType>SaveRam</AddressType>
      <Label>HandleMonsterWeaponCollision</Label>
      <Comment> If the monster is invincible to this damage type, then&#xD;
 go play parry sound if needed, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7197</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the monster is Blue Gohma or Red Gohma, then&#xD;
 let it handle the collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7211</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L749B_CheckZolVire</Label>
      <Comment> If the monster is Zol or Vire, then&#xD;
   If not hit by the boomerang, then&#xD;
     Set monster's direction to the weapon's&#xD;
   Go deal damage&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7252</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DealDamage</Label>
      <Comment> Play the "harmed" sound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7257</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Subtract the damage points from HP; if damage points &gt;= HP,&#xD;
 then go handle the monster dying.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7260</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [07] damage points</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7265</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [07] damage points</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7279</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Bomb damage type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7275</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Fire damage type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7286</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L74E6_HandleMonsterDied</Label>
      <Comment> Handle the monster dying.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7231</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L74AF_CheckDarknut</Label>
      <Comment> If the monster is a red or blue darknut, and it and the weapon&#xD;
 are facing opposite directions, then only play the parry sound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7311</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L74FF_SetDyingMetastate</Label>
      <Comment> Set the dying metastate, and reset some object info.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7297</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the help drop counter has reached the max, and damage type = bomb (8);&#xD;
 then set [51] HelpDropValue in order to drop a bomb next time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78035</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The player has been helped with a dropped item. Reset the&#xD;
 help drop variables.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7289</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Increase the help drop counter, if not at max ($A).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7331</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the shot is a sword shot that's spreading out, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7337</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set horizontal collision threshold $C.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7341</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the weapon is a magic shot, go use $20 damage points.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7349</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The weapon is a sword shot.&#xD;
&#xD;
 First, change the damage type to sword (1).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7353</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Determine the damage points for the kind of sword.&#xD;
 - wood sword:   $10&#xD;
 - white sword:  $20&#xD;
 - master sword: $40&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7374</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If no collision, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7378</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Else handle blocking the shot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7380</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Shot object slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7558</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterShotCollision</Label>
      <Comment> Params:&#xD;
 A: damage points&#xD;
 X: monster object slot&#xD;
 [00]: weapon object slot&#xD;
 [02]: monster object mid X&#xD;
 [03]: monster object mid Y&#xD;
 [09]: damage type&#xD;
 [0D]: horizontal threshold&#xD;
&#xD;
 Returns:&#xD;
 [06]: 1 if objects collide&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7627</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterSlenderWeaponCollision</Label>
      <Comment> Params:&#xD;
 A: damage points&#xD;
 X: monster object slot&#xD;
 [00]: weapon object slot&#xD;
 [02]: monster object mid X&#xD;
 [03]: monster object mid Y&#xD;
 [09]: damage type&#xD;
 [0D]: horizontal threshold&#xD;
&#xD;
 Returns:&#xD;
 [06]: 1 if objects collide&#xD;
 [07]: damage points&#xD;
 [0E]: vertical threshold&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7635</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If Link is facing vertically, then:&#xD;
 [04] := (weapon X + 6)&#xD;
 A    := (weapon Y + 8)&#xD;
&#xD;
 TODO: Shouldn't it be based on the weapon's direction?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7658</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L765A_CheckHorizontal</Label>
      <Comment> Else Link is facing horizontally.&#xD;
 [04] := (weapon X + 8)&#xD;
 A    := (weapon Y + 6)&#xD;
&#xD;
 TODO: Shouldn't it be based on the weapon's direction?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7672</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> The A register will be copied to [05] and used here.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7633</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterSlenderWeaponCollision2</Label>
      <Comment> Params:&#xD;
 X: monster object slot&#xD;
 [00]: weapon object slot&#xD;
 [02]: monster object mid X&#xD;
 [03]: monster object mid Y&#xD;
 [07]: damage points&#xD;
 [09]: damage type&#xD;
 [0D]: horizontal threshold&#xD;
 [0E]: vertical threshold&#xD;
&#xD;
 Returns:&#xD;
 [06]: 1 if objects collide&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7138</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterWeaponCollision</Label>
      <Comment> Params:&#xD;
 A: weapon object mid Y&#xD;
 X: monster object slot&#xD;
 Y: weapon object slot&#xD;
 [00]: weapon object slot&#xD;
 [02]: monster object mid X&#xD;
 [03]: monster object mid Y&#xD;
 [04]: weapon object mid X&#xD;
 [07]: damage points&#xD;
 [09]: damage type&#xD;
 [0D]: horizontal threshold&#xD;
 [0E]: vertical threshold&#xD;
&#xD;
 Returns:&#xD;
 [06]: 1 if objects collide&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7561</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If no collision, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7572</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Pol's Voice</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7597</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Red Darknut</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7601</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Blue Darknut</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7565</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> $12 is the arrow and rod slot. But this routine will only&#xD;
 be called if it's an arrow.&#xD;
&#xD;
 If the weapon is an arrow and the monster is Pol's Voice;&#xD;
 then set HP to 0, and deal damage, even if the collision&#xD;
 checking routine above dealt some. This way it dies for sure.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7584</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the weapon is an arrow, set its state to spark ($20).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7594</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ParryOrShove</Label>
      <Comment> For any weapon type:&#xD;
&#xD;
 If the monster is a darknut and both are facing opposite directions,&#xD;
 then go parry.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7618</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Else shove the monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7441</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Pass collision threshold in A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7443</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the objects do not collide, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7451</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the monster is weak to the damage type, then shove it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7390</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set up parameters for a fire.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7413</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Else set up parameters for a bomb.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7425</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7571_SetHotspot</Label>
      <Comment> The weapon's midpoint/hotspot is at (X + 8, Y + 8).&#xD;
 Pass it in [04] and [05].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7392</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [09] holds fire damage type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7396</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [07] holds $10 damage points</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7400</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [0D] holds collision threshold $E</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7402</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the weapon is a fire, then go set the hotspot/midpoint.&#xD;
 But if the bomb is not detonating, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7415</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [09] holds bomb damage type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7419</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [07] holds $40 damage points</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7423</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [0D] holds collision threshold $18</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7467</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment>Set sword damage type (1) in [09].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7471</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the sword is not fully extended, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7462</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SwordDamagePoints</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7478</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Look up and set the damage points for the sword type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7484</Address>
      <AddressType>SaveRam</AddressType>
      <Label>CheckMonsterStabbingCollision</Label>
      <Comment> Params:&#xD;
 A: damage points&#xD;
 X: monster slot&#xD;
 Y: weapon slot&#xD;
 [02]: monster mid X&#xD;
 [03]: monster mid Y&#xD;
 [09]: damage type&#xD;
&#xD;
 Returns:&#xD;
 [06]: 1 if objects collide&#xD;
&#xD;
 [07] damage points</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7486</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If Link's direction is vertical, then set collision thresholds accordingly:&#xD;
 [0D] := $C&#xD;
 [0E] := $10&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7501</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L75BD_Horizontal</Label>
      <Comment> Else switch it:&#xD;
 [0D] := $10&#xD;
 [0E] := $C&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7512</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If no collision, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7524</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the weapon is a rod, then&#xD;
 go check a stabbing collision using rod parameters.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7530</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [09] holds sword damage type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7532</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Pass $20 damage points.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7536</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> We have an arrow. If it's no longer flying, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7540</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Set up arrow parameters.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7542</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [09] holds arrow damage type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7556</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> [0D] holds collision threshold $B</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7544</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Use $20 damage points for wooden arrows, and $40 for silver ones.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65577</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate horizontal distance and direction away from chase target.&#xD;
 Store the distance in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65589</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If chase target is to the right of the object, then&#xD;
 store left (2) in [01], else right (1).&#xD;
&#xD;
 Also, make this the object's facing direction, even though&#xD;
 it will be clobbered shortly.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65593</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate vertical distance and direction toward the chase target.&#xD;
 Make this vertical direction the facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65606</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If vertical difference &gt;= horizontal difference, then&#xD;
 set the facing direction to the horizontal direction in [01].&#xD;
&#xD;
 Note that an unsigned comparison is used, even though&#xD;
 the values can be considered signed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65820</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not an armos and high bit of state is set, then return.&#xD;
 This means the monster is delaying after shooting.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65831</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not being shoved, then go handle other activities.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65936</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Walker_SetInputDirAndTryShootingBoomerang</Label>
      <Comment> Set the input direction to the facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65836</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1012C_AfterMove</Label>
      <Comment> If speed = 0 or is between squares, then go try shooting.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65848</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the truncated grid offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65851</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Which object gets in this state, and when?&#xD;
 If state = $FF, go try shooting.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65857</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store in [00] the absolute vertical distance between&#xD;
 the chase target and the walker.&#xD;
&#xD;
 Store in [02] the vertical direction from the walker to&#xD;
 the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65907</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Whichever distance is longer determines which combination&#xD;
 of distance and direction will be used.&#xD;
&#xD;
 If the vertical distance is longer, then use index 0.&#xD;
 Else use index 1 for horizontal distance and direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65882</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store in [01] the absolute horizontal distance between&#xD;
 the chase target and the walker.&#xD;
&#xD;
 Store in [03] the horizontal direction from the walker to&#xD;
 the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65916</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1017C</Label>
      <Comment> Reset the "wants to shoot" flag.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65921</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the distance chosen &lt; $51, then&#xD;
 set the "wants to shoot" flag to 1,&#xD;
 and face in the chosen direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65941</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Goriya will throw a boomerang (object type $5C).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65943</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is a blue goriya, go check the timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65950</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's not a red goriya either, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65954</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If a random value &lt;&gt; $23 nor $77, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65964</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L101AC_CheckTimerToShootBoomerang</Label>
      <Comment> Goriya will throw a boomerang (object type $5C).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65966</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L101AE_CheckTimerToShoot</Label>
      <Comment> If object timer &lt;&gt; 0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65970</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store in [00] the type of projectile the monster will throw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65972</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have the magic clock, or the monster is stunned, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78201</Address>
      <AddressType>PrgRom</AddressType>
      <Label>_ShootIfWanted</Label>
      <Comment> Params:&#xD;
 A: shot object type&#xD;
 X: shooter object index&#xD;
&#xD;
 Returns:&#xD;
 C: 1 if succeeded&#xD;
 Y: shot slot&#xD;
&#xD;
 Description:&#xD;
 The shot starts in state $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78208</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShootLimited</Label>
      <Comment> Params:&#xD;
 [00]: shot object type&#xD;
&#xD;
 Returns:&#xD;
 C: 1 if succeeded&#xD;
 Y: shot slot&#xD;
&#xD;
 Description:&#xD;
 The shot starts in state $10.&#xD;
&#xD;
 If no slot is found, return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78203</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster does not want to shoot, then return C=0.&#xD;
&#xD;
 DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78213</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object type to shoot is a true shot (projectile),&#xD;
 and we're at the limit of active shots (4), then return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78226</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else increase the number of active shots.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78251</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the shot's direction and coordinates the same as the thrower's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78236</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set state to $10 and reset timer, so that the shot moves right away.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78266</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78229</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Shoot</Label>
      <Comment> Params:&#xD;
 [00]: shot object type&#xD;
 [59]: EmptyMonsterSlot&#xD;
&#xD;
 Returns:&#xD;
 C: 1 if succeeded&#xD;
 Y: shot slot&#xD;
&#xD;
 Description:&#xD;
 The shot starts in state $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78268</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L131BC_ReturnDidNotShoot</Label>
      <Comment> Return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65979</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Try to shoot. Return, if it failed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65986</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set monster's state to $80 for delaying after shooting.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65990</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the "wants to shoot" flag.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65995</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Have the shot keep track of the monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65999</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Have the monster keep track of the shot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66003</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the shot's state to $10, which is the flying state for them.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66008</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fly at q-speed $A0 (2.5 pixels a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66013</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For boomerangs, move up to $51 pixels (horizontally or vertically).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66018</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make it autonomous (ready to update on its own).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66023</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The first animation frame lasts 3 screen frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66028</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Have the monster wait a random amount of time, up to $3F frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67539</Address>
      <AddressType>PrgRom</AddressType>
      <Label>_TryShooting</Label>
      <Comment> Params:&#xD;
 A: q-speed of the monster&#xD;
 Y: shot object type&#xD;
&#xD;
 [01] holds the q-speed of the monster</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67535</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sword shot object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67541</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is not a blue walking OW monster, and shoot timer = 0,&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67565</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> and a random value &lt; $F8, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67571</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L107F3_TryShootingNow</Label>
      <Comment> Summary&#xD;
&#xD;
 if temporarily invincible then&#xD;
   shoot timer := 0&#xD;
 elif shoot timer &gt; 0 then&#xD;
   decrement shoot timer&#xD;
 elif wants to shoot then&#xD;
   shoot timer := $30&#xD;
&#xD;
 qspeed := [01]&#xD;
&#xD;
 if shoot timer &lt;&gt; 0 then&#xD;
   if shoot timer = $10 and no clock and not stunned then&#xD;
     shoot&#xD;
     if succeeded then&#xD;
       shoot timer := 0&#xD;
       qspeed := 0&#xD;
   else&#xD;
     qspeed := 0&#xD;
&#xD;
 Push a 0 q-speed, in case the monster is in shooting time.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67544</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blue moblin</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67548</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blue lynel</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67552</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blue slow octorock</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67556</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blue fast octorock</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67573</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store shot object type in [00] to pass to shooting routine.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67537</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L107D1</Label>
      <Comment> QSpeed $20 (.5 pixels a frame)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67634</Address>
      <AddressType>PrgRom</AddressType>
      <Label>_ShootIfWanted2</Label>
      <Comment> Params:&#xD;
 A: shot object type&#xD;
 X: shooter object index&#xD;
&#xD;
 Returns:&#xD;
 C: 1 if succeeded&#xD;
 Y: shot slot&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1105</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ObjShootTimer</Label>
      <Comment> ObjShootTimer&#xD;
 While this variable &lt;&gt; 0, a walking monster will not walk.&#xD;
 When it reaches $10, it will shoot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>13</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67578</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not temporarily invincible,&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67583</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> then Y := shoot timer - 1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67587</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Y register &lt; 0, then shoot timer is 0.&#xD;
 So, if "wants to shoot" flag is set, then set shoot timer to $30.&#xD;
 Else go set a non-zero speed and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67596</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1080C_SetShootTimer</Label>
      <Comment> shoot timer := Y&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67600</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If new shoot timer = 0, go set a non-zero speed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67602</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> shoot timer &lt;&gt; 0&#xD;
 If shoot timer &lt;&gt; $10, then go set a zero speed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67606</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have the magic clock, or the monster is stunned, then&#xD;
 go set a zero speed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67613</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shoot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67618</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it failed, go set a non-zero speed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67620</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It succeeded, so reset "wants to shoot" flag and the speed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67625</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10829_ZeroSpeed</Label>
      <Comment> Replace the speed that was pushed with 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67629</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1082D_SetSpeed</Label>
      <Comment> Set the speed to whatever was determined: 0 or the value passed in [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67637</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 If succeeded, then set object timer to $80, and decrement [0437][X].&#xD;
&#xD;
 TODO:&#xD;
 What are object timer and [0437] used for?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65557</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMonsterShot</Label>
      <Comment> QSpeed $C0 (3 pixels a frame)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65561</Address>
      <AddressType>PrgRom</AddressType>
      <Label>_InitMonsterShot_Unknown54</Label>
      <Comment> QSpeed $E0 (3.5 pixels a frame)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66267</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If major state &lt;&gt; 1, go bounce.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66417</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckShotLinkCollision</Label>
      <Comment> Params:&#xD;
 X: monster object index&#xD;
&#xD;
 Returns:&#xD;
 [00]: 0 for Link slot&#xD;
 [06]: 1 if objects collide&#xD;
 [09]: 0 for Link damage type (none)&#xD;
 [0C]: 1 if objects collide&#xD;
 [034B]: ShotCollidesWithLink&#xD;
&#xD;
 Reset bounce distance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66309</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_DrawShot</Label>
      <Comment> If object type = arrow ($5B), then draw an arrow, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66275</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object type &lt; $55 (like flying rock $53), then&#xD;
 check for tile collision in addition to other checks.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66319</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1030F</Label>
      <Comment> If object type = sword shot or magic shot, then go draw, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66330</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1031A_DrawOthers</Label>
      <Comment> Prepare to draw other shot types.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66380</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1034C_BounceShot</Label>
      <Comment> Get the reverse direction index for the bounce direction.&#xD;
&#xD;
 DASM.EXPR: Shot_ObjBounceDir&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66333</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0D] holds frame image 0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66339</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object type &lt; $55 (flying rock is $53), then&#xD;
 add 4 to X coordinate, and use sprite attributes 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66335</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Assume object type &gt;= $55. Prepare sprite attributes that&#xD;
 make the shot flash.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66358</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0D] frame image</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66363</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DestroyMonsterShot</Label>
      <Comment> Destroy fireballs directly. These are not kept track of.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66299</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the object, and check for a collision with Link.&#xD;
 Go destroy the shot object, if there was a harmful collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66305</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Not zero, if collided.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66286</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the flying rock hit a tile or room boundary, then go destroy it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66282</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Additionally, if the flying rock is held back by a timer, then&#xD;
 only check for collision with Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66294</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L102F6_CheckBoundary</Label>
      <Comment> No shots can cross the room boundary.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66257</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShotBounceWidths</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66259</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShotBounceHeights</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66402</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 2 to the bounce distance.&#xD;
 The absolute value of one of the displacements is 2.&#xD;
&#xD;
 DASM.EXPR: Shot_ObjBounceDist&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66411</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go destroy the shot, if the bounce counter has reached the limit.&#xD;
 Otherwise, go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66386</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Modify the coordinates according to the displacements for&#xD;
 the bounce direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66430</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the shot hits Link, then start to bounce off of Link's shield.&#xD;
 Set the bounce direction to Link's facing direction.&#xD;
 Set state $30 to bounce.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67527</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Arrow object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65684</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wanderer_TargetPlayer</Label>
      <Comment> If turn timer &lt;&gt; 0, then decrement it.&#xD;
&#xD;
 DASM.EXPR: ObjTurnTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65700</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L100A4</Label>
      <Comment> If speed = 0, or the object is between squares;&#xD;
 then go set input direction to facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65712</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set truncated grid offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65796</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10104_TurnIfTime</Label>
      <Comment> Reset "wants to shoot" flag.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65801</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If turn timer &lt;&gt; 0, then go set input direction to facing direction.&#xD;
&#xD;
 DASM.EXPR: ObjTurnTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65772</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L100EC_TurnHorizontally</Label>
      <Comment> Choose a horizontal direction toward the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65744</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L100D0_TurnVertically</Label>
      <Comment> Choose a vertical direction toward the chase target.&#xD;
 Then go face in this direction, and flag to shoot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65806</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn toward the chase target in a direction perpendicular to&#xD;
 facing direction.&#xD;
&#xD;
 If facing vertically, then go choose a horizontal direction&#xD;
 toward the chase target.&#xD;
&#xD;
 Else go choose a vertical direction toward the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65715</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If turn rate &lt; a random value, or Link's state = $FF;&#xD;
 then go turn if turn timer has expired.&#xD;
&#xD;
 DASM.EXPR: ObjTurnRate&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65728</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the absolute horizontal distance between&#xD;
 the monster and the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65756</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L100DC_CheckVerticalDistance</Label>
      <Comment> Get the absolute vertical distance between&#xD;
 the monster and the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65768</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L100E8</Label>
      <Comment> If distance &gt;= 9, then go turn if turn timer has expired.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65740</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L100CC</Label>
      <Comment> If distance &gt;= 9, then go check the vertical distance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65781</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L100F5_SetDirTowardTarget</Label>
      <Comment> Set the monster's facing direction to the chosen direction&#xD;
 toward the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65783</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set turn timer to a random value.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65788</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set "wants to shoot" flag to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65793</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set input direction to facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127114</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> CheckLadder</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68612</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blue octorock (fast and slow)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68624</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the octorock is slow, then use q-speed $20.&#xD;
 Else double it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68638</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C1E_Shoot</Label>
      <Comment> Shoot a flying rock (object type $53).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68646</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing down, then use frame image offset 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68663</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C37_CheckHorizontal</Label>
      <Comment> If facing right, then set horizontal flipping, and use frame image offset 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68669</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C3D</Label>
      <Comment> Else facing left. Use frame image offset 0, but no horizontal flipping.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68659</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else facing up. Use frame image offset 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67422</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Octorock spawn clouds last longer than other monsters.&#xD;
 Set object timer to ((object slot + 1) * $10).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67434</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset movement frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68671</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C3F_SaveOffset</Label>
      <Comment> Save frame image offset for the direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68672</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement the animation counter, and roll over if needed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68682</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There are actually 6 frame images divided into 2 sets.&#xD;
 Each set depicts one animation frame. In each set there are&#xD;
 3 frame images: 1 for each direction (left, up, down).&#xD;
&#xD;
 The movement frame will keep track of the base offset of&#xD;
 the current set for the current animation frame: 0 or 3.&#xD;
&#xD;
 So, XOR the movement frame with 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68689</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C51_CalcFinalOffset</Label>
      <Comment> Add the base offset and the directional offset, and save the result.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68695</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing vertically, go draw mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68701</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else draw not mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68708</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C64_DrawMirrored</Label>
      <Comment> Restore the frame image.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65646</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCommonWanderer</Label>
      <Comment> Params:&#xD;
 A: turn rate&#xD;
&#xD;
 Set the turn rate. If being shoved, then shove and return.&#xD;
&#xD;
 DASM.EXPR: ObjTurnRate&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65656</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10078</Label>
      <Comment> If we have the magic clock or the monster is stunned, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68726</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is still alive, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68731</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each object slot from $B to 1:&#xD;
 If the object is a flying ghini ($22),&#xD;
 then kill it by setting metastate to $11.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72510</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 8 screen frames an animation frame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72480</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDarknut</Label>
      <Comment> Invincible to everything but sword and bomb.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72518</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Frame image 0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72485</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the darknut is red, then move at q-speed $20 (0.5 pixels a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72494</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else move a blue darknut at q-speed $28 (0.625 pixels a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72531</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Darknuts are never stunned.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72535</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 8 screen frames an animation frame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72540</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing left, then enable horizontal flipping.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72548</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11B64</Label>
      <Comment> Shift right 2, yielding: 2 up, 1 down, 0 horizontal&#xD;
 This is the base frame image.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72550</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If movement frame = 1, add 3 to frame image to access&#xD;
 the second animation frame's images.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72558</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Also if movement frame = 1, and facing up, then flip horizontally.&#xD;
&#xD;
 Down has two frame images, but up only has one. By flipping&#xD;
 horizontally, you get two frame images.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67406</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitLeever</Label>
      <Comment> Set red leever long timer to 5, for use in determining when&#xD;
 to burst out of the ground.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68257</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10AA1_Animate</Label>
      <Comment> Advance the animation counter; possibly setting a new&#xD;
 value according to the new state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68205</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBurrower</Label>
      <Comment> If object timer &lt;&gt; 0, then go animate, draw, and check for collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68232</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10A88_CycleState</Label>
      <Comment> Cycle the state between 0 and 5.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68245</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the speed and timer for the current state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68179</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueLeeverStateQSpeeds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68185</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueLeeverStateTimes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not zora or state &lt;&gt; 1, go cycle the state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68191</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueLeeverStateAnimTimes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68265</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state = 0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68269</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If is zora, and state &gt;= 2 and &lt; 5, then use frame image 2 or 3&#xD;
 (front or back), which was stored in ObjDir above.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68221</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else is zora and state = 1.&#xD;
&#xD;
 If zora's Y &gt;= Link's Y, then set zora's frame image to&#xD;
 3 (back), else 2 (front).&#xD;
&#xD;
 The frame image number is being assigned to ObjDir.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68290</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10AC2_CalcFrameImage</Label>
      <Comment> Or else if is zora in state 1 or 5, then use one of&#xD;
 the mound frame images:&#xD;
&#xD;
 frame image := ((state - 1) * 2) + movement frame&#xD;
&#xD;
 This yields 0/1 or 8/9, depending on the state.&#xD;
&#xD;
 This formula is used for states 1 to 5 of non-zora burrowers.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68301</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not zora and state &lt;&gt; 3, &#xD;
 or zora and state &lt;&gt; 2, 3, 4;&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68327</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not dying, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If monster is a red leever, then decrement the red leever count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67488</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If zora died in the call above, then it happened while in&#xD;
 states 2, 3, or 4. In the code below, the state won't be 0.&#xD;
 So, it won't flag the zora inactive. This is why the zora does&#xD;
 not come back after killing it.&#xD;
&#xD;
 If state &lt;&gt; 3 or timer &lt;&gt; $FD,&#xD;
 then go see if the object needs to be destroyed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68262</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Burrower_AnimateDrawAndCheckCollisions</Label>
      <Comment> Params:&#xD;
 A: new value for animation counter, in case it rolls over&#xD;
 X: object index&#xD;
&#xD;
 Note:&#xD;
 Advances the animation counter first.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67500</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shoot a fireball; and set the timer so that it expires faster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67509</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L107B5_DestroyWhenDone</Label>
      <Comment> If state = 0, then destroy zora object.&#xD;
 Also flag it inactive, so that the object update loop will try&#xD;
 to make another one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77</Address>
      <AddressType>InternalRam</AddressType>
      <Label>RedLeeverLongTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68368</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B10</Label>
      <Comment> State 0.&#xD;
&#xD;
 In state we determine whether to burst out of the ground.&#xD;
 If the long timer has not expired, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68515</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 3.&#xD;
&#xD;
 If being shoved, go shove, animate, and draw the leever.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68566</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10BD6_AnimateIfTime</Label>
      <Comment> If object timer has not expired, then&#xD;
 go animate, draw, and check for collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68355</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedLeeverStateAnimTimes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68349</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedLeeverStateTimes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68343</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedLeeverStateQSpeeds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68586</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the speed, timer, and animation counter&#xD;
 for the current state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68570</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedLeever_CycleStateDrawAndCheckCollisions</Label>
      <Comment> Cycle the state between 0 and 5.&#xD;
&#xD;
 If a cycle was completed (wrapped around to 0),&#xD;
 then decrease the active red leever count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1296</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ActiveRedLeeverCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68525</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10BAD_CheckStunned</Label>
      <Comment> If we have the magic clock or the leever is stunned, then&#xD;
 go animate, draw, and check for collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68532</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the leever is blocked by a tile or the room boundary,&#xD;
 then go to the next state, in addition to animating, drawing,&#xD;
 and checking for collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68552</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Truncate the grid offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68562</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10BD2</Label>
      <Comment> Set timer to $FF.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68509</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B9D_CheckOtherStates</Label>
      <Comment> If not in state 3, go check the object timer in order to draw and such.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68372</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Only allow two red leevers at a time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68379</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Face in the same direction as Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68383</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Randomly (&gt;= $C0) face the opposite direction -- toward Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68484</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B84_CheckSafeToSpawn</Label>
      <Comment> The leever can't come out of an unwalkable tile. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68392</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B28</Label>
      <Comment> If facing horizontally, go place the leever to the left or right of Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68398</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Begin with the leever's X set to Link's X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68414</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add Link's Y and the vertical offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68402</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing down, then use Y offset $28.&#xD;
 Else store Y offset -$28 in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68419</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sanitize the Y coordinate:&#xD;
 (Y AND $F0) OR $D&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68425</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Y coordinate &gt;= $5D (top of the third square row), then&#xD;
 go see if the tile is valid to come out of.&#xD;
&#xD;
 Else it's too close to the top edge of the screen. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68430</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B4E_PlaceHorizontally</Label>
      <Comment> Begin with the leever's Y set to Link's Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68434</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Y coordinate &lt; $5D (top of the third square row), then&#xD;
 it's too close to the top edge of the screen. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68438</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing right, then use X offset $28.&#xD;
 Else store X offset -$28 in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68454</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add Link's X and the horizontal offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68450</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds Link's X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68457</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> AND the result with $F8, so it's aligned with a tile horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68459</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Assign that result to the leever's X coordinate and [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68463</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the leever's X [02] &gt;= Link's X [01], then swap [02] and [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68475</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B7B_Subtract</Label>
      <Comment> The point is to get the absolute distance between the two.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68480</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the absolute distance &gt;= $30, then return.&#xD;
 It means that the leever's X coordinate wrapped around&#xD;
 the left or right edge of the screen.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68495</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set animation counter to 1, so that it will roll over this frame&#xD;
 and pick up whatever the new value is for state 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68500</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the long timer to 2, meaning 20 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68506</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The leever has to face Link in order to move toward him.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68549</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67383</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitBoulderSet</Label>
      <Comment> Reset active boulder count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67388</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitBoulder</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67391</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitTektite</Label>
      <Comment> Set a random starting direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67379</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TektiteStartingDirs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67401</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Multiply the direction value by 4 to set the object timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68043</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Jumper_AnimateAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67842</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10902_CheckStunned</Label>
      <Comment> If we have the magic clock, or the monster is stunned; &#xD;
 then go animate, draw, and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67929</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10959_State1</Label>
      <Comment> State 1. Jumping.&#xD;
&#xD;
 Keep the object inside the bounds of the room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67849</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &lt;&gt; 0, go update the jump.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67853</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 0. On the ground.&#xD;
&#xD;
 If timer &lt;&gt; 0, then go animate, draw, and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67857</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State = 0 and object timer expired. Time to jump.&#xD;
&#xD;
 First, turn 1 step toward the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68046</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: [0D] ?&#xD;
 [0D] doesn't seem to be used.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68709</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C65_DrawObjectMirroredAndCheckCollisions</Label>
      <Comment> Params:&#xD;
 A: frame image&#xD;
 X: object index&#xD;
 [00]: object X&#xD;
 [01]: object Y&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68780</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10CAC_DrawObjectNotMirroredAndCheckLinkCollision</Label>
      <Comment> Params:&#xD;
 A: frame image&#xD;
 X: object index&#xD;
 [00]: object X&#xD;
 [01]: object Y&#xD;
 [0F]: flip horizontally&#xD;
&#xD;
 Returns:&#xD;
 [00]: 0 for Link slot&#xD;
 [06]: 1 if objects collide&#xD;
 [09]: 0 for Link damage type (none)&#xD;
 [0C]: 1 if objects collide&#xD;
 [034B]: ShotCollidesWithLink&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68076</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L109EC_DrawBoulder</Label>
      <Comment> Draw a boulder.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68055</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw a tektite.&#xD;
&#xD;
 If state = 1, then go draw frame image 1, and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68048</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is a boulder, then go animate, draw, check collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68081</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: The movement frame determines the frame image.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68087</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the boulder's Y &lt; $F0, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68093</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else the boulder is close enough to the bottom of the screen&#xD;
 to destroy it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1301</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ActiveBoulders</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68059</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object timer &lt; $21, go draw frame image 0, and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68065</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else cycle the animation counter, draw, and check collisions.&#xD;
&#xD;
 The movement frame determines the frame image.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68099</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Jumper_GetKind</Label>
      <Comment> Returns:&#xD;
 Y: 0: blue tektite&#xD;
    1: red tektite&#xD;
    2: boulder&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67860</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the facing direction has no horizontal component, then&#xD;
 find the horizontal direction toward the chase target.&#xD;
&#xD;
 Then combine it with the facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67880</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10928_SetStateJump</Label>
      <Comment> Set state 1 to jump.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67882</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1092A_SetUpJump</Label>
      <Comment> If reversal count &gt;= 2, then&#xD;
 1. invert the horizontal component of facing direction,&#xD;
    to face away from the chase target&#xD;
 2. reset the reversal count to 0.&#xD;
&#xD;
 This prevents a jumper from getting stuck in a corner.&#xD;
&#xD;
 For example, if a tektite's direction is down and right,&#xD;
 and jumps into the top right corner of the room:&#xD;
 1. The right room boundary is hit. So the direction is&#xD;
    automatically reversed to up and left.&#xD;
 2. The next frame, the top room boundary is hit.&#xD;
    The direction is reversed to down and right.&#xD;
&#xD;
 As you can see, an endless loop has been made.&#xD;
&#xD;
 DASM.EXPR: Jumper_ObjReversalCount&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68113</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Jumper_PointBoulderDownward</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67900</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1093C_FinishSetUpJump</Label>
      <Comment> If the object is a boulder, then make sure its facing direction&#xD;
 has a down vertical component.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67786</Address>
      <AddressType>PrgRom</AddressType>
      <Label>JumperYOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>11</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67903</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For the given direction, get the Y offset of the destination&#xD;
 of the jump.&#xD;
&#xD;
 Add it to the object's Y, and store this destination Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67914</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the starting speed, depending on the object type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68173</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Jumper_ResetVSpeedFrac</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67923</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the vertical speed low byte.&#xD;
 Then go animate, draw, and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67932</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object was blocked at the room boundary, then&#xD;
 increase boundary reversal count, and go set up another jump.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67945</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This step in the jump succeeded. So, reset the reversal count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67968</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the facing direction has a left component, then&#xD;
 subtract 1 from the object's X.&#xD;
&#xD;
 Else add 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67984</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If going up (negative v-speed high byte), then&#xD;
 go animate, draw, and check collisions.&#xD;
&#xD;
 DASM.EXPR: Jumper_ObjSpeedWholeY&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68129</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Jumper_MoveY</Label>
      <Comment> Params:&#xD;
 A: acceleration&#xD;
 Y: max speed high byte&#xD;
&#xD;
 [00] holds the acceleration</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68131</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] holds the max speed high byte</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the high speed byte to the Y coordinate.&#xD;
&#xD;
 DASM.EXPR: Jumper_ObjSpeedWholeY&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68140</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the acceleration to the speed fraction (low byte).&#xD;
&#xD;
 DASM.EXPR: Jumper_ObjSpeedFracY&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68144</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] acceleration</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68149</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Carry over to the high speed byte.&#xD;
&#xD;
 DASM.EXPR: Jumper_ObjSpeedWholeY&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68157</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> *Signed comparison*:&#xD;
 If the high speed byte &lt; high max speed byte, then return.&#xD;
&#xD;
 Note that this is not a general purpose signed comparison,&#xD;
 which would be more complicated. But it works because&#xD;
 the deviation from 0 of both values is small.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68161</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Limit the speed to the max speed.&#xD;
&#xD;
 DASM.EXPR: Jumper_ObjSpeedFracY&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67963</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Max speed 2 pixels going down</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67797</Address>
      <AddressType>PrgRom</AddressType>
      <Label>JumperYAccelerations</Label>
      <Comment> Logically, this array would be 33 bytes: 3 sets of 11 bytes,&#xD;
 1 byte for each 8-way direction&#xD;
&#xD;
 But because Boulder does not need the upward accelerations,&#xD;
 the elements for those are used for the starting speeds&#xD;
 at 04:88F2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>29</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67829</Address>
      <AddressType>PrgRom</AddressType>
      <Label>JumperYAccelerationBaseOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67950</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the base offset for the kind of jumper the object is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67956</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the acceleration by indexing with (base offset + direction).&#xD;
&#xD;
 Note that the set of accelerations of Boulder (the third set)&#xD;
 does not have $B elements like the tektites' sets.&#xD;
&#xD;
 Boulder does not need the upward accelerations.&#xD;
 So, the elements for those are used for the starting speeds&#xD;
 at 04:88F2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67989</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Going down. We have to consider the target Y.&#xD;
&#xD;
 If the absolute vertical distance to the target position &gt;= 3,&#xD;
 then go animate, draw, and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67992</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68002</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Distance &lt; 3. Go to state 0.&#xD;
&#xD;
 If the object is a boulder, then go reset timer, animate, draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68012</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else calculate a timer value.&#xD;
&#xD;
 t := (Random + $10)&#xD;
 if t &lt; $20 then&#xD;
   t := t - $40&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68024</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L109B8</Label>
      <Comment> If the object is a blue tektite, then go use this t.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68031</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> t := t AND $7F&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68033</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Random &lt; $A0, then go use this t.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> t := t AND $F&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67826</Address>
      <AddressType>PrgRom</AddressType>
      <Label>JumperStartSpeedsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6189</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> "Half-width draw" object attribute</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6196</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> "Ignore sprite attribute table" object attribute</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6193</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the object has the "Ignore sprite attribute table" attribute,&#xD;
 then don't look up sprite attributes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6146</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Link's right sprite record offset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67729</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If no empty monster slot is found, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67734</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the boulder monster type, and increase the number&#xD;
 of active boulders.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67744</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Give the boulder a random X coordinate in the same half&#xD;
 of the screen as the chase target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67748</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If chase target X &lt; $80, mask Random with $7F.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67757</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L108AD_RightHalf</Label>
      <Comment> Else make it &gt;= $80.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67761</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start at the top edge of the screen ($40).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67765</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the boulder set's timer to ((Random + 8) AND $1F).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66678</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateAndDrawCommonObject</Label>
      <Comment> Params:&#xD;
 A: new value for animation counter&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70532</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> QSpeed $20</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70534</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds qspeed $20</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70536</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in the first quest, return. Stalfos can't shoot in this quest.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70543</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Second quest.&#xD;
&#xD;
 If shoot timer = 0 and Random &lt; $F8, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70554</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1139A_PrepareToShoot</Label>
      <Comment> Save the qspeed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70557</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If temporarily invincible, then go reset shoot timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70570</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If stalfos does not want to shoot, then go set the qspeed.&#xD;
&#xD;
 DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70575</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else not temporarily invincible, and shoot timer = 0,&#xD;
 and wants to shoot.&#xD;
&#xD;
 Set shoot timer to $30.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70581</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If shoot timer = 0, then we're not shooting.&#xD;
 Go set the qspeed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70583</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If shoot timer &lt;&gt; $10, or we have the magic clock, or stunned;&#xD;
 then go reset qspeed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70594</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Try to shoot a sword shot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70601</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If failed, then go set the qspeed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70610</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L113D2_CheckResult</Label>
      <Comment> We jump here if shooting failed. Jump again to set the qspeed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70617</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L113D9_ZeroSpeed</Label>
      <Comment> Replace qspeed on the stack with 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70621</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L113DD_SetSpeed</Label>
      <Comment> Pop and set the qspeed (0 or the speed for stalfos).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70603</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 Else set timer to $80, and decrement [0437][X].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70612</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shooting succeeded.&#xD;
 Reset "wants to shoot" flag and the speed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70527</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Animation counter 8</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70564</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If shoot timer &gt;= 1, then decrement and go set shoot timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66581</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitBubble</Label>
      <Comment> QSpeed $40 (1 pixel a frame)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66913</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitGel</Label>
      <Comment> Gels that aren't split from a Zol begin in state 2.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67113</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gel_CheckCollisions</Label>
      <Comment> TODO:&#xD;
 CheckMonsterCollisions calls GetObjectMiddle which&#xD;
 overwrites [02] and [03]. So, I don't know why these are set here.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66959</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gel_Move</Label>
      <Comment> Go handle state 0 or 2 as appropriate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66926</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Gels are narrow. So, temporarily shift the X coordinate&#xD;
 4 pixels to the right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66928</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the original X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66955</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the original X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66937</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every two screen frames, switch between frame image 0 and 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66946</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10582</Label>
      <Comment> Set sprite attributes 3: normal sprite, palette row "level".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66951</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pass the frame image in A register.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67002</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L105BA_State0</Label>
      <Comment> State 0.&#xD;
&#xD;
 Immediately go to state 1 with QSpeed $20 (half a pixel a frame),&#xD;
 and 5 frame timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66966</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 1.&#xD;
&#xD;
 If the timer has not expired, then move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67014</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L105C6_State2</Label>
      <Comment> State 2.&#xD;
&#xD;
 Set QSpeed $40 (1 pixel a frame).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67019</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object timer &gt;= 5, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67025</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn rate $20</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67033</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is between squares, or timer &lt;&gt; 0; then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67040</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Choose a random index (0 to 3) to look up an amount of time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67045</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is Zol, then go use this index as is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67052</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else it's a gel. Add 4 to the index to look in the set of times&#xD;
 for Gel.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67062</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ZolGelDelays</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67056</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L105F0_SetDelay</Label>
      <Comment> Set a delay at a tile edge for the next time to move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67070</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gel_MoveSplitting</Label>
      <Comment> TODO:&#xD;
 Or call this BigShove like in Loz?&#xD;
&#xD;
 Returns:&#xD;
 C: 1 if blocked&#xD;
&#xD;
 Set the speed to maximum.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66973</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not blocked while moving, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66975</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1059F_Move</Label>
      <Comment> Blocked or timer expired.&#xD;
&#xD;
 Set X coordinate to ((X + 8) AND $F0).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66984</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Y coordinate to (((Y + 8) AND $F0) OR $D).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66994</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the grid offset, and go to state 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67075</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set moving direction to facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67079</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If at a tile boundary, then check for a tile collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67087</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If blocked by a tile, then return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67092</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10614_CheckRoomBoundary</Label>
      <Comment> If blocked by the room boundary, then return C=1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67098</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67101</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mask the grid offset with $F (to a square length),&#xD;
 and return C=0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66785</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZolState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66796</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZolState0_Wander</Label>
      <Comment> QSpeed $18 (0.375 pixels a frame)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66801</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZolState1_Shove</Label>
      <Comment> Move straight and fast until blocked. Then go to state 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66809</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZolState2_Split</Label>
      <Comment> We'll create two gels, but destroy the zol. So, increase&#xD;
 the object count by 1 only.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67016</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateNormalZolOrGel</Label>
      <Comment> Params:&#xD;
 A: qspeed&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66772</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 8 screen frames, switch between frame image 0 and 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66841</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreateChildGel</Label>
      <Comment> Child Gel object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66848</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shots start in state $10. But Child Gel needs to start in state 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66853</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Give the child the same grid offset as the parent.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66818</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the zol's direction is vertical, then set the first child gel's&#xD;
 direction to left, else up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66831</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the direction of the first gel.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66835</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the direction of the first gel.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66836</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the second child gel's direction to the opposite of the first one's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66860</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Zol_CheckCollisions</Label>
      <Comment> If not in state 0, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66864</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check collisions.&#xD;
&#xD;
 If killed, or got hit but didn't get hurt (invincibility timer = 0),&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66877</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If vertically aligned with the square grid, then&#xD;
 use a horizontal direction mask (3).&#xD;
&#xD;
 Keep in mind that most objects are aligned vertically when&#xD;
 the low nibble of their Y is $D.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66891</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If horizontally aligned with the square grid, then&#xD;
 use a vertical direction mask ($C).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66902</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Combine the two masks. At most one will be 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66904</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The point is to see if the zol is facing in a way that's aligned&#xD;
 with the grid.&#xD;
&#xD;
 If so, then go to state 1 to do a "big shove".&#xD;
 Else go to state 2, to immediately split in two.&#xD;
&#xD;
 Examples:&#xD;
 It would be aligned, if moving left along a tile as usual.&#xD;
 It would *not* be aligned, if while moving left, it was hit downward.&#xD;
 - The collision check routines would have made the zol&#xD;
   face in the direction of the weapon.&#xD;
 - See CheckMonsterWeaponCollision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66843</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use the shooting operation to create the gel object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70727</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitAquamentus</Label>
      <Comment> Aquamentus is invincible to boomerang and fire.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70732</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70737</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The monster goes at ($B0, $80).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71586</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Aquamentus_Move</Label>
      <Comment> The monster uses grid offset to mean distance remaining.&#xD;
 If there's more distance to cover, then go move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71591</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a random distance to move of 7 or $F pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71602</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Randomly head left or right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71609</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L117B9_Move</Label>
      <Comment> 7 of 8 screen frames return without moving.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71615</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the boss crossed the left limit, then&#xD;
 put it back at the left limit ($88), and face right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71631</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L117CF_CheckRightLimit</Label>
      <Comment> If the boss crossed the right limit, then&#xD;
 put it back at the right limit ($C7), and face left.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71643</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L117DB_SetRemainingDistance</Label>
      <Comment> Set the distance remaining to 7 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71584</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AquamentusSpeeds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71648</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L117E0_ApplySpeed</Label>
      <Comment> Use (direction - 1) to index the speeds.&#xD;
 This yields 0 for right, 1 for left.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71651</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the speed to the X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71659</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement the distance remaining.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71578</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckBossHitReaction</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77840</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayBossDeathCry</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65549</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayBossDeathCryIfNeeded</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65536</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayBossHitCryIfNeeded</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71727</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShootFireball55</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71663</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Aquamentus_Shoot</Label>
      <Comment> If the object timer &lt;&gt; 0, then&#xD;
 go modify fireballs that might still be flying.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71667</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The boss's object timer has expired. Time to shoot fireballs.&#xD;
&#xD;
 Set the timer to a random time, at least $70 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71698</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11812_SpreadOutFireballs</Label>
      <Comment> Make the fireballs spread out.&#xD;
&#xD;
 For each object slot from $B to 1:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71700</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11814_LoopObject</Label>
      <Comment> If type &lt;&gt; $55, loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71707</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every other screen frame, loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71712</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the displacement for this fireball to its Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71720</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11828_NextLoopObject</Label>
      <Comment> Bottom of the loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71723</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the boss's slot number.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71673</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shoot the middle fireball. Its vertical displacement is 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71681</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shoot the lower fireball. Its vertical displacement is 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71689</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shoot the upper fireball. Its vertical displacement is -1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71756</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Aquamentus_Draw</Label>
      <Comment> Every $10 screen frames, switch animation frames.&#xD;
 Each frame has 6 tiles (representing the top of 6 sprites).&#xD;
 The last tile of frame 0 is at index 5.&#xD;
 The last tile of frame 1 is at index $B.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71766</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11856</Label>
      <Comment> [0A] holds the current tile index in frame tile list.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71768</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each sprite, from 5 to 0, indexed by [0B]:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71772</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1185C_LoopSprite</Label>
      <Comment> Get current loop index from [0B].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71750</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AquamentusSpriteOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71744</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AquamentusSpriteOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71732</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AquamentusTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71774</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the current sprite's offset to the boss's X coordinate.&#xD;
 Store it in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71782</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the current sprite's offset to the boss's Y coordinate.&#xD;
 Store it in [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71790</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate sprite attributes:&#xD;
 [03] := (invincibility timer AND 3) XOR 3&#xD;
&#xD;
 If the boss is temporarily invincible, then&#xD;
 this makes it flash by cycling all the palette rows.&#xD;
&#xD;
 Otherwise invincibility timer = 0. So [03] becomes 3:&#xD;
 the attribute value for a normal sprite with palette row 7 (level).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71801</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up the tile for this sprite.&#xD;
 If it's not the first one (face), then go write the sprite record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71809</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else it's the first one (the face tile).&#xD;
 For timer &gt;= $20, use it as is ($CC). Otherwise, use tile $C0.&#xD;
&#xD;
 $CC/CD shows the closed mouth face.&#xD;
 $C0/C1 shows the open mouth face.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71827</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WriteBossSprite</Label>
      <Comment> Params:&#xD;
 A: tile&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
 [03]: sprite attributes&#xD;
&#xD;
 Save the tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71820</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
 Decrement tile index and loop index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71815</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Open mouth tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71835</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6575</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_EndWriteSprite</Label>
      <Comment> Params:&#xD;
 A: Y coordinate&#xD;
 Y: sprite record offset&#xD;
 [03]: sprite attributes&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70338</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitRope</Label>
      <Comment> Rope has $10 HP in quest 1, $40 HP in quest 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70363</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the original facing direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70404</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11304_CheckSpeed</Label>
      <Comment> Pop the original facing direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70364</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have the clock, or the monster is stunned, then don't move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70374</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Truncate the grid offset at $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70384</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L112F0</Label>
      <Comment> If not rushing (qspeed &lt;&gt; $60) and timer = 0, then&#xD;
 set timer to a random value up to $3F, and turn to face&#xD;
 an unblocked direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70405</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the facing direction has changed, then set qspeed to $20 (slow).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70414</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1130E</Label>
      <Comment> If qspeed &lt;&gt; $20 or grid offset &lt;&gt; 0, then go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70455</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11337_Animate</Label>
      <Comment> Animation counter $A</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70426</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the absolute horizontal distance between Link and the monster &gt;= 8,&#xD;
 then go see if the vertical distance is smaller.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70438</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Face up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70442</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But, if Link is down from the monster, then face down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70450</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11332_Rush</Label>
      <Comment> Make the rope rush (qspeed $60).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70495</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1135F_CheckVertical</Label>
      <Comment> If the absolute vertical distance between Link and the monster &gt;= 8,&#xD;
 then go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70507</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Face left.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70511</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But, if Link is right of the monster, then face right.&#xD;
 Either way, go increase speed and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70460</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing left, then flip horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70465</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] horizontal flipping</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70467</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Red sprite palette</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70472</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In the second quest, ropes always flash.&#xD;
 So, set sprite attributes to all the cycled palette rows.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70486</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11356_Draw</Label>
      <Comment> The frame image is based on the movement frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127455</Address>
      <AddressType>PrgRom</AddressType>
      <Label>_FaceUnblockedDir</Label>
      <Comment> Description:&#xD;
 Search for an unblocked direction. Set facing direction to it,&#xD;
 if one is found.&#xD;
&#xD;
 If not at a square boundary, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127460</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else reset [0E] to start the search for an unblocked direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127465</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the moving direction [0F] to the direction returned.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127467</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But quit if none was found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127469</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If blocked in this direction by a tile or the room boundary,&#xD;
 then loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127482</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the facing direction to the one found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70791</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDodongo</Label>
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70796</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Randomly face left or right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72443</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Anim_SetSpriteDescriptorLevelPaletteRow</Label>
      <Comment> Returns:&#xD;
 A: 3&#xD;
 [04]: left sprite attributes&#xD;
 [05]: right sprite attributes&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72324</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Dodongo_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71869</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71880</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState0_Move</Label>
      <Comment> If facing left, then push X offset 0 on the stack.&#xD;
 Else push X offset -$10, and add $10 to X coordinate.&#xD;
&#xD;
 We would like to use one set of coordinates only.&#xD;
 But movement would break down, if we did; because&#xD;
 Dodongo is so long.&#xD;
&#xD;
 So, when not facing left, we temporarily shift the&#xD;
 X coordinate to be closer to the other side of the monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71936</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState1_Bloated</Label>
      <Comment> DASM.EXPR: Dodongo_ObjBloatedSubstate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71922</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState2_Stunned</Label>
      <Comment> Take action depending on the value of stun timer:&#xD;
 0:     set stun timer to $20 &#xD;
 1:     go back to state 0&#xD;
 other: return&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71899</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn rate $20</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71907</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pop the offset and add it to the X coordinate.&#xD;
&#xD;
 This brings the X coordinate back to the unique value&#xD;
 that represents the position.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71913</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If X coordinate &lt; $20, then face right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71952</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState1_Bloated_Sub_Wait</Label>
      <Comment> Bloated timer =&gt;&#xD;
 0:     fall thru to set a new timer and check bomb hits&#xD;
 1:     go advance the substate&#xD;
 other: go decrement Bloated timer&#xD;
&#xD;
 DASM.EXPR: Dodongo_ObjBloatedTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72018</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState1_Bloated_Sub_Die</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72024</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState1_Bloated_Sub_End</Label>
      <Comment> Go to state 0.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72027</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset bloated substate.&#xD;
 DASM.EXPR: Dodongo_ObjBloatedSubstate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71992</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11938_AdvanceSubstate</Label>
      <Comment> Advance the substate.&#xD;
&#xD;
 DASM.EXPR: Dodongo_ObjBloatedSubstate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71960</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the bloated timer according to the substate.&#xD;
&#xD;
 DASM.EXPR: Dodongo_ObjBloatedSubstate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71866</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoBloatedWaitTimes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71969</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If substate &lt;&gt; 0, go decrement bloated timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71973</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Deactivate the bomb in the first bomb slot ($10).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72014</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Dodongo_DecrementBloatedTimer</Label>
      <Comment> Either way, decrement the bloated timer.&#xD;
&#xD;
 DASM.EXPR: Dodongo_ObjBloatedTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71980</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the number of bomb hits.&#xD;
&#xD;
 DASM.EXPR: Dodongo_ObjBombHits</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71995</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If new bloated substate &lt; 2, then go decrement the bloated timer.&#xD;
&#xD;
 DASM.EXPR: Dodongo_ObjBloatedSubstate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72002</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> New bloated substate &gt;= 2.&#xD;
&#xD;
 If bomb hits &lt; 2, then set bloated substate 4,&#xD;
 which will transition to state 0 (moving).&#xD;
&#xD;
 Note that if the bomb hits &gt;= 2, then:&#xD;
 - If new substate = 2, then substate 2 will wait,&#xD;
   and then transition to substate 3.&#xD;
 - If new substate = 3, then the next frame the monster will die.&#xD;
&#xD;
 DASM.EXPR: Dodongo_ObjBombHits</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72082</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &lt;&gt; 2 (stunned), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72088</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Take out the bit for the sword in the invincibility mask.&#xD;
 Check for collision with Link's sword.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72074</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Dodongo_CheckCollisionsStandardSize</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72067</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Drop a bomb from this fight.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72031</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Dodongo_CheckCollisions</Label>
      <Comment> Check for collisions using a regular monster size.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72034</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If harmed, then go die.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing vertically, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72045</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the X coordinate.&#xD;
 Then add $10 to check the right-hand side.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72056</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72059</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not harmed, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72121</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Dodongo_CheckBombHit</Label>
      <Comment> If state &lt;&gt; 0 (not moving), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72125</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing vertically, then store (X + 8) in [00].&#xD;
 Else store (X + $10).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72140</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store (Y + 8) in [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72146</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Only check the first bomb slot ($10).&#xD;
&#xD;
 Store the bomb's (X + 8) in [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72155</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the bomb's (Y + 8) in [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72162</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But, if there's no bomb, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72167</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the bomb has not exploded (state $12), then&#xD;
 go see if Dodongo will eat it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72171</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object in the slot is actually a fire, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72258</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11A42_LoopAxis</Label>
      <Comment> Subtract the bomb's coordinate from the boss's,&#xD;
 The loop index determines the coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72175</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The bomb already blew up.&#xD;
 If the dust cloud is in range of the monster,&#xD;
 then set stunned state (2).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72242</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Dodongo_IsBombInRange</Label>
      <Comment> Params:&#xD;
 Y: limit index (0 for dust cloud, 1 for the bomb)&#xD;
 [00]: monster hotspot X&#xD;
 [01]: monster hotspot Y&#xD;
 [02]: bomb hotspot X&#xD;
 [03]: bomb hotspot Y&#xD;
&#xD;
 Returns:&#xD;
 A: 0 if the bomb is in range of the monster&#xD;
 Z: 1 if the bomb is in range of the monster&#xD;
 [04]: horizontal distance&#xD;
 [05]: vertical distance&#xD;
&#xD;
 Store the positive limit in [06], and the negative one in [07].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72256</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each coordinate (Y/X), from 1 to 0, indexed by Y register:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72265</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the distance &gt;= positive offset, or &lt; negative offset;&#xD;
 then loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72269</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [07] negative offset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The distance is close enough in this axis.&#xD;
&#xD;
 Store the distance in this axis in [05] or [04],&#xD;
 depending on the loop index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72276</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shift [08] right, because we're in range in this axis.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72281</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If close enough in both axes, then [08] will be 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72252</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set [08] to 3. It will be shifted right once for each axis that&#xD;
 the bomb is near enough the monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72238</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoBombPositiveLimits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72240</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoBombNegativeLimits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72187</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Dodongo_TryEatBomb</Label>
      <Comment> Try to eat the bomb.&#xD;
&#xD;
 If the bomb is not in range of the monster, then return.&#xD;
&#xD;
 This is a coarse test, to see if the bomb is over any part of the monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72194</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Will loop from 1 to 0, indexed by [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72198</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shift facing direction right 1 to make an index. Value 3 is unused.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72202</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now we have to see if it's near the mouth. But the mouth&#xD;
 position depends on the orientation of the monster.&#xD;
&#xD;
 Start with the horizontal distance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72214</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add $A to the index to look into the second set for vertical limits.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72204</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11A0C_LoopLimit</Label>
      <Comment> Look up the limits for the given direction.&#xD;
&#xD;
 If the distance from the bomb &lt; negative limit,&#xD;
 or &gt;= positive limit, then return.&#xD;
&#xD;
 Note that these are simple signed comparisons that work,&#xD;
 because the operands are in a small range.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72219</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
&#xD;
 Load the vertical distance for the next iteration.&#xD;
 Decrement loop counter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72225</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we get here, then the bomb was within range of the mouth.&#xD;
 Go to state 1 (bloated).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72227</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Deactivate the bomb, and reset the bloated substate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72101</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoMouthNegativeLimits0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72106</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoMouthPositiveLimits0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72327</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make a 5-way direction index out of the facing direction&#xD;
 by shifting right once, and store it in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state = 0, go handle animating the two frames of this state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72341</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State = 1. Bloated.&#xD;
&#xD;
 In substate 0, go animate as usual for walking.&#xD;
&#xD;
 DASM.EXPR: Dodongo_ObjBloatedSubstate&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72336</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &gt; 1, then the monster is stunned (state 2).&#xD;
 So, go switch frames every $20 screen frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72374</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11AB6_DrawWalkingFast</Label>
      <Comment> Every 8 screen frames, switch between 2 animation frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72363</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11AAB_DrawFaded</Label>
      <Comment> In bloated substates 2 and 3:&#xD;
 Every two screen frames, don't draw for two frames. Return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72354</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 1, substate 1&#xD;
&#xD;
 Add $14 to the frame image index to index into the bloated&#xD;
 frame images and H-flips.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72346</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in bloated substates 2 or 3 (last wait or die), then&#xD;
 go fade the boss; so that some frames are not drawn.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72387</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11AC3_PrepareToDraw</Label>
      <Comment> Start preparing sprites.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72419</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing vertically, then return. There's no other side to draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72425</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else draw the right side.&#xD;
&#xD;
 Keep the Y coordinate in [01].&#xD;
 But, store (X + $10) in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72382</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For animation frame 1, add 5 to the index in Y register,&#xD;
 in order to index into the second set of frame image numbers.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72390</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the frame image index (not frame image number).</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72417</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11AE1_DrawRightSide</Label>
      <Comment> Restore the frame image index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72284</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoFrameImages</Label>
      <Comment> Two sets of frame image numbers: 1 set for each animation frame.&#xD;
 Each set contains 5 frame image numbers, indexed by direction.&#xD;
&#xD;
 But these are not typical direction indexes. Instead a&#xD;
 5-way index is used.&#xD;
 A direction shifted right once becomes a 5-way index.&#xD;
 The fourth element is unused.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72294</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoFrameHFlips</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72435</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> XOR'ing the low bit swaps the left and right frame numbers.&#xD;
&#xD;
 So, if we had animation frame 1, direction left:&#xD;
 - 5-way direction index = 1 (2 &gt;&gt; 1)&#xD;
 - frame image index = 6 (1 + 5)&#xD;
   (dodongo/walk/right/right half/anim frame 1)&#xD;
 - frame number = 3 (look up element 6 in frame image array)&#xD;
 - horizontal flip = true (loop up element 6 in H-flip array)&#xD;
&#xD;
 So, 3 would have been the frame number used above for&#xD;
 the left side.&#xD;
&#xD;
 Here, the frame number is 2 (3 XOR 1), meaning&#xD;
 (dodongo/walk/right/left half/anim frame 1). The horizontal&#xD;
 flipping flag is unchanged. So, this left half frame is shown correctly&#xD;
 on the right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72392</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the horizontal flipping and frame image number for this frame image.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72395</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] horizontal flipping</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72400</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Frame image numbers 7 and 9 are vertical bloated frame images.&#xD;
 They are drawn mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72414</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11ADE_DrawLeftSide</Label>
      <Comment> No other frame images are mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72304</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoFrameImagesBloated</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoFrameHFlipsBloated</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73090</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateVireState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73062</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11D66_SplitUp</Label>
      <Comment> As with Zol, we'll destroy one monster, and make two.&#xD;
 So, increase object count by 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73149</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckVireCollisions</Label>
      <Comment> If state &lt;&gt; 0, then the vire's going to split up.&#xD;
 So, no need to check collisions. Return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73169</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawVire</Label>
      <Comment> Animation counter $A</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73115</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateVireState0</Label>
      <Comment> Turn rate $80</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73099</Address>
      <AddressType>PrgRom</AddressType>
      <Label>VireJumpOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73120</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have the clock, or monster is stunned; then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73127</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If going vertically, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the absolute value of the grid offset (0 to $F);&#xD;
 so it becomes an index into the jump offset array.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73140</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the vertical offset; so that as the vire moves left or right,&#xD;
 it jumps.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73174</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The movement frame is the fram image number, unless facing up.&#xD;
 In this case, add 2 to the frame image.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73156</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it was killed, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73161</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If temporarily invincible, then it was harmed.&#xD;
 Advance the state to split up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73050</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &gt;= 2, then go split up into 2 keeses.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73077</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Red Keese object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73068</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Two times, look for an empty monster slot.&#xD;
 If one is found, then use the "shoot" operation to create a red keese.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73070</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11D6E_LoopMakeKeese</Label>
      <Comment> Save loop counter.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73084</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11D7C_NextLoopMakeKeese</Label>
      <Comment> Restore loop counter.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70914</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlMoldormFlight</Label>
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70812</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the magic clock is missing, then move around (using the flying mechanism).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70823</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L114A7</Label>
      <Comment> Draw with sprite attributes: normal, red palette row&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70626</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMoldorm</Label>
      <Comment> Loop to make 10 moldrom segments, from 9 to 0, indexed by Y register.&#xD;
 Object slots $A to 1 will be used.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70628</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L113E4</Label>
      <Comment> Start at position ($80, $70).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70638</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start with no direction, no deferred bounce direction,&#xD;
 and ready to update.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70652</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy object attributes from the first monster slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70674</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> All segments are considered Moldorm.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70679</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70658</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy HP from the first monster slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70682</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Choose a random 8-way direction for the head segments&#xD;
 in slots 4 and 9.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70692</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Also store the current direction as the old direction.&#xD;
 DASM.EXPR: Moldorm_ObjOldDir+5</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70705</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Also store the current direction as the old direction.&#xD;
 DASM.EXPR: Moldorm_ObjOldDir+10</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70716</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The maximum speed for Moldorm is $80.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70721</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Why 8 instead of 10?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6545</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteSprite</Label>
      <Comment> Params:&#xD;
 A: tile number&#xD;
 X: object index&#xD;
 [03]: sprite attributes&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70827</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fireball tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70834</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70837</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the timer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70841</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the timer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70844</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70847</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this segment is still alive, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70852</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This segment is dead. We'll swap the tail segment with this&#xD;
 dead segment. This way, moldorm heads are always rooted&#xD;
 in slots 5 and $A; and the segments are continguous.&#xD;
&#xD;
 Start by setting the HP for this dead segment's slot to $20.&#xD;
&#xD;
 Note that this is not a true swap, because the tail's HP&#xD;
 might be less than $20.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70860</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look for the tail segment, starting from the low end&#xD;
 of the chain that this dead segment belongs to.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130187</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle end metastates (4 and $14) specially.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70876</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> I don't know why the object timer of the tail segment that will&#xD;
 be made dead is set to $11. By setting its object type to $5D&#xD;
 below, its metastate will become $10 -- dying/dead. From&#xD;
 there, the object timer is set to 6.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70881</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the invincibility timer, X, and Y from the original dead&#xD;
 segment to the tail segment.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70897</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tail segment found is also a head, then&#xD;
 the last segment has died. Return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70832</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check collisions, but never let them interfere with movement.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70905</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else finish swapping the segments.&#xD;
 Set the tail segment's type to the dead dummy object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70910</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the metastate of the current segment, so that it comes&#xD;
 back to life.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70928</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Moldorm_Chase</Label>
      <Comment> If the segment is not a head (slot 5 or $A), then return.&#xD;
 Only the head controls the movement direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70955</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Moldorm_Wander</Label>
      <Comment> If the segment is not a head (slot 5 or $A), then return.&#xD;
 Only the head controls the movement direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70936</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11518</Label>
      <Comment> Chase while flying, as usual.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70963</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11533</Label>
      <Comment> Turn randomly while flying, as usual.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70950</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the next lower slot's direction &lt;&gt; 0, then&#xD;
 go propagate direction changes down the chain.&#xD;
&#xD;
 But you had to have propagated directions once for the&#xD;
 next lower direction to be set. How does it happen?&#xD;
&#xD;
 Within a flyer state, the flying routines turn the flyer&#xD;
 and set the object timer to $10 several times. After any of&#xD;
 those times will the test succeed.&#xD;
&#xD;
 When a flying state ends, timer will be 0, triggering the code&#xD;
 in this block to set the timer to $10, and try to propagate&#xD;
 directions.&#xD;
&#xD;
 But this is also the case the first time here.&#xD;
&#xD;
 So, I believe that the point of this test is to delay moving&#xD;
 the lower (not head) segments when starting out.&#xD;
&#xD;
 DASM.EXPR: ObjDir-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71033</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set 8 turns for the next flying state.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71020</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_MoldormDecideState</Label>
      <Comment> TODO:&#xD;
 Why not call it Moldorm_DecideFlyingState? Same for others.&#xD;
&#xD;
 If Random &gt;= $40, go to flying state 2, else 3.&#xD;
&#xD;
 Set up 8 turns.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70970</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Moldorm_PropagateDirs</Label>
      <Comment> If timer &lt;&gt; $10 (rearmed in this frame), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70976</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Timer = $10.&#xD;
&#xD;
 If deferred bounce direction &lt;&gt; 0, then&#xD;
 assign it to facing direction, and reset deferred bounce direction.&#xD;
&#xD;
 DASM.EXPR: Moldorm_ObjBounceDir</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70988</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1154C_SkipBounce</Label>
      <Comment> Will loop 4 times, indexed by [00], once for each segment.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70992</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Starting from the last slot of this moldorm chain (0 or 5):&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71000</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11558_Loop</Label>
      <Comment> Copy old direction from a higher slot to the lower one;&#xD;
 and to the lower one's facing direction.&#xD;
&#xD;
 DASM.EXPR: Moldorm_ObjOldDir+2</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71009</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
 Increment segment index.&#xD;
 Decrement loop counter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71014</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy current direction to old direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70966</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> After every turn, the common flyer routines set timer to $10.&#xD;
 This can be used as a signal for moldorm to propagate&#xD;
 direction changes down the chain.&#xD;
&#xD;
 Between each turn, timer &lt;&gt; $10.&#xD;
&#xD;
 At the end of the delay after the last turn, timer = 0.&#xD;
 This is a signal that that flying state ended, and a new one&#xD;
 must be chosen. Also, because a flying interval ended ($10 frames),&#xD;
 we can propagate direction changes again; and start&#xD;
 a new flying interval by setting timer to $10. This will make&#xD;
 the next flying state delay that amount of time before turning&#xD;
 the first time.&#xD;
&#xD;
 Here and now, if timer has expired, then go decide a new flying state,&#xD;
 arm the timer again, and shift directions down the chain.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If timer has not expired, then&#xD;
 go see if it's time to propagate direction changes down the chain.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70946</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> $10 screen frames</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70943</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Moldorm_ChangeFlyingState</Label>
      <Comment> Timer = 0. Choose a new flying state, and arm the timer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70708</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set minimum number of turns 1 for flying states.&#xD;
&#xD;
 By setting this, the first time that a flight control routine&#xD;
 (Flyer_Chase, Flyer_Wander) is called and returns;&#xD;
 that flying state will immediately end, and object timer&#xD;
 will be left 0: ready for moldorm to decide a flying state&#xD;
 randomly and set timer to $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70710</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjTurns+5</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70713</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjTurns+10</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70664</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start with flying speed $80, and in flying state 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73996</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitManhandla</Label>
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74277</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Manhandla_CheckCollisions</Label>
      <Comment> Check collisions, but never let them interfere with movement.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74001</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Choose a random 8-way direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74011</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For 5 segments, from 4 to 0, indexed by Y register:&#xD;
 Object slots 5 to 1 are accessed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74013</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1211D</Label>
      <Comment> Copy the direction from the base segment.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74018</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> All segments are considered Manhandla.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74023</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the segment invincible to fire and boomerang.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74034</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> All segments start out autonomous, and can update immediately.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74042</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy object attributes and HP from the base segment.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74054</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up the offset of this segment. Add it to the position of&#xD;
 the base segment.&#xD;
&#xD;
 The position of the base segment in slot 5 is calculated first.&#xD;
 Its base position is the spawn position.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74072</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set low speed byte $80.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74028</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and store the base frame image and sprite attributes byte.&#xD;
&#xD;
 While updating, the low bit will be flipped on and off&#xD;
 for each animation frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73989</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ManhandlaSegmentOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73991</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ManhandlaSegmentOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74123</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If no segment just died, then skip increasing the speed.&#xD;
&#xD;
 DASM.EXPR: Manhandla_SegmentJustDied</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74128</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each segment from 4 to 0, indexed by Y register:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74130</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12192_LoopSegment</Label>
      <Comment> Add $80 to the low speed byte of this segment.&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjSpeedFrac+1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74139</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Carry to the high speed byte of this segment.&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjSpeedWhole+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74150</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the "a segment just died" flag.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74373</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Manhandla_SetAllSegmentsDirection</Label>
      <Comment> Params:&#xD;
 A: direction&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74155</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L121AB_BounceIfNeeded</Label>
      <Comment> If there's a bounce direction, then assign it to the facing&#xD;
 direction of all segments.&#xD;
&#xD;
 DASM.EXPR: Manhandla_BounceDir&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74163</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L121B3_TurnIfNeeded</Label>
      <Comment> If object timer = 0, then&#xD;
 1. set timer to $10&#xD;
 2. randomly choose to turn toward Link or turn randomly&#xD;
 3. assign the base's direction to all segments and bounce direction&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74188</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L121CC_MoveBase</Label>
      <Comment> If this segment is the base, then remember the&#xD;
 facing direction before moving.&#xD;
&#xD;
 This is a continuation of the code above,&#xD;
 which is also only for the base.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74382</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Manhandla_Move</Label>
      <Comment> Implement a way of manifesting the fractional part of the speed&#xD;
 in the movement.&#xD;
&#xD;
 Let's say the 16-bit speed is $0140. If we only took the high&#xD;
 byte to add to the coordinates, then the effective speed would&#xD;
 be 1 pixel a frame instead of 1.25.&#xD;
&#xD;
 By keeping a speed accumulator, we can turn speed $0140&#xD;
 into 1.25 pixels a frame over four frames, using this calculation:&#xD;
&#xD;
   (SA=speed accumulator, SH=speed high, SL=speed low)&#xD;
&#xD;
   SA := SA + (SL AND $E0)&#xD;
   [03] := SH + carry&#xD;
&#xD;
 AND'ing the low speed byte with $E0 isn't strictly needed.&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjSpeedFrac&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74203</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction changed after moving, then&#xD;
 copy it to the bounce direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74213</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L121E5</Label>
      <Comment> Store in [00] the animation frame that you get from the frame accumulator:&#xD;
 frame := ((accumulator AND $10) &gt;&gt; 4&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjFrameAccum&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74479</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Manhandla_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73984</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ManhandlaBaseFrameImagesAndAttrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74224</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the animation frame bit into the "frame image and&#xD;
 sprite attributes" byte.&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74234</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this segment is the base, then go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74238</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the old and new "frame image and sprite attributes" variables&#xD;
 are the same, then go draw.&#xD;
&#xD;
 The previous frame value begins with value 0, because all&#xD;
 room data was reset on entry.&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74246</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the new value to the old variable, so that they're the same.&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjPrevFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74249</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If animation frame = 1, then go draw.&#xD;
&#xD;
 The low bit of "frame image and sprite attributes" byte&#xD;
 represents the animation frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74252</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the random value for the next slot up &lt; $E0,&#xD;
 or there's an object in slot 7; then go draw.&#xD;
&#xD;
 The second condition keeps the number of fireballs &lt;= 4.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74263</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Fireball object type $56</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74241</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjPrevFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74279</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74282</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the timer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74286</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the timer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74289</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74292</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Don't let the base segment be temporarily invincible.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74304</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If still alive, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74312</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Don't let the base die on its own.&#xD;
 If this is the base, then reset metastate, and return.&#xD;
&#xD;
 The base only dies once the last hand dies.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74322</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12252_CountHands</Label>
      <Comment> At this point, we have a hand that just died.&#xD;
&#xD;
 For each hand, from 3 to 0, indexed by 0:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74324</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Count how many are allocated.&#xD;
 This includes the current dead one, and the other living ones.&#xD;
 Store the count in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74340</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrease by 1, to account for the current dead one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74342</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the count &gt;= 0 (signed comparison), then&#xD;
 go change this hand object to the dead dummy.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74346</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1226A</Label>
      <Comment> The last hand died. So, kill the base.&#xD;
&#xD;
 Change the base segment's object type to the dead dummy.&#xD;
 Immediately set metastate to $10, instead of waiting for&#xD;
 the dead dummy object's update routine to do it.&#xD;
 Also set its timer to $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74361</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12279_FlagHandDied</Label>
      <Comment> Set the "segment just died" flag.&#xD;
&#xD;
 DASM.EXPR: Manhandla_SegmentJustDied&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74365</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1227D_MakeDeadDummy</Label>
      <Comment> Dead dummy object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74387</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the low speed byte to speed accumulator.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74394</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Assign (high speed byte + carry) to [03].&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74401</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change coordinates by the speed amount/offset in [03]&#xD;
 according to the direction.&#xD;
&#xD;
 Start with a mask of $A1 in [02]:&#xD;
 - low nibble represents the right direction&#xD;
 - high nibble is used to set or clear carry as we go along&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74405</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction has a right component (1), then add offset to X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74418</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L122B2_Left</Label>
      <Comment> If direction has a left component (2), then subtract offset from X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74432</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L122C0_Down</Label>
      <Comment> If direction has a down component (4), then add offset to Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74446</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L122CE_Up</Label>
      <Comment> If direction has an up component (8), then subtract offset from Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74460</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L122DC_IncFrameAccum</Label>
      <Comment> To the frame accumulator, add:&#xD;
 - a random value between 0 and 3&#xD;
 - [03] the effective high speed byte calculated for this screen frame&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74420</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 7 of mask $A1 sets Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74434</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 6 of mask $A1 clears Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74448</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 5 of mask $A1 sets Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74476</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 I don't see why this is needed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74482</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Push the "frame image and sprite attributes" value.&#xD;
&#xD;
 DASM.EXPR: Manhandla_ObjFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74486</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 7 is the sprite attribute for vertical flipping, and can be&#xD;
 passed along as is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74488</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use blue palette row.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74493</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the "frame image and sprite attributes" value again.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74495</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If bit 6 is set, then enable horizontal flipping in [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74501</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12305</Label>
      <Comment> Pop the "frame image and sprite attributes" value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74502</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the low nibble = 2 or 3, then go draw not mirrored.&#xD;
 These are the 2 frame images of the horizontal hands.&#xD;
&#xD;
 Else draw the base and vertical hands mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66630</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the bubble is not type $2B that temporarily blocks the sword;&#xD;
 then subtract $2B from the type to get 1 or 2, which&#xD;
 represent the blue and red palette rows in sprite attributes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66640</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10450_Flash</Label>
      <Comment> Else make it flash by cycling all the palette rows.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66647</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Animation counter 1 to switch animation frames every screen frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66655</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If no collision, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66659</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not type $2B (flashing), then go block or unblock the sword&#xD;
 depending on the bubble type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66671</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1046F_BlockOrUnblock</Label>
      <Comment> Subtract $2C from the type to get the value for blocking: 0 or 1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SwordBlockedLongTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66666</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else the flashing bubble blocks the sword temporarily.&#xD;
 Set a long timer to $10 ($A0 frames) for this purpose.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72742</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_PolsVoice_DrawAndCheckCollisions</Label>
      <Comment> Animation counter 8</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72753</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pols Voice is invincible to everything but the sword,&#xD;
 during normal collision detection.&#xD;
&#xD;
 The arrow is a special case.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72614</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11BA6</Label>
      <Comment> If we have the magic clock, or is stunned, then&#xD;
 go draw and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72621</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every odd screen frame, go straight to drawing&#xD;
 and checking collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72570</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PolsVoiceWalkSpeedsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72893</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PolsVoice_MoveX</Label>
      <Comment> Returns:&#xD;
 Y: facing direction - 1 (so, 0 to 7)&#xD;
&#xD;
 Add the X offset for the current direction to the X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72629</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If state &lt;&gt; 0, then the monster is jumping.&#xD;
 Go handle vertical movement.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72639</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11BBF_State0</Label>
      <Comment> State 0. Walking.&#xD;
&#xD;
 If grid offset = 0, then no more distance to cover.&#xD;
 So, go change to state 1 -- jumping.&#xD;
&#xD;
 DASM.EXPR: ObjRemDistance&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72580</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PolsVoiceWalkSpeedsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72647</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move vertically.&#xD;
 Add the Y offset for the current direction to the Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72644</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement grid offset / distance remaining.&#xD;
&#xD;
 DASM.EXPR: ObjRemDistance&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72889</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Remember the tile that the monster is over.&#xD;
&#xD;
 DASM.EXPR: PolsVoice_ObjLastTile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72886</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return C=0 if walkable.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72878</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PolsVoice_GetCollidingTile</Label>
      <Comment> Returns:&#xD;
 C: 0 if walkable&#xD;
 [041F][X]: tile&#xD;
&#xD;
 Use offset 0 from the hotspot.&#xD;
&#xD;
 TODO: But where is [0F] set?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72655</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11BCF_CheckWalkability</Label>
      <Comment> If the square the monster is over is walkable, then&#xD;
 go draw and check object collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72850</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's an unwalkable tile at the usual hotspot, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72852</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the original object X, and temporarily add $E to it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72860</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the original Y, and temporarily add 6 to it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72868</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check again at relative hotspot ($E, $E).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72871</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the original coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72847</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PolsVoice_IsSquareWalkable</Label>
      <Comment> Returns:&#xD;
 C: 0 if walkable&#xD;
 [041F][X]: tile&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72660</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the unwalkable tile is a block, or &gt;= $F4 (water, screen edge bricks),&#xD;
 then go change to state 1.&#xD;
&#xD;
 DASM.EXPR: PolsVoice_ObjLastTile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72673</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else blocked by something else.&#xD;
&#xD;
 If facing horizontally, then go flip the direction, move, and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72679</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else facing vertically. Flip the direction.&#xD;
 Go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72688</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11BF0_FlipHorizontally</Label>
      <Comment> Facing horizontally. Flip the direction.&#xD;
 Move two pixels, and go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72701</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11BFD_SetState1</Label>
      <Comment> If already in state 1, then go draw and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72705</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to state 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72707</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract 1 from facing direction to make an index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72710</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Y coordinate &lt; $78, make the index 3 for down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72718</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11C0E</Label>
      <Comment> If Y coordinate &gt;= $A8, make the index 7 for up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72724</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11C14</Label>
      <Comment> Set the vertical speed for the beginning of the jump.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72730</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up the Y offset for the current direction.&#xD;
 Add it to object Y to set the destination Y of the jump.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72739</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn the index into a direction again by adding 1.&#xD;
 Store the facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72762</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePolsVoiceState1_Jumping</Label>
      <Comment> Add acceleration $38 to low speed byte (vertical).&#xD;
&#xD;
 DASM.EXPR: PolsVoice_ObjSpeedFrac&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72771</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add Carry to high speed byte (vertical).&#xD;
&#xD;
 DASM.EXPR: PolsVoice_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72779</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add high speed byte to Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72784</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the speed is still negative, then return.&#xD;
&#xD;
 DASM.EXPR: PolsVoice_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72789</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Y coordinate still &lt; target Y, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72796</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else reached the destination. Go to state 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72800</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset 16-bit vertical speed.&#xD;
&#xD;
 DASM.EXPR: PolsVoice_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72806</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Choose a random direction to face in.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72816</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Randomly set distance-to-move to $30 or $70.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72825</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Align the monster with a square horizontally.&#xD;
&#xD;
 If in the left half of a square, align with that square.&#xD;
 If in the right half, align with the next square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72834</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Align the monster with a square vertically.&#xD;
&#xD;
 If in the top half of a square, align with that square.&#xD;
 If in the bottom half, align with the next square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72841</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make sure the lower nibble of Y is $D as usual.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72822</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjRemDistance</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72606</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PolsVoiceDirections</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72626</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise move horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72598</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PolsVoiceDestinationYOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72590</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PolsVoiceInitialJumpSpeeds</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70746</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDigdogger1</Label>
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70777</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDigdogger2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70780</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 Change object type to $38 (Digdogger1).&#xD;
&#xD;
 Probably to simplify a test.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70785</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set child count of 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70771</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set child count of 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70751</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a random 8-way direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70761</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set low speed byte to $3F.&#xD;
 This assumes that the high byte is 0 from when the room&#xD;
 was reset; or will bet set during digdogger split-up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71159</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the flute was used, then go start splitting up,&#xD;
 or handling a child digdogger.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71352</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Digdogger_SlowDown</Label>
      <Comment> Subtract 1 from 16-bit speed.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71184</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Digdogger_Move</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71403</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Digdogger_Move</Label>
      <Comment> This calculation is the same one used in Manhandla to&#xD;
 manifest the fractional speed over several frames.&#xD;
&#xD;
 To summarize, the formula is:&#xD;
&#xD;
   (SA=speed accumulator, SH=speed high, SL=speed low)&#xD;
&#xD;
   SA := SA + (SL AND $E0)&#xD;
   [03] := SH + carry&#xD;
&#xD;
 See 04:A28E Manhandla_Move.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71408</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the low speed byte to speed accumulator.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71415</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Assign (high speed byte + carry) to [03].&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71422</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change coordinates by the speed amount/offset in [03]&#xD;
 according to the direction.&#xD;
&#xD;
 Start with a mask of $A1 in [02]:&#xD;
 - low nibble represents the right direction&#xD;
 - high nibble is used to set or clear carry as we go along&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71426</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction has a right component (1), then add offset to X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71439</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1170F_Left</Label>
      <Comment> If direction has a left component (2), then subtract offset from X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71441</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 7 of mask $A1 sets Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71453</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1171D_Down</Label>
      <Comment> If direction has a down component (4), then add offset to Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71455</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 6 of mask $A1 clears Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71467</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1172B_Up</Label>
      <Comment> If direction has an up component (8), then subtract offset from Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71469</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 5 of mask $A1 sets Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71496</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Digdogger_Draw</Label>
      <Comment> 6 animation frames a screen frame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71187</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Digdogger_DrawAndCheckCollisions</Label>
      <Comment> If this is a child, then finish updating this little digdogger.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjIsChild</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71201</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11621_CheckBigDigdoggerCollisions</Label>
      <Comment> Save the original coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71247</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the original coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71207</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the index of the current part.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71212</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1162C_LoopCornerCollision</Label>
      <Comment> Digdogger is big, but room boundary checks and&#xD;
 object collision checks assume a 16x16 monster or smaller.&#xD;
 Therefore, we have to check these things four times,&#xD;
 in different corners of the boss.&#xD;
&#xD;
 Loop 4 times, from 0 to 3.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjCurPart</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71039</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DigdoggerCornerOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71043</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DigdoggerCornerOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71215</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change the coordinates to one corner.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71231</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check the room boundary and object collisions in this temporary location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71237</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increase the loop index, and loop again until it = 4.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjCurPart</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71256</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Digdogger_DrawAsLittle</Label>
      <Comment> Save the original coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71303</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the original coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71262</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 8 to Y and X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71274</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the child flag and object type.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjIsChild</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71295</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the child flag and object type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71282</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change object type to $18 (Little Digdogger),&#xD;
 and child flag to 1, in order to draw as a little digdogger.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71167</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object timer has expired, then set it to $10,&#xD;
 and randomly choose to turn toward Link or randomly.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71320</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Digdogger_SpeedUp</Label>
      <Comment> Add 1 to 16-bit speed.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71310</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Digdogger_ChangeSpeed</Label>
      <Comment> DASM.EXPR: Digdogger_ObjSpeedFlag</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71328</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L116A0</Label>
      <Comment> If the 16-bit speed has not reached the 16-bit target speed, then return.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71344</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set speed flag to 1 meaning decelerate.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjSpeedFlag</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71347</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set target speed to $0040 (or $0140 if this is a child).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71365</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L116C5</Label>
      <Comment> If the 16-bit speed has not reached the 16-bit target speed, then return.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71381</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set speed flag to 0 meaning accelerate.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjSpeedFlag</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71384</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set target speed to $0080.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71394</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But if this is a child, then make the target speed $0180.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjIsChild</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71047</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Digdogger_AfterFlute</Label>
      <Comment> Params:&#xD;
 Y: flute state&#xD;
&#xD;
 If flute state = 2, go switch between big and little appearance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71050</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flute state = 1.&#xD;
&#xD;
 If this is a child digdogger, then go turn and move as usual.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjIsChild</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71055</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set object timer to $40, and increase flute state to 2.&#xD;
 Then go check collisions as a big digdogger.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71065</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11599_SplitUp</Label>
      <Comment> If the timer = 0, then skip the block below, and go split up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71069</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 8 frames, switch between behaving as a big and little digdogger.&#xD;
&#xD;
 TODO:&#xD;
 But is this possible, given the following?&#xD;
 a. all object timers run concurrently&#xD;
 b. all object updates are paused until the flute timer expires&#xD;
 c. the flute timer lasts longer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71086</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L115AE_MakeChildren</Label>
      <Comment> Decrement flute state to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71089</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop to make a number of child digdoggers.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1287</Address>
      <AddressType>InternalRam</AddressType>
      <Label>ChildDigdoggerCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71092</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] is the loop counter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71094</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Replace the object count with the number of children.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71097</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the current object index in X register.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the current object index in X register.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71099</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L115BB_LoopMakeChild</Label>
      <Comment> Initialize a child digdogger (type $18) in the next object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71108</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start with a target speed of $0100.&#xD;
 The low byte is still 0 from when room data was reset.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjTargetSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71116</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The speed will increase.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71111</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flag this a child digdogger.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71121</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the parent's coordinates to the child.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71129</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
 Decrement [00] until 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71138</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Destroy the big digdogger by resetting the object type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71501</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is a child digdogger, then go draw it.&#xD;
&#xD;
 DASM.EXPR: Digdogger_ObjIsChild</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71549</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1177D_DrawLittle</Label>
      <Comment> A little digdogger is easy to draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71543</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
 Increment Y register until = 4.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71506</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each part of the big digdogger, from 0 to 3,&#xD;
 indexed by Y register:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71484</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DigdoggerSpriteOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71488</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DigdoggerSpriteOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71492</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DigdoggerSpriteAttrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71530</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71541</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71532</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Parts at odd indexes are flipped horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71524</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load and set the sprite attributes for this part.&#xD;
 Vertical flipping is set appropriately here.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71536</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There's only 1 frame image.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71508</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11754_LoopPart</Label>
      <Comment> Store in [00] the X coordinate offset for the current corner.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71516</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store in [01] the Y coordinate offset for the current corner.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70766</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set low target speed byte to $80.&#xD;
 This assumes that the high byte is 0 from when the room&#xD;
 was reset; or will bet set during digdogger split-up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71143</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Don't let the digdogger disappear until the next frame when&#xD;
 the children can draw themselves. Go draw the big digdogger&#xD;
 as a little one.&#xD;
&#xD;
 This will work, even though the object type was reset. No&#xD;
 other object data has not been touched. Also, the code block&#xD;
 we'll jump to temporarily sets the object type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72910</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn rate $80</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72915</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Like-like has a 4 animation frame cycle unlike most monsters&#xD;
 which have 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72935</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11CE7_Draw</Label>
      <Comment> Draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72944</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check collisions. If Link was not captured, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72952</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The monster captured Link.&#xD;
 Put the monster at the same location as him.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72960</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset Link's timer, metastate, and shove info.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72971</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restart the monster's movement frame cycle: frame 0, counter 4&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72979</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now Link can't move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72983</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11D17_HandleCaptured</Label>
      <Comment> Animate up to frame 3. Then stay there.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73002</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11D2A_IncCaptureTime</Label>
      <Comment> Increment capture time.&#xD;
&#xD;
 DASM.EXPR: ObjCaptureTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73005</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once capture time &gt;= $60 screen frames, remove the magic shield.&#xD;
&#xD;
 DASM.EXPR: ObjCaptureTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73017</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a value above $60 over and over.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73022</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11D3E_DrawAfterCapture</Label>
      <Comment> In this state, we have to draw Like-like over Link.&#xD;
 So, don't use the usual sprite writing code that cycles sprites.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73031</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check object collisions.&#xD;
 If this monster hasn't died, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But once it has died, then let Link move again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66186</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HideSpritesOverLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6148</Address>
      <AddressType>SaveRam</AddressType>
      <Label>DrawObjectWithAnimAndSpecificSprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66199</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawObjectMirroredOverLink</Label>
      <Comment> Params:&#xD;
 A: frame image&#xD;
&#xD;
 Mirrored</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66207</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0D] holds frame image</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0E] holds animation index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66211</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [08] holds object index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66213</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sprite $10: left sprite under Link</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66218</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sprite $11: right sprite under Link</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66203</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The animation index is (object type + 1) to account for Link&#xD;
 having two animation indexes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66201</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10299</Label>
      <Comment> [0C] holds mirrored flag</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66195</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawObjectNotMirroredOverLink</Label>
      <Comment> Not mirrored</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73869</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitGleeok</Label>
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73927</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73874</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop 6 times to initialize each segment of 4 necks.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73876</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12094</Label>
      <Comment> Set the X of the current segment of each neck to $7C.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73892</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the Y of the current segment of each neck.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73909</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set HP of each neck to $A0.&#xD;
&#xD;
 Because there's only one HP value for each neck,&#xD;
 it's stored right in the object slot -- unlike coordinates.&#xD;
&#xD;
 Also, note that even though these aren't independent objects&#xD;
 in the object slots -- because object type = 0 -- the values in&#xD;
 these object slots will be useful during collision detection.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73914</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset metastate and unintialized flag, so that this neck is ready to go.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73922</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Invincible to everything but the sword.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73930</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set speed flags to $FF (non-0/decelerate):&#xD;
 * neck 0 X&#xD;
 * neck 1 Y&#xD;
 * neck 2 X&#xD;
 * neck 3 Y&#xD;
&#xD;
 Leave the other other speed flags 0 (accelerate).&#xD;
&#xD;
 DASM.EXPR: Gleook_HeadInfo0+GLEEOK_SPEEDX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73942</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the V-direction counter of all necks to 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73956</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the H-direction counter of all necks to 6.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73969</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set neck 1 head delay timer to 12.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73973</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set neck 2 head delay timer to 24.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73977</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set neck 3 head delay timer to 36.&#xD;
&#xD;
 DASM.EXPR: Gleook_HeadInfo1+GLEEOK_DELAY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73919</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Is this a mistake? (+2)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74081</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitGohma</Label>
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76143</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitGanon</Label>
      <Comment> Invincible to everything but sword and arrow.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130648</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitTrap</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76078</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitPatra</Label>
      <Comment> Invincible to everything but sword.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74105</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitGleeokHead</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76004</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitLamnola</Label>
      <Comment> Make $A segments.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75978</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitZelda</Label>
      <Comment> Make Zelda and 4 flames that guard her, in object slots 5 to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130632</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitRupeeStash</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75858</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12852_LoopDrawColumn</Label>
      <Comment> Point to the next rolling sprite record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75803</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokBodyBaseTileOffsets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75813</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_DrawBody</Label>
      <Comment> The animation timer controls when the animation frame changes.&#xD;
 If it has not expired, then go decrement it and draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75785</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokBodyTiles0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75791</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokBodyTiles1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75797</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokBodyTiles2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75844</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Gleeok_WriteSprites</Label>
      <Comment> For each row, from 0 to 1, indexed by [06]:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75854</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1284E_LoopDrawRow</Label>
      <Comment> For each column from 0 to 2, indexed by [07]:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75833</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cycle the animation frame from 0 to 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75848</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the base tile offset for the current animation frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75865</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set sprite's Y to ($57 + row * $10).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75876</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the tile for this spot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75882</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If temporarily invincible, then set sprite attributes to&#xD;
 cycled palette rows.&#xD;
&#xD;
 Else use level palette row 7.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75894</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set sprite's X to ($74 + column * 8).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75904</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the index for fetching tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75908</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the column loop.&#xD;
 Increment the column until it = 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75916</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the row loop.&#xD;
 Increment the row until it = 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75807</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Gleeok_DecAnimTimerAndDraw</Label>
      <Comment> Decrement animation timer, and go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6565</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteSpecificSprite</Label>
      <Comment> Params:&#xD;
 A: tile number&#xD;
 X: object index&#xD;
 Y: sprite record offset&#xD;
 [03]: sprite attributes&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75467</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_WriteHeadOrBaseSpriteAndCheckCollisions</Label>
      <Comment> Description:&#xD;
 This block applies to heads and the bottom segment of a neck.&#xD;
 These are drawn with sprites that come first in order, so that&#xD;
 they are drawn above all other sprites, including Link.&#xD;
&#xD;
 Params:&#xD;
 A: tile number&#xD;
&#xD;
 Normal sprite with level palette row</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75469</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [03] holds sprite attributes</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75471</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the tile number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75486</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the tile number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75514</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_CheckCollisions</Label>
      <Comment> If this segment is not the head nor the bottom of the neck,&#xD;
 then loop again to process the next segment.&#xD;
&#xD;
 This kind of segment is only drawn, and is not checked&#xD;
 for object collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75495</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_DrawSegmentAndCheckCollisions</Label>
      <Comment> Neck segment tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75501</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Head tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6541</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Anim_WriteLevelPaletteSprite</Label>
      <Comment> Params:&#xD;
 A: tile number&#xD;
 X: object index&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75493</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_DrawHeadAndCheckCollisions</Label>
      <Comment> Head object slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74977</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate the index of the last neck of this kind of gleeok.&#xD;
 Subtract $42 (Gleeok1) from ObjType[1].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74986</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L124EA_LoopNeck</Label>
      <Comment> If the bit for this neck is in the dead neck mask,&#xD;
 then go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75085</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_FetchNeckAddrs</Label>
      <Comment> Returns:&#xD;
 X: neck index&#xD;
 Y: 5 -- the last segment index&#xD;
 [00:01]: address of segment X array&#xD;
 [02:03]: address of segment Y array&#xD;
 [04:05]: address of segment miscellaneous array&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75003</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L124FB_LoadNeckBytes</Label>
      <Comment> Load neck data.&#xD;
&#xD;
 For each segment from 5 to 0, indexed by Y register:&#xD;
 - load coordinates into object slots 6 to 1&#xD;
 - load miscellany into an array at [0413]&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75000</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L124F8</Label>
      <Comment> Get the addresses of this neck's segment data arrays.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74950</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokNeckXAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74954</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokNeckXAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74958</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokNeckYAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74962</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokNeckYAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74966</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokNeckMiscAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74970</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokNeckMiscAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74983</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For each neck, counting down:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75079</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12547_NextLoopNeck</Label>
      <Comment> Bottom of the neck loop.&#xD;
 Decrement the neck index until it &lt; 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75021</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Each screen frame, one neck is chosen to move and try to shoot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Random &lt; $20, and there's no object (fireball) in slot $B,&#xD;
 then shoot fireball $56.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75058</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the neck data.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75037</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The head is in object slot 5. Set it for when we want to shoot,&#xD;
 so that it looks like the fireball came from the head.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75126</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_MoveNeck</Label>
      <Comment> Get the H-distance from the head to the base.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75684</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_MoveHead</Label>
      <Comment> Don't do anything until the head's initial timer expires.&#xD;
&#xD;
 DASM.EXPR: Gleeok_ObjHeadDelay&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75118</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start loading data from segment 5.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75775</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_ChangeCoordinateBySpeedFlag</Label>
      <Comment> Params:&#xD;
 A: a value to change&#xD;
 Y: 0 =&gt; increment, 1 =&gt; decrement&#xD;
&#xD;
 Returns:&#xD;
 A: original value +/- 1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75689</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 1 or -1 to X as needed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75699</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 1 or -1 to Y as needed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75709</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the counter to change directions.&#xD;
 If it's still &lt; 4, then return.&#xD;
&#xD;
 DASM.EXPR: Gleeok_ObjHeadDirChangeCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75719</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The counter reached 4. So, reset it.&#xD;
 Then check the individual direction counters.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75724</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the horizontal direction counter.&#xD;
 If &gt;= $C, then reset the counter, and flip direction.&#xD;
&#xD;
 DASM.EXPR: Gleeok_ObjHeadDirCounterH</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75747</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L127E3_CheckVertical</Label>
      <Comment> Increment the vertical direction counter.&#xD;
 If &gt;= 6, then reset the counter, and flip direction.&#xD;
&#xD;
 DASM.EXPR: Gleeok_ObjHeadDirCounterV&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75551</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this neck has not died, then go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75556</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This neck died. So, prepare to make a flying head.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75528</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this segment was harmed, then set the writhing counter,&#xD;
 and the animation counter to its lower value.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75544</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is the bottom segment, then go reset metastate and loop again.&#xD;
 Gleeok can writhe when it's hit here, but it can't die.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75561</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the segment object slot in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75592</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12748_DestroyNeck</Label>
      <Comment> Restore the segment object slot in X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75567</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The flying head will go in slot (neck index + 7).&#xD;
 Switch the X register to it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75574</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flag it uninitialized, so that it will be initialized next frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75579</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the original head's coordinates to it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75587</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set object type $46 (flying head).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75594</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Hide the original head's sprite, and the base segment's sprite.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75609</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the bit for this neck to the dead neck mask.&#xD;
 Copy it to [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75623</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop over the four bits in the copy of the dead neck mask.&#xD;
 Count them up, and store the amount in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75636</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Compare the number of dead necks to the original number&#xD;
 (object type - $41).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75644</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If they're equal, then go handle the whole boss dying.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75646</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else reset object metastate of the segment, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75055</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1252F_DrawAndCheckCollisions</Label>
      <Comment> This is run for all necks.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75652</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12784_NextLoopSegment</Label>
      <Comment> Bottom of the segment loop.&#xD;
 Decrement segment object slot.&#xD;
&#xD;
 If &gt;= 1, then go draw the next segment and check collisions.&#xD;
 Else return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75660</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1278C_BossDied</Label>
      <Comment> The whole gleeok died, because the last neck died.&#xD;
&#xD;
 First, hide the first $10 sprites: the attached heads.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75666</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We want a death spark. So, set the metastate of the first&#xD;
 monster slot to $11.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75671</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the object type of slots 2 to $A.&#xD;
&#xD;
 Beware a left over fireball in slot $B!&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75511</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The segment is not a head nor bottom. So, we can use a&#xD;
 standard routine to draw. It uses one of the rolling sprites&#xD;
 that is drawn under Link and the heads.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73890</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> I don't think this one is needed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73907</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> I don't think this one is needed.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73863</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GleeokSegmentYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75818</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The animation timer has expired. There are two choices for arming it.&#xD;
&#xD;
 When writhing after a hit, Gleeok animates faster.&#xD;
 So, when the writhing counter &lt;&gt; 0, set a shorter time (6).&#xD;
 Otherwise, set a longer time ($10).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75472</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> To calculate the base offset of the sprite record:&#xD;
 offset := neck index * 8&#xD;
&#xD;
 This ends up pointing to one of the first 8 eight sprites,&#xD;
 at an even index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75478</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But if the segment is not a head (not at object slot 5), then&#xD;
 add $20. This moves the offset to the second set of 8 sprites.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75558</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: I don't see why this is needed, since it won't go in this obj slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75563</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the segment is not a head, then skip making a flying head.&#xD;
&#xD;
 TODO:&#xD;
 But how can we get here in this case, since earlier branches&#xD;
 would have been taken to skip all this for all other segments?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73983</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Leave neck 0 head delay timer as 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75131</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the difference is positive, then go divide by 4 unsigned.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75297</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_CalcSegmentLimits</Label>
      <Comment> Params:&#xD;
 A: primary reference segment distance&#xD;
 X: 0 for horizontal, 1 for vertical&#xD;
&#xD;
 Store primary distance, capped at 4.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75266</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Keep the segments in slots 4 and 3 between their neighbors vertically.&#xD;
 So if they're not, then move them 1 pixel toward that goal.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75239</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
&#xD;
 [04D8] is the quarter horizontal distance from the head to the base.&#xD;
 It represents the reference distance from each segment to the base.&#xD;
 Multiples of it are used to mark the reference point of each segment.&#xD;
 Move every segment one pixel closer to its reference point.&#xD;
&#xD;
 Loop over each middle segment, from 2 to 0 in X register.&#xD;
 Access object slots 4 to 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75229</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Stretch or contract depending on the distance of one segment to the next.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75166</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Keep segments within the third tier distance of each other.&#xD;
 Any segment that is too far from the previous one is moved&#xD;
 2 pixels toward it.&#xD;
&#xD;
 Loop over the 4 segments above the base, from 0 to 3,&#xD;
 accessing slots 2 to 5.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75144</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the absolute horizontal reference segment distance.&#xD;
 This is the first tier of reference distances.&#xD;
&#xD;
 Pass the value here to calculate and store the&#xD;
 second and third tier horizontal distances.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75152</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the absolute V-distance from the head to the base,&#xD;
 and divide it be 4.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75162</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Calculate and store the second and third tier vertical distances.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75306</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 4 and store secondary distance, capped at 8.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75318</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 4 and store tertiary distance, capped at $B.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75196</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125BC_CheckDistanceV</Label>
      <Comment> Get the absolute V-distance between the current segment&#xD;
 and the previous one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75168</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125A0_KeepSegsNearNeighbors</Label>
      <Comment> Get the absolute H-distance between the current segment&#xD;
 and the previous one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75176</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If H-distance &lt; third tier H-distance, then this distance is OK.&#xD;
 Go look at the vertical distance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75181</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, generally, bring this segment closer to&#xD;
 the previous one by 2 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75204</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If V-distance &lt; third tier V-distance, then this distance is OK.&#xD;
 Go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, generally, bring this segment closer to&#xD;
 the previous one by 2 pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75241</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125E9_KeepSegsNearRefPoint</Label>
      <Comment> Calculate the reference X coordinate:&#xD;
   base X + ([04D8] * (loop index + 1))&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75252</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If current segment X &lt; reference X, add 1 to it.&#xD;
 Else subtract 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75261</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125FD_NextKeepSegsNearRefPoint</Label>
      <Comment> Store the new segment X, and loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75224</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125D8_NextKeepSegsNearNeighbors</Label>
      <Comment> Bottom of the loop keeping segments from getting too far apart.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else divide by 4 signed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75141</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Gleeok_StoreRefSegDistance</Label>
      <Comment> Store the signed reference segment distance.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75147</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 0 for horizontal distances.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75331</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_StretchNeck</Label>
      <Comment> Params:&#xD;
 X: segment index (0 to 2, corresponding to slots 2 to 4)&#xD;
&#xD;
 Choose the index of a routine that will move the segment&#xD;
 based on which boundaries are crossed.&#xD;
&#xD;
 0 will be used, if X and Y are within primary distances of&#xD;
 the next segment.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75336</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: seems to be a mistake. shout probably be ObjX+2,X</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75399</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_ExpandSegment</Label>
      <Comment> Randomly, 50% of the time, go move away from the next segment horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75420</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_IgnoreSegment</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75445</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_ContractSegmentX</Label>
      <Comment> Move toward the next segment horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75421</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_ContractSegmentY</Label>
      <Comment> Move toward the next segment vertically.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75461</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_ContractSegment</Label>
      <Comment> Randomly, 50% of the time, go move toward the next segment horizontally.&#xD;
 Else go move vertically.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75333</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the absolute H-distance &gt;= primary reference segment distance,&#xD;
 then increment the routine index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75347</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12653</Label>
      <Comment> If the absolute H-distance &gt;= secondary reference segment distance,&#xD;
 then increment the routine index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75353</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12659</Label>
      <Comment> If the absolute V-distance &gt;= primary reference segment distance,&#xD;
 then add 3 to the routine index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75369</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12669</Label>
      <Comment> If the absolute V-distance &gt;= secondary reference segment distance,&#xD;
 then add 3 to the routine index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75403</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else move away vertically.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75434</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Gleeok_ExpandHorizontally</Label>
      <Comment> Move away from the next segment horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74108</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set flying speed $BF and maximum $E0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74924</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlGleeokHeadFlight</Label>
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66753</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_SetStateAndTurns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74938</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_GleeokHeadDecideState</Label>
      <Comment> Go to the next flying state randomly:&#xD;
 Random &lt; $D0: 2&#xD;
 Else:         3&#xD;
&#xD;
 Set up 6 turns.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74877</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the low bit of the distance traveled is clear,&#xD;
 and Random &lt; $20,&#xD;
 and there's no object (fireball) in slot $B,&#xD;
 then shoot a fireball $56.&#xD;
&#xD;
 DASM.EXPR: Flyer_ObjDistTraveled</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74900</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12494</Label>
      <Comment> Switch animation frames every screen frame.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74914</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset object state, shove info, and invincibility timer,&#xD;
 because this monster can't get hurt nor die.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1239</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GleeokCurNeck</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1240</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GleeokSignedRefSegmentDistance</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1254</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GleeokAnimationTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1255</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GleeokBodyAnimationFrame</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1297</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GleeokDeadNeckMask</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1241</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GleeokPrimarySegmentLimits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1243</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GleeokSecondarySegmentLimits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1245</Address>
      <AddressType>InternalRam</AddressType>
      <Label>GleeokTertiarySegmentLimits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73780</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRedWizzrobe_0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73709</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRedWizzrobe_1</Label>
      <Comment> Handle state group 1 ($40 to $7F).&#xD;
&#xD;
 If state = $7F, make it $4F.&#xD;
 $7F is the first frame of state group ($40 to $7F).&#xD;
 By doing this, we skip $30 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73781</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRedWizzrobe_2</Label>
      <Comment> Handle state group 2 ($80 to $BF).&#xD;
&#xD;
 If state = $B0, then shoot a magic shot $59.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73725</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRedWizzrobe_3</Label>
      <Comment> Handle state group 3 ($C0 to $FF).&#xD;
&#xD;
 If state &lt;&gt; $FF, go fade as in state group 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73730</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State $FF.&#xD;
&#xD;
 Face in a random direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73705</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedWizzrobeDirections</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73732</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the random value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73741</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the random value.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73673</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedWizzrobeOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73689</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedWizzrobeOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73742</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use a random value from 0 to $F to index into an array of offsets.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73747</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the X offset and Link's X to set the monster's position.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73750</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Align with a square.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73754</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the Y offset and Link's Y to set the monster's position.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73757</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 3 to help with the alignment calculation below.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73488</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RedWizzrobe_AlignAndSetY</Label>
      <Comment> Params:&#xD;
 A: Y coordinate, square ($10) aligned&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73765</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Y coordinate &gt;= $5D and &lt; $C4, then the monster&#xD;
 is not in a wall. So, check tile collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73800</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If invincibility timer = 0, then check collisions with weapons.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73792</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wizzrobe_DrawAndCheckCollisions</Label>
      <Comment> Invincible to everything but sword and bomb.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73825</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12061</Label>
      <Comment> In this state, the monster can always harm Link,&#xD;
 even if it can't be harmed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73828</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every 4 frames switch between two frame images.&#xD;
&#xD;
 DASM.EXPR: RedWizzrobe_ObjAnimCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73835</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the frame image number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73852</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the frame image number.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73839</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing up, then go add 2 to frame image number, and draw mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73845</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If facing left, then flip horizontally.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73858</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Up facing frame image numbers are 2 and 3.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73626</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShootMagicShot</Label>
      <Comment> Params:&#xD;
 A: shot object type&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73649</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11FB1</Label>
      <Comment> Else increase animation counter and decrease state every frame.&#xD;
&#xD;
 DASM.EXPR: RedWizzrobe_ObjAnimCounter&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shift the state right 6 times to get the index (0 to 3) of a state routine.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73628</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have the magic clock, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73633</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else play the magic sound, shoot, and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73719</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11FF7</Label>
      <Comment> Increment the fade counter. Depending on the low bit,&#xD;
 the monster will be drawn every other frame.&#xD;
&#xD;
 DASM.EXPR: RedWizzrobe_ObjFadeCounter&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73198</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wizzrobe_DrawAndCheckCollisionsIntermittently</Label>
      <Comment> If the teleporting distance remaining is even, then draw&#xD;
 and check collisions, else return.&#xD;
&#xD;
 This means that when 0, the monster is walking.&#xD;
 So, draw and check collisions every frame.&#xD;
&#xD;
 When not 0, the monster is teleporting, and must be drawn&#xD;
 translucently -- every other frame.&#xD;
&#xD;
 DASM.EXPR: ObjRemDistance&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73496</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WizzrobeCollisionOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73506</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WizzrobeCollisionOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73518</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wizzrobe_GetCollidableTileForDir</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
 Y: 8-way direction&#xD;
&#xD;
 Returns:&#xD;
 C: 0 if walkable&#xD;
&#xD;
 Subtract 1 from direction to make an 8-way direction index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73521</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the original X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73530</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the original Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73540</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the original Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73543</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the original X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73519</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and add the collision offset to the monster's X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73528</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and add the collision offset to the monster's Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73547</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wizzrobe_GetBaseCollidableTile</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 C: 0 if walkable&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73553</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return C=0 if walkable.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73556</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the last collided tile.&#xD;
&#xD;
 DASM.EXPR: Wizzrobe_ObjLastTile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73516</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wizzrobe_GetCollidableTile</Label>
      <Comment> Params:&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 C: 0 if walkable&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73776</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If walkable, then return.&#xD;
 Else increase state to 0, in order to check again next frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73560</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_TryShooting</Label>
      <Comment> Once every $20 frames, and when not fading, we'll try to shoot.&#xD;
 Otherwise, return.&#xD;
&#xD;
 DASM.EXPR: ObjRemDistance&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73207</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_WalkOrTeleport</Label>
      <Comment> If timer has not expired, then go walk.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73585</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is to the right of Link, then choose left.&#xD;
 Else choose right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73594</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11F7A</Label>
      <Comment> If the direction chosen = the monster's facing direction,&#xD;
 then go shoot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73611</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is down from Link, then choose up.&#xD;
 Else choose down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73620</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11F94</Label>
      <Comment> If the direction chosen &lt;&gt; the monster's facing direction,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73571</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link and the monster are not within the same square row,&#xD;
 then go see about the same square column.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73599</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11F7F_BlueWizzrobe_CheckSquareColumn</Label>
      <Comment> If Link and the monster are not within the same square column,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73468</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_AlignWithNearestSquareAndRandomizeTimer</Label>
      <Comment> Set a random timer &gt;= $70.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73474</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_AlignWithNearestSquare</Label>
      <Comment> If in the left half of a square, jump to the left edge.&#xD;
 Else jump to the next square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73483</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If in the top half of a square, jump to the top edge.&#xD;
 Else jump to the next square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73451</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11EEB_BeginTeleporting</Label>
      <Comment> Will move $20 pixels horizontally and vertically.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73456</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flip bit 6 of turn counter; so that we change the axis to turn toward.&#xD;
&#xD;
 DASM.EXPR: BlueWizzrobe_ObjTurnCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73464</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the timer to note that the monster is teleporting.&#xD;
 Align with the nearest square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73404</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_ChooseTeleportTarget</Label>
      <Comment> Choose a random value between 0 and 3 that will be used&#xD;
 to test and set a direction to move in.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73409</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The random value implies a random direction.&#xD;
 Save the original X coordinate; and add to it the offset for&#xD;
 the random direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73418</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the original Y coordinate; and add to it the offset for&#xD;
 the random direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73400</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobeTeleportDirs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73392</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobeTeleportMaxOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73396</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobeTeleportMaxOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73427</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the random index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73436</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the random index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73438</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the original Y.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73441</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the original X.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73429</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Test the walkability in the random direction chosen.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73444</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not walkable, then all we can do is align with the nearest square.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73446</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the random diagonal direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73373</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_Move</Label>
      <Comment> TODO:&#xD;
 Consider calling this function something like MoveSimple8.&#xD;
 Also, consider deleting the references to BlueWizzrobe in&#xD;
 teleport offsets above.&#xD;
&#xD;
 Index the offsets using the direction value directly.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73351</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobeTeleportOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>11</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73362</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobeTeleportOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>11</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73333</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E75_TurnVertically</Label>
      <Comment> If the monster's Y &gt;= Link's Y, then choose up, else down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73321</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster's X &gt;= Link's X, then choose left, else right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73342</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E7E_SetDir</Label>
      <Comment> If the direction chosen = facing direction, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73346</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else face toward Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73307</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_BlueWizzrobe_TurnTowardLinkIfNeeded</Label>
      <Comment> Description:&#xD;
 When the counter is a multiple of $40, switch between facing&#xD;
 toward Link horizontally or vertically. All other times, return.&#xD;
&#xD;
 DASM.EXPR: BlueWizzrobe_ObjTurnCounter&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73304</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_AdvanceCounterAndTurnTowardLinkIfNeeded</Label>
      <Comment> Description:&#xD;
 Increment the turn counter. Then turn toward Link&#xD;
 when the turn counter is a multiple of $40.&#xD;
&#xD;
 Increment the turn counter.&#xD;
&#xD;
 DASM.EXPR: BlueWizzrobe_ObjTurnCounter&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73254</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If walkable, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73256</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle a wall, if the tile is not a block nor water.&#xD;
&#xD;
 DASM.EXPR: Wizzrobe_ObjLastTile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73269</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E35_HitBlockOrWater</Label>
      <Comment> If the monster was already teleporting, then return,&#xD;
 so that it moves again next frame.&#xD;
&#xD;
 DASM.EXPR: ObjRemDistance&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73228</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E0C_Walk</Label>
      <Comment> Timer:&#xD;
   &gt;= $10: Turn if needed and move every other frame&#xD;
   &gt; 1:    Do nothing&#xD;
   = 1:    Choose a place to teleport to.&#xD;
&#xD;
 Notice that walking is slower than teleporting; and there is&#xD;
 a pause of $10 frames at the end.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_TurnTowardLink</Label>
      <Comment> If the multiple of $40 is even, then turn horizontally,&#xD;
 else vertically.&#xD;
&#xD;
 DASM.EXPR: BlueWizzrobe_ObjTurnCounter&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73211</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Timer = 0. Only teleporting now.&#xD;
&#xD;
 If there is still distance to go while translucent, then&#xD;
 decrement the distance remaining, and move.&#xD;
&#xD;
 DASM.EXPR: ObjRemDistance&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73245</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_TurnSometimesAndMoveAndCheckTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73222</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E06_WalkAgain</Label>
      <Comment> Distance remaining = 0. Still teleporting.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73248</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlueWizzrobe_MoveAndCheckTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73240</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E18_GoEveryOtherFrame</Label>
      <Comment> Every other frame, advance the turn counter, turn if needed,&#xD;
 and move.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73274</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else go start teleporting thru this obstacle.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73277</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E3D_HitWall</Label>
      <Comment> The monster hit a wall.&#xD;
 If facing direction has a vertical component, then flip it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73290</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E4A_CheckHorizontal</Label>
      <Comment> If facing direction has a horizontal component, then flip it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76148</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Halt Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76154</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76937</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_ScenePhase0</Label>
      <Comment> Description:&#xD;
 Lift up the Triforce of Courage while the room is dark.&#xD;
&#xD;
 Lift the Triforce of Courage -- represented with a triforce piece.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76998</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_ScenePhase1</Label>
      <Comment> Description:&#xD;
 Lift up the Triforce of Courage while the room is light.&#xD;
&#xD;
 Lift the Triforce of Courage -- represented with a triforce piece.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77028</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_ScenePhase2</Label>
      <Comment> Description:&#xD;
 Fighting Ganon.&#xD;
&#xD;
 If Ganon is dying, go handle it.&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjPhase&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77493</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_DrawBody</Label>
      <Comment> Loop over four 16x16 images that make up Ganon.&#xD;
 There are 6 animation frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77481</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonSpriteOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77485</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonSpriteOffsetsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77489</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonSpriteHFlips</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77457</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonFrameImages</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77495</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12EB7_LoopCorner</Label>
      <Comment> Add an offset to Ganon's X, and store the result in [00] -- the sprite's X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77503</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add an offset to Ganon's Y, and store the result in [01] -- the sprite's Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77511</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Each part has a horizontal flipping flag.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77516</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save and copy the loop index (the current part) to [07].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77534</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Multiply the animation frame by 4, because of the 4 parts&#xD;
 that make it up.&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjAnimationFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77525</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add [07] -- the index of the current part.&#xD;
&#xD;
 Now you have an index into the frame image table, for the&#xD;
 current image part of the current animation frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77535</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the part loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77540</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_CheckCollisions</Label>
      <Comment> Calculate Ganon's midpoint at offset ($10, $10) from his coordinates.&#xD;
 Store in [02] and [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77554</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check for a collision with Link.&#xD;
&#xD;
 We can't call CheckLinkCollision, because we need to&#xD;
 customize Ganon's midpoint.&#xD;
&#xD;
 So, we've calculated the midpoint hotspot. Now, skip collision&#xD;
 detection, if Link is invincible. Initialize variables that will&#xD;
 be returned from the partial collision check routine. Then&#xD;
 call it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77572</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12F04_SkipLinkCollision</Label>
      <Comment> If Ganon is not in state 0, then he's red.&#xD;
 Go check collision with an arrow.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77576</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If timer &lt;&gt; 0, then Ganon is visible.&#xD;
 He can't be harmed like this. So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77580</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Sword slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77585</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: is red the right description of this color and state?&#xD;
&#xD;
 If Ganon has died, according to the usual collision check rules&#xD;
 (HP = 0), then:&#xD;
 1. Restore HP to the initial value $F0&#xD;
 2. Set state to $FF to note that Ganon is vulnerable to silver arrows&#xD;
 3. Change palette row 7 to make Ganon red&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77600</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12F20_CheckHarmed</Label>
      <Comment> If Ganon was harmed, then play the sound effect&#xD;
 and set timer to $40, so that he's visible for $40 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77612</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12F2C_UndoDeath</Label>
      <Comment> Reset metastate, because Ganon cannot die this way.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7318</Address>
      <AddressType>SaveRam</AddressType>
      <Label>ResetShoveInfoAndInvincibilityTimer</Label>
      <Comment> Params:&#xD;
 A: 0&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77615</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset shove info and invincibility timer, because Ganon&#xD;
 doesn't react at all as a usual monster.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77619</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12F33_CheckArrowCollision</Label>
      <Comment> If the silver arrow is not in the inventory, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77626</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the collision return value [06].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77630</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there's no arrow in flight, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77639</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check for collision with an arrow; and return if no collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77646</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the Ganon phase to "dying".&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjPhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77642</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [06] collision result</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77649</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now his body does flash.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set initial cloud distance 8.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77685</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_AppendPaletteRowTransferRecord_Triforce</Label>
      <Comment> Yellow and red colors at AF6A.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77677</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_AppendPaletteRowTransferRecord_Brown</Label>
      <Comment> Brown and white colors at AF64.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77681</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_AppendPaletteRowTransferRecord_Blue</Label>
      <Comment> Red and blue colors at AF67.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77687</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12F77</Label>
      <Comment> Save the end index of the colors.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77709</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the end index of the colors.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77711</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Overwrite the last 3 colors in the record, with the ones&#xD;
 ending at the index passed in.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77668</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonColorSets</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77660</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonColorTransferRecord</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77689</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the length, to append to the dynamic transfer buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77692</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the 8 bytes of the palette row transfer record template.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77727</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_DrawAshes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77421</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_GetCurCloudLeft</Label>
      <Comment> Returns:&#xD;
 [00]: X coordinate&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77430</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_GetCurCloudRight</Label>
      <Comment> Returns:&#xD;
 [00]: X coordinate&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77439</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_GetCurCloudTop</Label>
      <Comment> Returns:&#xD;
 [01]: Y coordinate&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77448</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_GetCurCloudBottom</Label>
      <Comment> Returns:&#xD;
 [01]: Y coordinate&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77260</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_DrawCloud</Label>
      <Comment> Params:&#xD;
 [00]: X&#xD;
 [01]: Y&#xD;
&#xD;
 Save the coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77291</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_DrawBurst</Label>
      <Comment> If cloud distance &lt;&gt; 0, then decrement it once every 8 frames.&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjCloudDist&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77305</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12DF9_DrawClouds</Label>
      <Comment> Draw the four clouds at diagonal corners.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77335</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw the top and bottom clouds.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77351</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw the left and right clouds.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77367</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the object index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77416</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the object index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77371</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop over the 8 burst rays in slots 2 to 9, to move and draw them.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77411</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the loop.&#xD;
 Increment object slot while &lt;= 9.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77284</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77266</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If cloud distance &lt; 6, then use frame image $C (medium).&#xD;
 Else use frame image $D (low).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77277</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12DDD</Label>
      <Comment> No horizontal flipping.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77275</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Low density cloud frame image (tile $74)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77233</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_SetUpBurstRays</Label>
      <Comment> Loop over 8 burst rays, from 7 to 0, indexed by Y register.&#xD;
 Access object slots 9 to 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77213</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonBurstSpriteAttrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77223</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonBurstTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77235</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12DB3_LoopRay</Label>
      <Comment> Start each piece at offset (4, 4) from Ganon's location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77250</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77205</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonBurstDirs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77376</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If object slot &lt; 5 or = 7, then move every frame.&#xD;
 Else move 3 out of every 4 frames.&#xD;
&#xD;
 This makes pieces spread out in somewhat of a circle,&#xD;
 by making the pieces at cardinal directions move at&#xD;
 full speed while the diagonal ones move a little slower.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77396</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The frame counter will make the sprite flash.&#xD;
 The array has the horizontal and vertical flipping attributes.&#xD;
 Combine them into [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77133</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_Dying</Label>
      <Comment> Ganon is dying.&#xD;
 Increment Ganon phase every frame.&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjPhase&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77136</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it just went from $FF to 0, then keep it at $FF.&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjPhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77146</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12D5A</Label>
      <Comment> If Ganon phase &lt; $50, then go draw only.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77150</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &gt; $50, then go handle ashes only.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77152</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise Ganon phase = $50.&#xD;
 Set up the burst and ashes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77155</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Ganon is now a pile of ashes at offset (7, 8) from where he was.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77173</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Ganon/Triforce song</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77181</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Keep drawing the burst artifacts while Ganon phase &lt; $A0.&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjPhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77188</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If &gt; $A0, then there's nothing left to do, except return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77748</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play "item appears" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77744</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Activate the room item, by setting its state to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77190</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise Ganon phase = $A0.&#xD;
 Activate the room item (triforce of power).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77735</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_ActivateRoomItem</Label>
      <Comment> If the room item was already active or taken, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77193</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put it at Ganon's ashes' location.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77201</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increase the room kill count.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77103</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_UpdateBrownState</Label>
      <Comment> Every other frame decrement the state.&#xD;
 But every frame draw Ganon either translucent or opaque.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77110</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the state becomes 0, then Ganon is blue again.&#xD;
 Go switch his palette row to reflect it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77101</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GanonStartXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77051</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_RandomizeLocation</Label>
      <Comment> Description:&#xD;
 Put Ganon at Y=$A0, and a random X of $30 or $B0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77118</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12D3E_Draw</Label>
      <Comment> When state &gt;= $30, draw Ganon opaque.&#xD;
 When state goes below, draw him translucent.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go handle the brown state specially.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77043</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State = 0: Blue&#xD;
&#xD;
 If timer = 0, then go move around and shoot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77047</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If timer &gt; 1, then Ganon is blue and visible. Only draw.&#xD;
 Collisions were checked already.&#xD;
&#xD;
 Else timer = 1. Fall thru and randomize Ganon's location,&#xD;
 in anticipation of moving around when timer becomes 0 next frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77066</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_MoveAndShoot</Label>
      <Comment> Change the animation frame every screen frame; so that&#xD;
 when Ganon is hit, he appears in a random pose.&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjAnimationFrame&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77069</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The animation cycle has 6 frames.&#xD;
&#xD;
 DASM.EXPR: Ganon_ObjAnimationFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77095</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fireball</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77089</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Shoot every $40 frames.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77081</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12D19_Move</Label>
      <Comment> Move like a blue wizzrobe teleporting.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77003</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's timer hasn't expired, then go draw Ganon.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77020</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Ganon_DrawBodyFrame0</Label>
      <Comment> When holding the Triforce of Courage, only draw Ganon&#xD;
 with animation frame 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77007</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once the timer expires:&#xD;
 1. unhalt Link&#xD;
 2. clear the item to lift&#xD;
 3. play level 9 song&#xD;
 4. go to scene phase 2: fighting / not holding triforce&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76988</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12CBC</Label>
      <Comment> TODO: Find out the sample. Add it to comment below, and to label.&#xD;
&#xD;
 If timer = 1, then&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76942</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's timer has not expired, then go do nothing until the last frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76946</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once the timer expires, it's time to brighten the room.&#xD;
&#xD;
 Save the current object slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76951</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the current object slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76953</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Turn off the room brightening flag, because we're controlling it&#xD;
 here instead of in the Mode 5 object update loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76958</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> On the first frame of the fade-to-light cycle, play the&#xD;
 Triforce/Ganon song.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76970</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12CAA_CheckFadeCycle</Label>
      <Comment> If the fade cycle has not ended, then go draw Ganon.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76979</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Link's timer to $C0 for the next scene phase.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76983</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set scene phase 1, and go draw Ganon.&#xD;
&#xD;
 DASM.EXPR: Ganon_ScenePhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76152</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Link's timer to $40 for scene phase 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74086</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Invincible to everything but arrows.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74094</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start at location ($80, $70).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74091</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set shoot timer to 1, so that Gohma doesn't shoot right away.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjShootTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74523</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Random:&#xD;
   &gt;= $B0: right&#xD;
   &gt;= $60: left&#xD;
   Else:   down&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74539</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now we can go straight without changing direction for some time.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjGoStraight</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74542</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go animate the eye.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74545</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12331_Move</Label>
      <Comment> Add $80 to the movement accumulator.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjMoveAccum&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74554</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If movement accumulator didn't overflow, then go animate the eye.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74556</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increase the distance traveled, and move 1.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjDistTraveled</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74559</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a direction mask in [02], starting with right (1).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74563</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Gohma's facing direction has a right component, then add 1 to X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74571</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1234B</Label>
      <Comment> If Gohma's facing direction has a left component, then subtract 1 from X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74579</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12353</Label>
      <Comment> If Gohma's facing direction has a down component, then add 1 to Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74587</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1235B</Label>
      <Comment> If Gohma's facing direction has an up component, then subtract 1 from Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74595</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12363</Label>
      <Comment> If Gohma has not traveled $20 pixels, then go animate the eye.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjDistTraveled&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74602</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Gohma has traveled $20 pixels. Reset the distance traveled.&#xD;
 Reverse the facing direction, and increase the number of sprints.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74624</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12380_AnimateEye</Label>
      <Comment> Animate the eye.&#xD;
&#xD;
 First, if the counter for when to open the eye next = 0, then&#xD;
 set it to a random value at least $C0; and set the timer for&#xD;
 keeping the eye open to $80.&#xD;
&#xD;
 Note that $C0 is not a number of frames, because it's changed&#xD;
 every other frame.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjNextOpenEyeCounter&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74641</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12391_DecNextOpenEyeCounter</Label>
      <Comment> Decrement the next-open-eye counter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74649</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12399</Label>
      <Comment> If open eye timer = 0, then the eye is closed.&#xD;
 Go animate it differently.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjEyeOpenTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else decrement the open eye timer.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjEyeOpenTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74657</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If open eye timer &gt;= $70 and &lt; $10, then the eye is fully open.&#xD;
 So, set its frame image to 2. Else use 3 for a half open eye.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74672</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L123B0_ShootAnimateCollide</Label>
      <Comment> Decrement the shoot timer.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjShootTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74675</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it became 0, then set it to $41, and shoot fireball $56.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74723</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gohma_AnimateAndDraw</Label>
      <Comment> Params:&#xD;
 A: eye frame image&#xD;
&#xD;
 Draw the eye with the frame image passed in.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74786</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gohma_CheckCollisions</Label>
      <Comment> Save the boss's X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74687</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L123BF_AnimateAndCheckCollisions</Label>
      <Comment> Pass the frame image for the eye.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjEyeState&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74696</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L123C8_AnimateClosedEye</Label>
      <Comment> Here the eye is closed. So animate it this way.&#xD;
 Increment the animation counter, and if &lt;&gt; 8, then&#xD;
 go shoot, draw, and check collisions.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjEyeAnimCounter&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74706</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Roll over the eye animation counter to 0.&#xD;
 Clear bit 1 and invert bit 0 to switch between frame images 0 and 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74718</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go set eye state/frame image, shoot, draw, and check collisions&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74777</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gohma_SetSpriteAttributes</Label>
      <Comment> Returns:&#xD;
 [04]: left side sprite attributes&#xD;
 [05]: right side sprite attributes&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74746</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gohma_DrawLegsOneSide</Label>
      <Comment> Params:&#xD;
 Y: side: 0 for left, 1 for right&#xD;
&#xD;
 Add the horizontal offset for the current side to Gohma's X to&#xD;
 store the sprite's X in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74739</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw the right legs.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74744</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw the left legs.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74721</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GohmaLegOffsetsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74754</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The object's Y is the sprite's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74772</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Leg frame images start at 4.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74769</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There are only two images.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74761</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There are only two frame images for legs: left and right.&#xD;
 There are two animation frames. They are animated as follows:&#xD;
&#xD;
 Frame 0:&#xD;
 ((leg index + frame number) AND 1) = 0 or 1&#xD;
 horizontal flipping = frame number = 0&#xD;
 &#xD;
 Frame 1:&#xD;
 ((leg index + frame number) AND 1) = 1 or 0&#xD;
 horizontal flipping = frame number = 1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74812</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the boss's X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74789</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract $10 from the X coordinate, so we start checking collisions&#xD;
 on the left side.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74794</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check object collisions in 5 parts, 8 pixels apart,&#xD;
 from left to right, indexed by [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74796</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop counter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74808</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop counter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74801</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 8 to the X coordinate for the next part.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74816</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gohma_HandleWeaponCollision</Label>
      <Comment> TODO:&#xD;
 If hit by an arrow, then set the arrow to spark&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74830</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1244E_CheckHitEye</Label>
      <Comment> If it did not hit part 3 nor 4, then go play the parry sound effect.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74840</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12458_CheckEyeOpen</Label>
      <Comment> If the state of the eye is not 3, then go parry.&#xD;
&#xD;
 DASM.EXPR: Gohma_ObjEyeState&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74847</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction of the arrow is not up, then go parry.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74854</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74859</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Deal damage and cry out.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74616</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the previous number of sprints was odd, then flag that Gohma&#xD;
 should randomly change direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76718</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlPatraFlight</Label>
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76732</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_PatraDecideState</Label>
      <Comment> Go to the next state randomly:&#xD;
 Random &gt;= $40: 2&#xD;
 Else:          3&#xD;
&#xD;
 Set up 8 turns.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76649</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset flying distance traveled, so that we know what offset to&#xD;
 apply to the children.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76660</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 2 animation frames a screen frame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76665</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop over the object slots of the 8 children.&#xD;
 If any are found, then go check for collision with Link only.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76681</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If there are no children, then Link can harm Patra.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76083</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start at location ($80, $70) and facing up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76693</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B95_CheckLinkCollision</Label>
      <Comment> Else there are child patras left.&#xD;
 Link cannot harm Patra, but it can harm Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76696</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B98_TryChangeManeuver</Label>
      <Comment> If timer = 0 and the angle of patra child in slot 3 = 0, then&#xD;
 flip the maneuver index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76712</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 for this to make sense, Y must be 0 or 1. But where is is set?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76095</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set flying speed $1F, and maximum $40.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76105</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: set [0601] to $40&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76108</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set object timer to $FF. When it runs out, the maneuver will be switched.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76112</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Patra type $47 goes with Patra Child type $25.&#xD;
 Patra type $48 goes with Patra Child type $26.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76123</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1295B</Label>
      <Comment> Loop over object slots 2 to 9, making patra children.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76125</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] holds the patra child type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76132</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Patra children are also only weak to the sword.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76670</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Patra Child 1 object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76674</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Patra Child 2 object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76766</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State = 0.&#xD;
&#xD;
 If the current object slot is 2, then go initialize the patra child.&#xD;
 This is the only patra child shown in the first fame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76770</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The patra child in slot 2 is the last one to be updated.&#xD;
 So all other patra children will see slot 2's state = 0, and return.&#xD;
&#xD;
 This means that in the first frame, slot 2 is the only one to be&#xD;
 shown.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76774</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In subsequent frames, patra children in slots &gt;= 3 will reach&#xD;
 here to wait to be shown at the top position (N) one at a time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76787</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12BF3_Ready</Label>
      <Comment> Once the patra child in the last slot (9) reaches here, advance&#xD;
 the patra parent's state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76913</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatraChild_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76916</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 2 was returned from the routine above in A.&#xD;
 Pass it as the animation counter value to the routine below.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76775</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract 3 from the object slot to get the angle where the&#xD;
 patra child in object slot 2 should be for the current one to appear.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76779</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the patra child in slot 2 has not reached the required angle,&#xD;
 then return.&#xD;
&#xD;
 DASM.EXPR: ObjAngleWhole+2</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76751</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatraChildStartAngles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>7</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76793</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12BF9</Label>
      <Comment> Go to state 1 to orbit.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76795</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76799</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set angle $18 (N).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76804</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This location is right above Patra.&#xD;
 Set X coordinate to Patra's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76808</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If patra child type = $25, then the radius of its orbit is $2C.&#xD;
 Else use radius $18. Store the chosen value in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76821</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This location is right above Patra.&#xD;
 Set Y coordinate to (Patra's Y - [00]).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76829</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatraChild_State1</Label>
      <Comment> Add Patra's distance traveled since the last frame to this child's coordinates.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76845</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset [0B]. The high byte of the amount to subtract is 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76849</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is type $25 Patra Child1, then decrease the&#xD;
 monster's angle by $70, else by $60 to go slower.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76261</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetDeadDummyObjType</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76904</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster died, then change to the dead dummy object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76897</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Patra's state still = 0, then the last patra child has not&#xD;
 shown up yet. In this case don't check collisions yet, only return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76863</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load Patra's maneuver index.&#xD;
 It determines which counts of bits are looked up below.&#xD;
&#xD;
 DASM.EXPR: Patra_ObjManeuverIndex+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76866</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster is Patra Child 1 ($25), then look up two separate&#xD;
 counts of bits to use for Y and X increment calculations in rotation.&#xD;
 This leads to a large circle (6,6) and a wobbling ring (5,6).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76885</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12C55_UsePatraChild2Bits</Label>
      <Comment> Else it's Patra Child 2 ($26). Look up one value that will be used&#xD;
 for both Y and X increment calculations in rotation. This leads to&#xD;
 a small circle (5) and a large circle (6).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78937</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DecreaseObjectAngle</Label>
      <Comment> Params:&#xD;
 A: low amount byte&#xD;
 X: object index&#xD;
 [0B]: high amount byte&#xD;
&#xD;
 Subtract the low amount byte from low angle byte.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78948</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract the high amount byte from high angle byte with borrow.&#xD;
&#xD;
 DASM.EXPR: ObjAngleWhole&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78953</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cap the high byte at $1F.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78781</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RotateObjectLocation</Label>
      <Comment> Params:&#xD;
 A: high bits of cosine to use in calculating Y increment&#xD;
 Y: high bits of sine to use in calculating X increment&#xD;
 X: object index&#xD;
&#xD;
 Returns:&#xD;
 A: new Y coordinate of object&#xD;
&#xD;
 [06] holds the number of high bits of cosine to use</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78783</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [05] holds the number of high bits of sine to use</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78785</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> First, rotate the X coordinate.&#xD;
&#xD;
 Look up the sine for the current angle, and store it in [00].&#xD;
&#xD;
 DASM.EXPR: ObjAngleWhole&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78906</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShiftMultiply</Label>
      <Comment> Params:&#xD;
 A: multiplicand&#xD;
 Y: number of high bits of [00] to use&#xD;
 [00]: multiplier (high Y bits are used)&#xD;
&#xD;
 Returns:&#xD;
 [02:03]: product&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78796</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mutliply q-speed by [00].&#xD;
&#xD;
 Q-speed has the default value $20 set when entering the room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78807</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Why AND with $18?</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78804</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The absolute X increment for the current angle is now in [02:03].&#xD;
&#xD;
 If angle &gt;= $10, then the monster is in the top half of circle going left.&#xD;
&#xD;
 DASM.EXPR: ObjAngleWhole&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78866</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The absolute Y increment for the current angle is now in [02:03].&#xD;
&#xD;
 If (angle - 8) &gt;= $10, then the monster is in the right half of circle going up.&#xD;
&#xD;
 DASM.EXPR: ObjAngleWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78829</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L133ED_AddToX</Label>
      <Comment> Else angle &lt; $10. So, the monster is in the bottom half of circle going right.&#xD;
 Add the product's fraction to the X coordinate fraction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78813</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract the product's fraction from the X coordinate fraction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78822</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> And subtract the product's whole part from the X coordinate with carry.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78838</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> And add the product's whole part to the X coordinate with carry.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78844</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Now rotate the Y coordinate.&#xD;
&#xD;
 Look up the cosine for the current angle, and store it in [00].&#xD;
 The cosine corresponds to the sine offset by a quarter circle (8).&#xD;
&#xD;
 DASM.EXPR: ObjAngleWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78887</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> And subtract the product's whole part from the Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78892</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1342C_AddToY</Label>
      <Comment> Else (angle - 8) &lt; $10. So, the monster is in the left half of circle going down.&#xD;
 Add the product's fraction to the Y coordinate fraction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78901</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> And add the product's whole part to the Y coordinate with carry.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78765</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatraSines</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78858</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Multiply q-speed by [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78878</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract the product's fraction from the Y coordinate fraction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76758</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatraChild1RotationCosineBits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76760</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatraChild1RotationSineBits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76759</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatraChild2RotationBits</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76006</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L128E6</Label>
      <Comment> Starting location is ($40, $8D) and direction is 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76021</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Each segment is flagged initialized and ready to update.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76027</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This Lamnola that's making additional segments is in slot 1.&#xD;
 Copy its object attributes, HP, and type to the others.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76048</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 Only the heads in slots 5 and $A have a direction and [0380][X] set.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76072</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO:&#xD;
 Do the heads not count?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76060</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Remember the object type, and set speed to (object type - $39):&#xD;
 1 or 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76644</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PatraManeuverTime</Label>
      <Comment> TODO:&#xD;
 Was this intended to be an array of two elements?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76400</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Lamnola_UpdateHead</Label>
      <Comment> If X coordinate is not a multiple of 8, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76323</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the facing direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76329</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the facing direction.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If still alive, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76340</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the current segment's HP to the initial value in anticipation&#xD;
 of bringing this segment back to life.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76345</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Find the tail of the lamnola that the current segment belongs to.&#xD;
&#xD;
 From the lowest slot, look for one that has the original lamnola&#xD;
 object type.&#xD;
&#xD;
 The goal is to swap the current dead segment with the tail segment.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76362</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the timer for the dead dummy object that will replace the tail.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76367</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the current dead segment's invincibility timer, X, and Y&#xD;
 to the tail segment.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76383</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the tail segment found is a head, then the whole lamnola died.&#xD;
 So, return and leave it dead.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76391</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change the tail segment to the dead dummy object, and&#xD;
 bring the current segment back to life.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76293</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Each segment is a full 16x16 object. But, it's drawn as a narrow,&#xD;
 half-width object. So, center it by temporarily adding 4 to X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76292</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76320</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the X coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76298</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The speed is 1 or 2. By swapping them, you get sprite attributes&#xD;
 to store in [03].&#xD;
&#xD;
 DASM.EXPR: Lamnola_Speed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76305</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the segment is a head, then use tile $9E, else $A0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76337</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, the segment is dead.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76271</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we have the magic clock, then go draw and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1295</Address>
      <AddressType>InternalRam</AddressType>
      <Label>LamnolaViableDirMask</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76279</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the current segment is a head, then update the direction it's facing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76580</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Lamnola_Move</Label>
      <Comment> This code is similar to 04:96EB Digdogger_Move.&#xD;
&#xD;
 Change coordinates by the appropriate speed according to the direction.&#xD;
&#xD;
 Start with a mask of $A1 in [02]:&#xD;
 - low nibble represents the right direction&#xD;
 - high nibble is used to set or clear carry as we go along&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76584</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If direction has a right component (1), then add offset to X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76598</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B36_Left</Label>
      <Comment> If direction has a left component (2), then subtract offset from X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76600</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 7 of mask $A1 sets Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76613</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B45_Down</Label>
      <Comment> If direction has a down component (4), then add offset to Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76615</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 6 of mask $A1 clears Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76628</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B54_Up</Label>
      <Comment> If direction has an up component (8), then subtract offset from Y coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76630</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bit 5 of mask $A1 sets Carry now.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76406</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If (Y + 3) is not a multiple of 8, then return.&#xD;
 We had to account for the usual offset of 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76415</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Will loop 4 times, propagating directions down the chain,&#xD;
 by pulling from the bottom.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76419</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Choose the tail index of the lamnola that the current segment belongs to.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76427</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12A8B_PropagateDirs</Label>
      <Comment> Loop over every segment under the head, starting from the tail.&#xD;
 Copy the next segment's direction to the current one in this loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76438</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this head segment is not aligned with a square, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76444</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If (Y + 3) is not a multiple of $10, then return.&#xD;
 We had to account for the usual offset of 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76453</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the opposite of the facing direction in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76467</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make a mask of the inverted bits of the opposite direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76472</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There's a 50% chance of going to try to turn toward Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76504</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12AD8_SetDirAndCheckTiles</Label>
      <Comment> Change the facing direction to the direction found.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76480</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the next random number into Y register.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76486</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12AC6_LoopFindPerpendicular</Label>
      <Comment> Loop to rotate the direction bit over the mask.&#xD;
 The goal is to calculate a direction perpendicular to the monster's&#xD;
 facing direction.&#xD;
&#xD;
 Shift right the copy of the direction.&#xD;
 If the direction bit rolled off the low end, then roll it onto the high end.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76478</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, we randomly choose a perpendicular direction.&#xD;
 Load the monster's facing direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76491</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12ACB</Label>
      <Comment> If the current direction bit is masked off, then we've reached&#xD;
 the opposite direction. Loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76496</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Y register &gt;= $40, then break out of the loop.&#xD;
 So, 75% of the time, if horizontal, then turn up, else left.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76482</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Based on it, there's a 50% chance of skipping the loop,&#xD;
 to keep moving straight.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76500</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Y register to $40 in order to break out of the loop next time;&#xD;
 and loop again now.&#xD;
 So, 25% of the time, if horizontal, then turn down, else right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76506</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set moving direction [0F] for boundary and tile checks.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76511</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not blocked by the room boundary, then go check tile collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76515</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12AE3_FindNonOpposite</Label>
      <Comment> Else it was blocked. So, load the facing direction in preparation&#xD;
 for looking for any non-opposite direction that is not blocked.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76517</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12AE5_LoopFindNonOpposite</Label>
      <Comment> Shift right the copy of the direction.&#xD;
 If the direction bit rolled off the low end, then roll it onto the high end.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76522</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12AEA</Label>
      <Comment> If the current direction bit is not masked off, then go check the&#xD;
 room boundary in this direction.&#xD;
 Else we've reached the opposite direction. Loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76529</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12AF1_CheckTileCollision</Label>
      <Comment> We found a direction that was not blocked by the room boundary.&#xD;
 Check tile collision. If blocked by a tile, then go look for another direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76537</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12AF9_Exit</Label>
      <Comment> TODO: confirm this&#xD;
&#xD;
 If there were a room that had lamnolas, and they could get&#xD;
 surrounded on 3 sides, then the loop above would get stuck in&#xD;
 an infinite loop.&#xD;
&#xD;
 But, the only room with that configuration has those blocks&#xD;
 blocked off with a push block, which can only be pushed after&#xD;
 all monsters are killed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76577</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B21</Label>
      <Comment> Go test this direction for collisions with tiles or the room boundary.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76538</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12AFA_TurnTowardLink</Label>
      <Comment> Find the horizontal direction toward Link and store it in [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76551</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B07</Label>
      <Comment> Find the vertical direction toward Link and store it in [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76564</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B14</Label>
      <Comment> If the horizontal direction toward Link is not allowed, then&#xD;
 go check the vertical direction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76571</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the horizontal direction toward Link is the same direction&#xD;
 that Link is facing, then go test it for tile and room boundary collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76575</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B1F_SetVertical</Label>
      <Comment> Load the vertical direction toward Link in order to test it for&#xD;
 room boundary and tile collision.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70013</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Wallmaster_State1</Label>
      <Comment> If the monster has been shoved, then shove it and go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69867</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L110EB</Label>
      <Comment> State 0.&#xD;
&#xD;
 If Link's object timer is active, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69871</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link is halted, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69878</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L110F6_State0</Label>
      <Comment> State 0. Idle/Waiting inside wall&#xD;
&#xD;
 If  (Link's X &lt; $29 or &gt;= $C8)&#xD;
 and (Link's Y &lt; $6D or &gt;= $B5),&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69898</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1110A_CheckLeftAndRight</Label>
      <Comment> Check whether Wallmaster should come out of the left or right wall.&#xD;
&#xD;
 If Link's X &lt;&gt; $20 nor $D0, then go check the top and bottom walls.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69937</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11131_CheckTopAndBottom</Label>
      <Comment> Check whether Wallmaster should come out of the top or bottom wall.&#xD;
&#xD;
 If Link's Y &lt;&gt; $5D nor $BD, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69947</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1113B</Label>
      <Comment> Store Link's Y as the major coordinate in [01],&#xD;
 and Link's X as the minor coordinate [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69908</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11114</Label>
      <Comment> Store Link's X as the major coordinate in [01],&#xD;
 and Link's Y as the minor coordinate [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69916</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pass "up" as decreasing direction along wall in [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69955</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pass "left" as decreasing direction along wall in [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70242</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wallmaster_CalcStartPosition</Label>
      <Comment> Params:&#xD;
 A: offset of first instruction for left wall (0)&#xD;
    or top wall ($20)&#xD;
 Y: Link's minimum major coordinate&#xD;
 [00]: Link's coordinate along minor axis&#xD;
 [01]: Link's coordinate along major axis&#xD;
 [02]: a decreasing direction along the wall (left or up)&#xD;
&#xD;
 Returns:&#xD;
 Y: index of initial major coordinate of Wallmaster&#xD;
 [04]: initial minor coordinate of Wallmaster&#xD;
&#xD;
 Store the initial offset for this axis.&#xD;
&#xD;
 DASM.EXPR: Wallmaster_ObjStep&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70245</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [03] holds the Link's minimum major coordinate.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70247</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link is still (input dir = 0), then use distance $24, else $32.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70278</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11286</Label>
      <Comment> Add the distance and Link's minor coordinate to calculate&#xD;
 Wallmaster's initial minor coordinate to store in [04].&#xD;
 In general, the monster will be put in front of Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70256</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11270</Label>
      <Comment> If Link is facing in the direction passed in (which decreases), then:&#xD;
 1. negate the distance&#xD;
 2. add 8 to the instruction offset to access&#xD;
    the opposite direction for the same wall&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70285</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's major coordinate &lt;&gt; the minimum major coordinate, then&#xD;
 he's on the farther wall. Add $10 to the instruction offset &#xD;
 to access the block for the other direction along the same axis,&#xD;
 and increment the index for the Wallmaster's initial major coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70283</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> By default, will return index 0 to choose the minimum value&#xD;
 for Wallmaster's initial major coordinate. This will be returned,&#xD;
 if Link is at the wall with a smaller major coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70287</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [03] Link's minimum major coordinate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70281</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [04] Wallmaster's initial minor coordinate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70279</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [00] Link's minor coordinate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70258</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [02] reference decreasing direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69920</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link's minimum major coordinate (X at left wall)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69959</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link's minimum major coordinate (Y at top wall)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69922</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Offset 0 for first horizontal wall element in instruction block</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69961</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Offset $20 for first vertical wall element in instruction block</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69927</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Y coordinate to initial minor value returned.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69971</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set X coordinate to initial minor value returned.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69966</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set Y coordinate according to the index returned.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69931</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set X coordinate according to the index returned.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69856</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WallmasterInitialXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69858</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WallmasterInitialYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69792</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WallmasterDirsAndAttrsLeft</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69975</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the facing direction for the first step.&#xD;
&#xD;
 DASM.EXPR: Wallmaster_ObjStep&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69985</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: why object 1 timer?&#xD;
&#xD;
 Set object slot 1's timer to $60, this monster's QSpeed to $18,&#xD;
 and animation counter to 8.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69999</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset grid offset, tiles crossed, and movement frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70010</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start Wallmaster state 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70099</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L111D3_Wallmaster_DrawAndCheckCollisions</Label>
      <Comment> If Link was captured, then go draw Link and Wallmaster specially.&#xD;
&#xD;
 DASM.EXPR: ObjCaptureTimer&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70023</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11187_CheckStunned</Label>
      <Comment> If we have the magic clock or the monster is stunned, then&#xD;
 go draw and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70032</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0F] moving direction</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70037</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If grid offset &lt;&gt; $10 nor $F0 (so not square aligned), then&#xD;
 go draw and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70048</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L111A0</Label>
      <Comment> Truncate grid offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70053</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance the step.&#xD;
&#xD;
 DASM.EXPR: Wallmaster_ObjStep&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70056</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set facing direction to the one for this new step.&#xD;
&#xD;
 DASM.EXPR: Wallmaster_ObjStep</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70066</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increase the count of tiles crossed.&#xD;
&#xD;
 DASM.EXPR: Wallmaster_ObjTilesCrossed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70069</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the monster has crossed less than 7 tiles, then&#xD;
 go draw and check collisions.&#xD;
&#xD;
 DASM.EXPR: Wallmaster_ObjTilesCrossed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70076</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> It has reached the end of a trip.&#xD;
&#xD;
 If Wallmaster did not capture Link, then go set state to 0 and return.&#xD;
&#xD;
 DASM.EXPR: ObjCaptureTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70081</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> At the end of a trip where Link was captured:&#xD;
 1. hide the special sprites used by Wallmaster&#xD;
 2. go to mode 3 "unfurl" to go the level's entrance&#xD;
 3. reset Link's state, so he's idle&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70107</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If after checking object collisions, Link was captured, then&#xD;
 halt Link and keep him from being shoved.&#xD;
&#xD;
 DASM.EXPR: ObjCaptureTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70210</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wallmaster_PrepareToDraw</Label>
      <Comment> 8 screen frames an animation frame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70120</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L111E8</Label>
      <Comment> Remember the index of the first sprite that will be used to draw,&#xD;
 because the drawing routine will cycle the sprites.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70123</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the sprite index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the sprite index</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70134</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the offset of the left sprite record in [00],&#xD;
 and the right one in [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70173</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1121D_DrawWithCapturedLink</Label>
      <Comment> Draw Wallmaster with captured Link.&#xD;
&#xD;
 First, put Link right where the monster is.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70148</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The default image is the hand open.&#xD;
 If animation frame = 0, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70156</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Animation frame 1 uses Wallmaster frame image 1, which&#xD;
 uses tiles $9C/$9D on the left and $9E/$9F on the right.&#xD;
 The right side is correctly the right side of a closed hand.&#xD;
 But the left side is Keese. So, we have to patch the left&#xD;
 side to use the common left side of the hand -- $AC/$AD.&#xD;
&#xD;
 Keep in mind that left and right sprites might be flipped.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70215</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> For the current step, look up the sprite flipping attributes.&#xD;
&#xD;
 DASM.EXPR: Wallmaster_ObjStep</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70223</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Combine them with palette row 5 (blue)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70228</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the sprite attributes for this step have horizontal flipping ($40),&#xD;
 then mask it off, and turn on horizontal flipping with [0F].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70309</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wallmaster_PutSpriteBehindBgIfNeeded</Label>
      <Comment> Loop twice, from 1 to 0, in order to check the left and right&#xD;
 extents of the sprite (X and X+8).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70302</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Wallmaster_PutSpritesBehindBgIfNeeded</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3833</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SpriteRelativeExtents</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70311</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L112A7_LoopExtent</Label>
      <Comment> If sprite X + extent &gt;= $E9 or &lt; $18, then&#xD;
 add priority attribute to show this sprite behind the background.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70193</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Force animation frame 1: hand closed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70201</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store the offsets of the sprites to show over Link&#xD;
 ($10 and $11) in [00] and [01] for use in patching the right sprite.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70207</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go patch up the sprites.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69808</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WallmasterDirsAndAttrsRight</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69824</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WallmasterDirsAndAttrsTop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69840</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WallmasterDirsAndAttrsBottom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25370</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitTrap_Full</Label>
      <Comment> Copy this parent/generator object's attributes to [01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25418</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateTrap_Full</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25375</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Assume we're initializing trap object type $49 that makes 6 traps.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25377</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The individual trap objects to make will be of type $49.&#xD;
 Store it in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25381</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object type we're initializing is not $49 (as in it's $4A),&#xD;
 then we'll make 4 traps.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25388</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L632C_LoopTrap</Label>
      <Comment> Loop over each trap to make, from the last index (5 or 3) to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25390</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the loop index to the current object slot, and switch the X register to it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25358</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TrapXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25364</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TrapYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25394</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the location for this iteration's individual trap.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25342</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitOneSimpleObject</Label>
      <Comment> Params:&#xD;
 [00]: object type&#xD;
 [01]: object attributes&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25422</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 0. Sensing.&#xD;
&#xD;
 If the absolute vertical distance between Link and the trap &gt;= $E,&#xD;
 then go see if the horizontal distance is shorter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6586</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Person_DrawAndCheckCollisions_Common</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6589</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If the person is flagged dead, then&#xD;
 enable fireballs from the two flames, and reset the metastate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6602</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Person_Draw</Label>
      <Comment> Either way, draw the object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25579</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Trap_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25469</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L637D_CheckHorizontal</Label>
      <Comment> If the horizontal distance between Link and the trap &gt;= $E,&#xD;
 then this trap definitely wasn't triggered.&#xD;
 Go draw and check collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25446</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6366</Label>
      <Comment> Remember the original X coordinate.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25434</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Determine the horizontal direction toward Link;&#xD;
 and if Link and the trap are at the same X, then we can't move&#xD;
 along this axis. Go see about moving vertically.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25451</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set facing direction to the horizontal one that we determined.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25412</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TrapAllowedDirs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25454</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the direction we determined is not allowed for this trap, then&#xD;
 go draw and check collisions.&#xD;
&#xD;
 DASM.EXPR: TrapAllowedDirs-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25459</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance to state 1 with q-speed $70 (1.75 pixels a frame) (fast).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25481</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Determine the vertical direction toward Link;&#xD;
 and if Link and the trap are at the same Y, then we can't move&#xD;
 along this axis. Go draw and check object collisions.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25497</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6399_UpdateMovingStates</Label>
      <Comment> State 1 and 2.&#xD;
&#xD;
 Move in the direction it's facing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25493</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6395</Label>
      <Comment> We'll advance to state 1. Go remember the original Y coordinate,&#xD;
 set the vertical direction we determined, and other preparations.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25504</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Truncate the grid offset to square length ($10).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25514</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L63AA</Label>
      <Comment> The trap cannot be harmed. So, only check for collision with Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25517</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If moving horizontally, then set target coordinate in [00] to $78&#xD;
 and current coordinate to the trap's X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25529</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else moving vertically. Set target coordinate in [00] to $90&#xD;
 and current coordinate to the trap's Y.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25569</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L63E1_FinishState2</Label>
      <Comment> Finish handling state 2.&#xD;
&#xD;
 If the current coordinate = original coordinate, then go to state 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25535</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L63BF_Finish</Label>
      <Comment> If in state 2, then go finish handling it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25541</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Finish handling state 1.&#xD;
&#xD;
 Get the distance between the current coordinate and the target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25548</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If distance &gt;= 5, go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25552</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else reverse direction, and advace to state 2&#xD;
 with q-speed $20 (0.5 pixels a frame) (slow).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66461</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 0.&#xD;
&#xD;
 Reset horizontal and vertical position fractions.&#xD;
&#xD;
 DASM.EXPR: Fireball_ObjPosFracX&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66508</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L103CC_State1</Label>
      <Comment> State 1.&#xD;
&#xD;
 Fireballs are delayed and visible for a few frames before moving.&#xD;
 If timer &lt;&gt; 0, go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66467</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link is the target. So, register A has 0 -- his object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66470</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Remember the horizontal and vertical directions toward target.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66480</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the facing direction to the combination of the two.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66567</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Fireball_MoveOneAxis</Label>
      <Comment> Params:&#xD;
 A: q-speed&#xD;
 Y: position fraction&#xD;
 [0F]: movement direction&#xD;
&#xD;
 Returns:&#xD;
 A: position fraction&#xD;
&#xD;
 Load the q-speed and position fraction from the parameters.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66522</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L103DA_Move</Label>
      <Comment> A movement routine is used that works along one axis.&#xD;
 So, load its parameters, and call it for each axis individually.&#xD;
&#xD;
 First, load the horizontal direction into [0F].&#xD;
&#xD;
 DASM.EXPR: Fireball_ObjDirToTargetX&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66539</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Second, load the vertical direction into [0F].&#xD;
&#xD;
 DASM.EXPR: Fireball_ObjDirToTargetY&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66512</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the room boundary blocks the fireball, then destroy it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66527</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the horizontal q-speed and position fraction,&#xD;
 move, then save the position fraction.&#xD;
&#xD;
 DASM.EXPR: Fireball_ObjQSpeedX&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66544</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the vertical q-speed and position fraction,&#xD;
 move, then save the position fraction.&#xD;
&#xD;
 DASM.EXPR: Fireball_ObjQSpeedY&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66556</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L103FC_CheckCollisionAndDraw</Label>
      <Comment> Check for collision with Link. If hit, then go destroy the fireball.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66577</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return the updated position fraction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66501</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set state to $10: monster shot active.&#xD;
 Set object timer to $10, so it's seen but delays a little before moving.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66440</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FireballQSpeedsX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66448</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FireballQSpeedsY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66489</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the horizontal and vertical q-speeds.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67652</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the timer has not expired, then go draw,&#xD;
 and see if the shooter's still alive.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67656</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the arrow is sparking, then go update the base arrow.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67665</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the arrow is not flying, then&#xD;
 go handle it bouncing off of Link's shield.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67669</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: But is this necessary?&#xD;
 Set the moving direction in [0F].&#xD;
 Then go update the base arrow.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67676</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1085C_CheckShooter</Label>
      <Comment> If the shooter is gone, then reset the arrow's object timer;&#xD;
 so that it flies right away.&#xD;
&#xD;
 DASM.EXPR: ObjRefId&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67692</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the arrow is no longer flying, then&#xD;
 go handle it sparking or bouncing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67704</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If [06] = 0, then there was no collision with Link that harmed him&#xD;
 Either there was no collision at all, or it bounced off of the shield.&#xD;
 So, return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67708</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else there was a collision with Link that harmed him.&#xD;
 So, destroy the arrow.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130731</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> First metastate of death spark</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitRupeeStash_Full</Label>
      <Comment> When initializing, this object makes other objects that&#xD;
 each have the same object attributes and type as this one.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25317</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds object attributes</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25321</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [01] holds object type $35 (rupee stash)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25323</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop over $A rupee stash objects to make&#xD;
 -- each one now representing an individual rupee&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25294</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RupeeStashXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25304</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RupeeStashYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25328</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the coordinates for one rupee stash/rupee.&#xD;
&#xD;
 DASM.EXPR: RupeeStashXs-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25333</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: RupeeStashYs-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25582</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRupeeStash_Full</Label>
      <Comment> Save the current object slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25632</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6420_ExitRestoreX</Label>
      <Comment> Restore the current object slot.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25625</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Rupee item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25627</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Rupee item slot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25622</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6416_DrawRupee</Label>
      <Comment> Draw a rupee.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25584</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link is not close enough (&lt; 9 pixels in both axes), then&#xD;
 go draw.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25608</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else Link is close enough. Add 1 rupee, and destroy this object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25614</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once you've taken one, it counts as taking them all&#xD;
 once you leave the room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67466</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitPondFairy</Label>
      <Comment> Play "item taken" sound effect.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67471</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The fairy goes at location ($78, $7D).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78371</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawFairy</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69015</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 0.&#xD;
&#xD;
 If Link is not at the edge of the pond (Y=$AD), then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69021</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's X &lt; $70 or &gt;= $81, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69031</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link is at the edge of the pond. Advance to state 1,&#xD;
 halt Link, and start filling hearts.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69073</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save and reset Link's state.&#xD;
&#xD;
 TODO: but why, since Link is halted?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69044</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 1. Flying and filling hearts.&#xD;
&#xD;
 If still filling hearts, then go draw Link and hearts.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69054</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10DBE_CheckState2</Label>
      <Comment> If state &lt;&gt; 2 (so, it's 3), then return.&#xD;
&#xD;
 Note that the first time here is when we fall thru from 8DBC.&#xD;
 In this case, A has $50 -- the value that Link's object timer&#xD;
 was set to, and we'll return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69048</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not filling hearts anymore, then go to state 2,&#xD;
 and set Link's object timer to $50, to keep showing hearts&#xD;
 a little while after we finish filling hearts.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69068</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10DCC_DrawLinkAndHearts</Label>
      <Comment> TODO: but why, since Link is halted?&#xD;
&#xD;
 Reset the input direction, so that Link doesn't animate&#xD;
 when drawing him.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69058</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State = 2.&#xD;
&#xD;
 If Link's timer &lt;&gt; 0, then go draw Link and hearts.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69062</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else go to state 3, and unhalt Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69011</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not in state 0, then go handle states 1 to 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69081</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore Link's state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69087</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69091</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PondHeartStartAngles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>7</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69098</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PondFairy_MoveHearts</Label>
      <Comment> Loop over each heart from object slot 2 to 9.&#xD;
&#xD;
 Even though they are not standalone objects, their info&#xD;
 is stored in those object slots.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69100</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10DEC_LoopHeart</Label>
      <Comment> If the current heart's state &lt;&gt; 0, then go move it.&#xD;
 Else we have to wait for it to come out at the right time.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69104</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The current heart's state = 0.&#xD;
&#xD;
 If object slot = 2, then go make it appear. This is the first&#xD;
 heart to show up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69108</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Object slot &lt;&gt; 2. If the state of the heart in slot 2 = 0, then&#xD;
 go start over.&#xD;
&#xD;
 TODO:&#xD;
 Is it possible to jump from here? This looks like an infinite loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69112</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up the starting angle of this heart with the index&#xD;
 (object slot - 3). If the first heart has not reached this angle,&#xD;
 then loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69125</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10E05_SetUpHeart</Label>
      <Comment> Set up this heart. Set its state to 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69127</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69131</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Starting angle $18 (N).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69136</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This heart is right above the fairy. Set its X the same as the fairy's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69140</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This heart is right above the fairy. Set its Y $1C pixels above the fairy.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69147</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10E1B_MoveHeart</Label>
      <Comment> Decrease the angle by $00.60.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69156</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Rotate the heart's location by the change in angle.&#xD;
 Use 6 for the number of bits of sine/cosine to use&#xD;
 for a large ring.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69164</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69178</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69180</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10E3C_NextLoopHeart</Label>
      <Comment> Bottom of the loop.&#xD;
 Increase the object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69172</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The variable for the currently updating object slot has to be&#xD;
 set to the heart's object slot for this drawing routine to work.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130680</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitGrumble</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19124</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitGrumble_Full</Label>
      <Comment> Grumble Goriya goes at location ($78, $80).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19131</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Store text selector $24.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19136</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the low VRAM address of the first character to transfer&#xD;
 to the front of the first line in NT0. It's at index 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19142</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Grumble already got the food, then&#xD;
 reset his type and state to get rid of him.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19155</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayCharacterSfx</Label>
      <Comment> "item taken/character" sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19546</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGrumble_Full</Label>
      <Comment> If state &lt;&gt; 3, then go check collisions and draw every frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19609</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGrumble3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19580</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGrumble1</Label>
      <Comment> If there's no food in object slot $F, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19200</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Person_CheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19203</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the person died, then Link hit him. So, start shooting&#xD;
 fireballs, then reset the metastate, so that he's not dead.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19552</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In state 3, the person is translucent by drawing&#xD;
 (and checking object collisions) every other frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19588</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else halt Link and play the "secret found" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19597</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Person_FlagItemTakenAndAdvanceState</Label>
      <Comment> Flag the secret/item of this room taken.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18418</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CueTransferBufAndAdvanceState</Label>
      <Comment> Params:&#xD;
 A: selector&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19604</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cue transfer record of the blank textbox lines,&#xD;
 and go to the next state, where a transfer record is cued&#xD;
 to clear cave/person wares.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19600</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set object timer $40 for when we get to state 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127523</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_EndMoveAndAnimate_Bank1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19612</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the timer has not expired, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19616</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Deactivate the food object in slot $F.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1629</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvFood</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19621</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get rid of the food from the inventory.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19624</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Make Link idle again, and reset this object's type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107037</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlankTextBoxLines</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107046</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BlankPersonWares</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18935</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePersonState_CueTransferBlankPersonWares</Label>
      <Comment> Also blanks the third line of text.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127537</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_EndMoveAndDraw</Label>
      <Comment> Description:&#xD;
 Draw Link without animating by keeping the animation counter fixed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127515</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_EndMoveAndDraw_Bank1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127529</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Link_EndMoveAndDraw_Bank4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18456</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the person's timer has not expired, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18460</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the timer to wait 6 frames after the next character about&#xD;
 to be shown.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18445</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TextboxCharTransferRecTemplate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18464</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the 5 bytes of the textbox character transfer record template&#xD;
 to the dynamic transfer buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18475</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L482B_WriteChar</Label>
      <Comment> Replace the low byte of the VRAM address with the one&#xD;
 where the next character should be written.&#xD;
&#xD;
 DASM.EXPR: PersonTextPtr&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18481</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the low VRAM address for the next character.&#xD;
&#xD;
 DASM.EXPR: PersonTextPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16384</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PersonTextAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>76</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18484</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use the person text selector to look up the address of the&#xD;
 text for the textbox. Store the address in [00:01].&#xD;
&#xD;
 DASM.EXPR: PersonTextSelector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18498</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the person text current character index.&#xD;
&#xD;
 DASM.EXPR: PersonTextIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18501</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the index variable to point to the next character&#xD;
 for next time.&#xD;
&#xD;
 DASM.EXPR: PersonTextIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18504</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the current character.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18506</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the character is $25, then it's a special space. It will still&#xD;
 take up space, but will not take time to show -- meaning that&#xD;
 we'll go look up the next character to transfer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18512</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We have a non-space character. Put it in the transfer record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18515</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the "heart taken/character" sound effect.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18520</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the high 2 bits of character element = 0, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17908</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UnhaltLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18526</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Determine an index based on the high 2 bits of the character element:&#xD;
   $80: 0&#xD;
   $40: 1&#xD;
   $C0: 2&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18538</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L486A_ChangeLine</Label>
      <Comment> The index chooses the low VRAM address of the start&#xD;
 of another line:&#xD;
   0: $C4: front of the second line&#xD;
   1: $E4: front of the third line&#xD;
   2: $A4: front of the first line&#xD;
&#xD;
 Look up the low VRAM address and store it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18450</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TextboxLineAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18544</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If index = 2, then we've reached the end of the text,&#xD;
 and low VRAM address is moved to the front of the first line.&#xD;
 So, advance the state of the person object, and unhalt Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18453</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePersonState_Textbox</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130664</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPerson</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18940</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPerson_Full</Label>
      <Comment> Point to the front of the first line in VRAM.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18979</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPersonA</Label>
      <Comment> The person goes at location ($78, $80).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19049</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPersonB</Label>
      <Comment> The person goes at location ($78, $80).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19076</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPersonC</Label>
      <Comment> The person goes at location ($78, $80).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18986</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract $4B from the object type to get the old man's index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18971</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UnderworldPersonTextSelectorsA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18993</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and store the text selector.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18999</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is the man that offers more bomb capacity, then&#xD;
 go see if the offer was flagged as already taken.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19026</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UnderworldPerson_DestroyIfTaken</Label>
      <Comment> Destroy this object if the secret/item was already taken.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19041</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UnderworldPersonTextSelectorsB</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19056</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract $4B from the object type to get the old man's index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19063</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and store the text selector.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19089</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the object type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19100</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the object type.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19090</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Subtract $4B from the object type to get the old man's index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19094</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and store the text selector.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19072</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UnderworldPersonTextSelectorsC</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19101</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Return, if this is not the man at the entrance of Level 9,&#xD;
 or Link has not gotten all the triforce pieces.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19112</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Otherwise, open the shutters, and destroy this object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130672</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPersonLifeOrMoney</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19008</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPersonLifeOrMoney_Full</Label>
      <Comment> The person goes at location ($78, $80).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19020</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the front of the first line in VRAM.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19015</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set text selector for "life or money".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19366</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonLifeOrMoney_Full</Label>
      <Comment> In state 4, this person and the items are drawn every other frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19161</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPerson_Full</Label>
      <Comment> If level is not one of {3, 4, 6, 8, 9}, then&#xD;
 go handle people that do more than talk.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19357</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Person_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19178</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4AEA_DrawAndCheckCollisions</Label>
      <Comment> Else simply draw, check collisions, and show the text.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19192</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePersonState_ResetCharOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19199</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePersonState_DoNothing</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19217</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonComplex</Label>
      <Comment> In state 4, the person is shown every other frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19232</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is the "more bombs" man, then show a rupee&#xD;
 at ($78, $98) using room item object slot $13.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19269</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonComplexState_Begin</Label>
      <Comment> If this is the "more bombs" man, then show the price of the offer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19276</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> "-100"</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19280</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4B50</Label>
      <Comment> Set a timer of $A frames before showing characters,&#xD;
 and go to state 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19287</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonComplexState_SenseLink</Label>
      <Comment> If this is not the "more bombs" man, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19349</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonComplexState_DelayAndQuit</Label>
      <Comment> If the object timer has expired, then destroy this object.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107166</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombCapacityPriceTextTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19294</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's X &lt;&gt; $78, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19300</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the distance between Link's Y and the rupee's ($98) &lt; 6,&#xD;
 then go see if Link can pay for it.&#xD;
 Else return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19313</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4B71_CheckCanPay</Label>
      <Comment> If rupee count &lt; 100, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19322</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4B7A</Label>
      <Comment> Post 100 rupees more to subtract.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19334</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increase max bombs by 4, set the amount on hand to the max.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19346</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go mark this offer taken.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19329</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the "key taken" sound effect.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19403</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawLifeOrMoneyItems</Label>
      <Comment> Loop over each item to draw, from 1 to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19401</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LifeOrMoneyItemTypes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19399</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LifeOrMoneyItemXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19419</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to the room item object slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19424</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19405</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4BCD_LoopWare</Label>
      <Comment> Save loop index.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19407</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the X coordinate of the item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19412</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Y=$98, and look up the item type.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19430</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonLifeOrMoneyState_0</Label>
      <Comment> Delay in the next state $A frames before showing the first character.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19439</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonLifeOrMoneyState_2</Label>
      <Comment> Loop over each item to check, from 1 to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19434</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> "-1   -50" text selector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107174</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LifeOrMoneyCostTextTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19441</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4BF1_LoopWare</Label>
      <Comment> If Link's X doesn't match the item's, then go loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19448</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the vertical distance between the item and Link &lt; 6, then&#xD;
 go handle paying appropriately.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19487</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C1F_PayWithHeartContainer</Label>
      <Comment> The player chose the heart container.&#xD;
&#xD;
 If the number of heart containers &lt; 4, then&#xD;
 - leave the number of heart containers alone&#xD;
 - set HeartPartial to 0, so Link will die with one more hit&#xD;
&#xD;
 Then go flag this offer taken.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19464</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C08_Pay</Label>
      <Comment> If the player chose the heart container, go handle it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19468</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The player chose the money.&#xD;
 But if he doesn't have enough, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19477</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C15_PayWithMoney</Label>
      <Comment> Post 50 rupees more to subtract, and go flag this offer taken.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19507</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C33_Reduce</Label>
      <Comment> Store (HeartValues - 1 heart container) in [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19518</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get (HeartValues - 1 heart)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19524</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the result is negative, then make the full hearts 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19528</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C48</Label>
      <Comment> Combine the heart containers and full hearts, and store it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19533</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C4D_EndLifeOrMoney</Label>
      <Comment> "key taken" sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>16460</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PersonText</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1366</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75968</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GuardFireXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75973</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GuardFireYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75980</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L128CC</Label>
      <Comment> Look up and set the location of each object.&#xD;
&#xD;
 DASM.EXPR: GuardFireXs-1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75985</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: GuardFireYs-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75990</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Guard fire object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75998</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Replace the type of the object in slot 1 with $37: Zelda.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76216</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZelda_State1</Label>
      <Comment> State 1.&#xD;
&#xD;
 Draw Link, then return if the object timer &lt;&gt; 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76174</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> State 0.&#xD;
&#xD;
 If Link's X &lt; $70 or &gt;= $81, or Link's Y &lt;&gt; $95, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76190</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else Link is near enough to Zelda.&#xD;
 Go to state 1, and halt Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76196</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put Link at location ($88, $88) and facing left.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76206</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the Zelda fanfare.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76211</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a delay of $80 frames at the beginning of the next state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76223</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to mode $13.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76233</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mode $13 will start with a curtain furling effect.&#xD;
 Set up the decreasing column ($20), and the increasing column (1).&#xD;
 Prepare the background by filling the tile map with blank tile $24.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76243</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> [0A] tile to fill with</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76256</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the object has not been killed, then return.&#xD;
 Else change the object type to dead dummy.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94512</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeSubroom_AdvanceSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93005</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayoutCaveAndAvanceSubmode</Label>
      <Comment> Usual cave</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92997</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SubroomLayoutAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94571</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeB_Sub5_FillTileAttrsAndTransferTopHalf</Label>
      <Comment> An OW room that has the same NT attributes as a cave.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3474</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Put Link at the cave entrance ($70, $DD), and facing up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3465</Address>
      <AddressType>SaveRam</AddressType>
      <Label>InitModeB_EnterCave_Bank5</Label>
      <Comment> Save the submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3492</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Restore the submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3495</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Still initializing. A routine called here changed it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3506</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> When coming out of the cave eventually, this has to be set.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3501</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> Get Link ready to move automatically this number of pixels.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94592</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode_WalkCave</Label>
      <Comment> If reached the end of the walk, then go start updating.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94597</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move and draw facing up.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17913</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitCaveContinue</Label>
      <Comment> Get this cave's index (object type - $6A).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17920</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the person text selector by looking up the text selector byte&#xD;
 for this index, and masking it with $3F.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17826</Address>
      <AddressType>PrgRom</AddressType>
      <Label>OverworldPersonTextSelectors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17923</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the text selector byte before masking.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17929</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pop and mask the text selector byte with $C0 to get the&#xD;
 "pay" and "pick up" cave flags and store them in [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17934</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> At this point, the Y register still has the cave index.&#xD;
 Multiply it by 3 to get the offset of the first item in a set of 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17943</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop over the wares from 0 to 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18076</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the front of the first textbox line.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17967</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the top 2 bits of text selector byte in [03],&#xD;
 shift them to the bottom, and combine them with [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17945</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4619_CopyCaveBytes</Label>
      <Comment> Copy 3 item ID bytes from the Cave level block info.&#xD;
 Item ID's are in the low 6 bits, cave flags are in the high 2 bits.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17955</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy 3 prices from the Cave level block info.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17951</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the cave flags (high 2 bits) of the three items to [00] to [02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17961</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the wares copying loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17976</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the top 2 bits of item descriptor 2, shift them right 4 times,&#xD;
 and combine them with [00].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17986</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the top 2 bits of item descriptor 1, shift them right twice,&#xD;
 and combine them with [00] into CaveFlags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18071</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4697_ResetTextbox</Label>
      <Comment> Reset the current character index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17995</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The end result is a byte with 8 cave flags.&#xD;
&#xD;
 If cave flag "money game" is missing, then go finish up,&#xD;
 instead of choosing random amounts for the money game.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18139</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCavePerson</Label>
      <Comment> If in state 4, then every other frame skip drawing the person&#xD;
 and items; and go straight to the state code for each kind of cave.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18230</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawCavePerson</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18233</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the cave/person type &gt;= $7B, then the visual is a moblin.&#xD;
 So, go draw not mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18240</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else the old man, old woman, and shopkeeper are all mirrored.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1638</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvLetter</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18154</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the cave type is not $74 medicine shop,&#xD;
 or it is but the letter has not been used, then&#xD;
 go draw items and run the state code.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18168</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the letter is selected, and B is pressed, then go use the letter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18181</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4705_Unhalt</Label>
      <Comment> If Link is halted, then unhalt him.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18191</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L470F_UseLetter</Label>
      <Comment> The letter has been used.&#xD;
&#xD;
 Play the "secret found" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18196</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the letter state to used (2).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18199</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change the selected item slot to the potion's.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18295</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cave flag: Show prices</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18246</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CaveWareXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18256</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop over the wares to draw, from 2 to 0, indexed by [0421].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18264</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up and set the X coordinate for the current item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18269</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Y coordinate $98 for the item.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18273</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the item is nothing ($3F), then loop gain.&#xD;
&#xD;
 DASM.EXPR: CaveItemIds</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18282</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Switch to the room item object slot, and draw it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18287</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L476F_NextWare</Label>
      <Comment> Bottom of the item drawing loop. Decrement this index until &lt; 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18252</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cave flag: Show items</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18249</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawCaveItems</Label>
      <Comment> If the cave flags do not call for showing items, then&#xD;
 go see about showing prices.&#xD;
&#xD;
 DASM.EXPR: CaveFlags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18292</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4774_ShowPriceRupee</Label>
      <Comment> If the cave flags do not call for showing prices, then return.&#xD;
&#xD;
 DASM.EXPR: CaveFlags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18299</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Show a rupee at ($30, $AB).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18315</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCavePersonState_TransferPrices</Label>
      <Comment> If the cave flags do not call for showing prices, then&#xD;
 advance the state and return.&#xD;
&#xD;
 DASM.EXPR: CaveFlags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18122</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PriceListTemplateTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>17</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18433</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CopyPriceListTemplate</Label>
      <Comment> Copy $11 bytes of the price list template text to the dynamic transfer buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18318</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cave flag: Show prices</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18325</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> "X"</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18330</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the index of current price being formatted&#xD;
 and offset of price string.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18338</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L47A2_LoopPrice</Label>
      <Comment> Get the price of the current item.&#xD;
&#xD;
 DASM.EXPR: CavePrices&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18341</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it's 0, then store a space character in the text field [01], [02], [03].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18357</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the cave flags call for negative amounts, then&#xD;
 store a dash in prefix byte [04]. Else store a space ($24).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18365</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> "-"</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18416</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to the next state and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18369</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Move the dash closer to the number.&#xD;
&#xD;
 DASM.EXPR: CaveCurPriceOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18423</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwapSpaceAndSign</Label>
      <Comment> Params:&#xD;
 A: a character of the price string&#xD;
 [04]: prefix character&#xD;
&#xD;
 Returns:&#xD;
   If original A is not a space:&#xD;
     A:    original character&#xD;
     [04]: original prefix character&#xD;
   Else:&#xD;
     A:    original prefix character&#xD;
     [04]: original character&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18393</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add 4 to the base offset for the next string.&#xD;
&#xD;
 DASM.EXPR: CaveCurPriceOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18402</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Bottom of the price loop. Increment the index of the item until = 3.&#xD;
&#xD;
 DASM.EXPR: CaveCurPriceIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18412</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Delay $A frames at the beginning of the next state.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18554</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCavePersonState_TalkOrShopOrDoorCharge</Label>
      <Comment> If the cave flags call for choosing an item, then&#xD;
 go handle those kinds of caves.&#xD;
&#xD;
 DASM.EXPR: CaveFlags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18557</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cave flag: Choose/Pick up (1)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18560</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Advance to the end state, where the person is still shown.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18564</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If this is not the "door charge" old man, then return.&#xD;
 The person only talks.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18571</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Post 20 rupees to subtract.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18580</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mark this secret taken.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18739</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePersonState_DelayThenHide</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18934</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCavePersonState_DoNothing</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18584</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4898_CheckPickUp</Label>
      <Comment> This is a cave where the player chooses or touches an item:&#xD;
 - give item&#xD;
 - shop&#xD;
 - hint&#xD;
 - money game&#xD;
&#xD;
 If rupees are decreasing, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18589</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop over each item from 2 to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18594</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mask off the cave flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18591</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L489F_LoopWare</Label>
      <Comment> If this item is nothing, then loop again.&#xD;
&#xD;
 DASM.EXPR: CaveItemIds&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18596</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> No item</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18600</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Link's X &lt;&gt; item's X, then loop again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18607</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the vertical distance between Link and the item &lt; 6, then&#xD;
 go try to take it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18619</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L48BB_NextWare</Label>
      <Comment> Bottom of the item touch loop.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18623</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L48BF_PickedUp</Label>
      <Comment> Store the index of the item chosen.&#xD;
&#xD;
 DASM.EXPR: CaveChosenIndex&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18626</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If hint and money game cave flags are missing, then&#xD;
 go take an item given away, or buy it.&#xD;
&#xD;
 DASM.EXPR: CaveFlags</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18629</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Cave flags: Hint and Money game</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18633</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If have cave flag "money game", then go to state 5 and return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18637</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else have "hint" cave flag.&#xD;
&#xD;
 If rupees &lt; price, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18651</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L48DB_MadeWager</Label>
      <Comment> Go to state 5. It runs the hint cave and money game.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18645</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pass the price to pay for the hint.&#xD;
&#xD;
 DASM.EXPR: CavePrices</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18910</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PostDebit</Label>
      <Comment> Params:&#xD;
 A: amount&#xD;
&#xD;
 Add the amount paid to the rupees to subtract.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18663</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If rupees &lt; price, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18671</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pass the price to pay for the item.&#xD;
&#xD;
 DASM.EXPR: CavePrices</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18656</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L48E0_PickedUpWare</Label>
      <Comment> This is a shop, or something is being given away.&#xD;
&#xD;
 If "pay" cave flag is missing, then go try to take the item.&#xD;
&#xD;
 DASM.EXPR: CaveFlags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18677</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L48F5_TryToTake</Label>
      <Comment> If "heart requirement" cave flag is missing, then&#xD;
 go to take the item without further ado.&#xD;
&#xD;
 DASM.EXPR: CaveFlags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18684</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Check heart container requirements.&#xD;
&#xD;
 5 is the minimum for cave type $6C (white sword)&#xD;
 $C is the minimum otherwise&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18698</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the minimum of heart containers is met, then&#xD;
 go take the item without further ado.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18711</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Push the item ID</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18717</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Pop the item ID</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18712</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Flag the item taken by setting its ID to $FF.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18721</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blank textbox lines</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18726</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set timer to $40 for when we delay in state 4.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18730</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ClearPricesCaveFlag</Label>
      <Comment> Remove the "show prices" cave flag to get rid of the generic rupee.&#xD;
&#xD;
 DASM.EXPR: CaveFlags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18753</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCavePersonState_HintOrMoneyGame</Label>
      <Comment> If "hint" cave flag is missing, then go handle the money game.&#xD;
&#xD;
 DASM.EXPR: CaveFlags&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18760</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If cave type = $75, then use 0 for base offset of&#xD;
 the first set of text selectors, else 3 for the second.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18772</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the base offset and the index of the item chosen&#xD;
 to get the index of a text selector.&#xD;
&#xD;
 DASM.EXPR: CaveChosenIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18776</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Look up text selector by the index calculated above.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18782</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the front of the first line of the textbox.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18788</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset the character index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18834</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4992_HandleMoneyGame</Label>
      <Comment> Money game&#xD;
&#xD;
 If rupees &lt; $A, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18796</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Blank textbox lines</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18327</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WritePricesToDynamicTransferBuf</Label>
      <Comment> Params:&#xD;
 A: price character&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18801</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4971_HandleMoneyGameOrGiveaway</Label>
      <Comment> If cave type &lt; $7B, then go handle the money game.&#xD;
&#xD;
 This is a moblin giving away money.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18811</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write a price list into the dynamic transfer buf,&#xD;
 but with a space instead of "X".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18816</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> "key taken" sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18824</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to state 8 to do nothing but show the person.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18828</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Post the middle amount in [0431] to add.&#xD;
&#xD;
 DASM.EXPR: CavePrices+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18841</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> "key taken" sound effect</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18846</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy amounts in [0448][Y] for money game to prices [0430][Y].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18322</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WritePricesTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18860</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Go to state 8 to do nothing but show the person.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18918</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PrependSignToPrice</Label>
      <Comment> Params:&#xD;
 A: price&#xD;
 Y: offset from first character after "X"&#xD;
&#xD;
 If the amount is $14 or $32, then use "+", else "-".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18864</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Prepend the sign to each money game amount.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18007</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the test fails, then subtract $2B from the reference number.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17999</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Determine an index randomly with increasing probability,&#xD;
 from 6 to 1. Start with the following test:&#xD;
&#xD;
   If $FF &lt; Random, then go use index 6.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18888</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the amount chosen = 20 or 50, then add it;&#xD;
 else subtract it.&#xD;
&#xD;
 DASM.EXPR: CaveChosenIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18930</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L49F2</Label>
      <Comment> Copy the character to the first element after the "X",&#xD;
 offset by the parameter.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18013</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L465D_FoundPermutation</Label>
      <Comment> The index chooses the last offset of a permutation of three indexes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18016</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the permutation of 3 indexes to [046C] to [046E].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18028</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> With the first bit of another random number, choose 10 or 40&#xD;
 to put in [046F]. This is a random amount to lose.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18039</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put 10 in [0470]. This is a fixed amount to lose.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18044</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> With a different bit of the second random number,&#xD;
 choose 20 or 50 to put in [0471]. This is an amount to win.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17848</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MoneyGamePermutations</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17846</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MoneyGameLossAmounts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17866</Address>
      <AddressType>PrgRom</AddressType>
      <Label>MoneyGamePermutationEndIndexes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18057</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The 3 amounts are now in [046F] to [0471].&#xD;
 Reference these amounts using the permutation of indexes&#xD;
 in [046C] to [046E]; and copy them to [0448] to [044A].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18706</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveItemIds</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18709</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Mask off the cave flags.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18747</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HintCaveTextSelectors0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18750</Address>
      <AddressType>PrgRom</AddressType>
      <Label>HintCaveTextSelectors1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18902</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PostCredit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94551</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Transfer the OW palette again, because it was changed&#xD;
 for a cave.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83891</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetFadeCycleAndAdvanceSubmode</Label>
      <Comment> Params:&#xD;
 A: start index of cycle&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94587</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1717B_DisableSprite0Check</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93022</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayoutShortcutAndAdvanceSubmode</Label>
      <Comment> Offset of address of column directory of shortcut cave</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94515</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode9_FadeToDark</Label>
      <Comment> Light level -&gt; dark cellar cycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93026</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LayoutCellarAndAdvanceSubmode</Label>
      <Comment> Reset CurRow for when we start transferring rows&#xD;
 after laying out the room.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93030</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the offset of column directory address for the kind of cellar:&#xD;
 - tunnel $3E:   offset 4&#xD;
 - treasure $3F: offset 6&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107113</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CellarAttrsTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107101</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CaveBgPaletteRowsTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94508</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode9_TransferAttrs</Label>
      <Comment> Cellar NT attributes</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94531</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode9_FadeToLight</Label>
      <Comment> Dark cellar -&gt; light cellar cycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94617</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode9_EnterCellar</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94655</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a grid offset appropriate for the distance to travel:&#xD;
   ($5D - $41) = $1C = ($100 - $E4)&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94619</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Save the submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94626</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Restore the submode.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94629</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Each cellar can have two destination rooms: A and B.&#xD;
 Tunnels use both. Treasure rooms only use room A.&#xD;
&#xD;
 If the room that Link came from is the room A of this cellar,&#xD;
 then look up the X coordinate of the ladder on the left at index 0.&#xD;
 Else use index 1 to get the X coordinate on the right.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94647</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Link goes at Y=$41, and facing down.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7872</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7730_Gohma</Label>
      <Comment> This a Gohma, but if the current part [0F] is not an eye part (3 or 4),&#xD;
 then return, so that the hit doesn't register.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7882</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> If Gohma's eye state/frame image &lt;&gt; 3, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6197</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1835_Play</Label>
      <Comment> Else the game is not paused.&#xD;
&#xD;
 Synchronize the APU frame counter once a video frame.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7494</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SilenceSong</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6869</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DriveTune1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6348</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DriveTune0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7275</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DriveSong</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6217</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset all requests for sound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6202</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Drive each game sound channel.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6214</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1846_Paused</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6345</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L18C9_SilenceSong</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6364</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L18DC_CheckCurrentTune</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6370</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L18E2_ChangeTune</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6375</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L18E7</Label>
      <Comment> Get the index for the song bit: 1 to 8.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6385</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L18F1_KeepPlaying</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6417</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1911_PrepNote</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6429</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L191D_PlayNote</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6438</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1926_SilenceSample</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6458</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L193A_PlayArrowSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6475</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L194B_ContinueArrowSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6482</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1952_PlayStairsSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6489</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1959</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6493</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L195D_ContinueStairsSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6507</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L196B</Label>
      <Comment> DASM.EXPR: StairsSfxNotes-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6510</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L196E_PlaySfxNote</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6523</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L197B_SetSfxVolumeLength</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6533</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1985_SilenceSfxIfEnded</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6545</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1991</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6546</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1992_PlaySwordSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6553</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1999_ContinueSwordSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6560</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DriveEffect</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6617</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L19D9_PlayBombSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6624</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L19E0_ContinueBombSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6631</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L19E7_PlayFlameSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6638</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L19EE_ContinueFlameSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6653</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L19FD_PlaySeaSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6665</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A09_ContinueSeaSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6676</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A14</Label>
      <Comment> SFX counter &lt; $BF. Decrease volume slowly down to $10 --&#xD;
 when (counter MOD 8) = 7.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6696</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A28_SetSeaSfxParams</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6882</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1AE2_SilenceThenPlay</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6887</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1AE7_ChangeTune</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6892</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1AEC</Label>
      <Comment> Get the index for the song bit: 1 to 8.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6906</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1AFA_KeepPlaying</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6949</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1B25_PrepNote</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6962</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1B32_PlayNote</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6983</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1B47_CheckVibrate</Label>
      <Comment> If the tune is not one of "flute" or "Link dying", then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6996</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1B54</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7012</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1B64_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7045</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DriveSample</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7081</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1BA9_CheckBgSample</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7086</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1BAE_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7087</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1BAF_ChangeSampleLow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7091</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1BB3_ChangeSampleMid</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7095</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1BB7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7109</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1BC5</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7112</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1BC8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7171</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetSq0DutyAndSweep</Label>
      <Comment> Params:&#xD;
 X: duty byte&#xD;
 Y: sweep byte&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7181</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EmitSquareNote0</Label>
      <Comment> Params:&#xD;
 A: offset of a note in period table&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7200</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C20_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7201</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SetSq1DutyAndSweep</Label>
      <Comment> Params:&#xD;
 X: duty byte&#xD;
 Y: sweep byte&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7211</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EmitSquareNote1</Label>
      <Comment> Params:&#xD;
 A: note ID (offset of note in period table)&#xD;
&#xD;
 Returns:&#xD;
 Y: note ID&#xD;
 A: 0 if the note is a a rest&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7231</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EmitTriangleNote</Label>
      <Comment> Params:&#xD;
 A: offset of a note in period table&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7252</Address>
      <AddressType>PrgRom</AddressType>
      <Label>VibratePitch</Label>
      <Comment> Params:&#xD;
 A: note counter&#xD;
 X: period value&#xD;
&#xD;
 Returns:&#xD;
 X: (period - 1) to (period + 1)&#xD;
&#xD;
 If note counter &lt; $10, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7266</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C62_GoDown</Label>
      <Comment> If set, then subtract 1 from X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7270</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C66</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7271</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C67_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7272</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C68_KeepPlaying</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7286</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C76_ChangeSong</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7299</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C83</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7315</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C93_PlayFirstDemoPhrase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7319</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C97_PlayFirstUnderworldPhrase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7323</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C9B_PlayFirstOverworldPhrase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7325</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C9D_SetPrevPhraseIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7327</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1C9F_PlayNextPhrase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7354</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1CBA_PlayNextUnderworldPhrase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7366</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1CC6_PlayNextOverworldPhrase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7378</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1CD2_PlayNextDemoPhrase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7390</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1CDE_PlaySinglePhraseSong</Label>
      <Comment> Get the index for the song bit: 2 to 6.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7393</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1CE1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7397</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1CE5_PrepPhrase</Label>
      <Comment> DASM.EXPR: SongTable-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7468</Address>
      <AddressType>PrgRom</AddressType>
      <Label>KeepPlayingSong</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7487</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1D3F_SongEnded</Label>
      <Comment> If this is a song that repeats, then go play again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7508</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1D54_PlayAgain</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7511</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1D57_PrepNote</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7525</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1D65_PlayNote</Label>
      <Comment> If something is playing in tune channel 1, then&#xD;
 don't play a square note here.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7538</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1D72</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7549</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1D7D_SkipSq1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7555</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1D83_ApplySq1Effects</Label>
      <Comment> If something is playing in tune channel 1, then&#xD;
 skip effects for square channel 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7571</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1D93</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7598</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1DAE_HandleSq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7632</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1DD0_PlaySq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7645</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1DDD</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7656</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1DE8_SkipSq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7662</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1DEE_ApplySq0Effects</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7678</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1DFE</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7700</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E14</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7705</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E19_HandleTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7713</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E21</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7718</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E26_PrepNoteOrPassage</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7751</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E47_EndOfPassage</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7762</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E52</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7765</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E55_PrepNoteTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7786</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E6A_PlayNoteTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7800</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E78_ApplyTrgEffects</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7824</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E90</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7826</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E92_SetTrgLinear</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7841</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EA1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7859</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EB3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7891</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1ED3_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7904</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetSongNoiseNoteLength</Label>
      <Comment> Params:&#xD;
 A: control note&#xD;
&#xD;
 Returns:&#xD;
 A: note length&#xD;
 X: original control note&#xD;
&#xD;
 Rotate so that bits 0, 7, 6 move to bits 2, 1, 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7910</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GetSongNoteLength</Label>
      <Comment> Params:&#xD;
 A: control note&#xD;
&#xD;
 Returns:&#xD;
 A: note length&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8050</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PrepareCustomSongEnvelope</Label>
      <Comment> Returns:&#xD;
 A: starting custom envelope offset&#xD;
 X: duty byte $82&#xD;
 Y: sweep byte $7F&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8060</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShapeSongVolume</Label>
      <Comment> Params:&#xD;
 Y: envelope offset&#xD;
&#xD;
 Returns:&#xD;
 A: duty/volume value&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8072</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F88</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8079</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F8F_ReturnValue</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17936</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4610</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18003</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4653_ChoosePermutation</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18018</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4662_CopyPermutation</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18054</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4686</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18059</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L468B_ArrangeAmounts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18151</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L46E7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18190</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L470E</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18204</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L471C_DrawItems</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18207</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L471F_UpdateCavePersonDirect</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18243</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4743</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18261</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4755_LoopWare</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L478A_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18354</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L47B2_Format</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18367</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L47BF_Align</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18420</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IncCaveState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18432</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4800</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18435</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4803</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18466</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4822</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18553</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4879_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18583</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4897_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18695</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4907</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18703</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L490F_Take</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18738</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4932_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18746</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L493A_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18771</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4953</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18848</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L49A0</Label>
      <Comment> DASM.EXPR: MoneyGameAmounts</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19038</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_PlayCharacterSfx</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19123</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4AB3_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19175</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4AE7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19216</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4B10</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19229</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4B1D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19254</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4B36_HandleState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19312</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4B70_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19356</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4B9C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19378</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4BB2_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19384</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4BB8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19460</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C04_NextWare</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19463</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C07_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19558</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C66_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19567</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4C6F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19629</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPerson_DoNothing</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19789</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4D4D_LoopBlock</Label>
      <Comment> Loop over each block.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19844</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferPatternBlock_Bank1</Label>
      <Comment> Params:&#xD;
 [00:01]: source address&#xD;
 [03:02]: size&#xD;
 A: low byte of desination VRAM address&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19849</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L4D89_Loop</Label>
      <Comment> Load and transfer one byte to VRAM.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24714</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L608A_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24836</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6104_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24891</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L613B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24896</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6140_LoopTileObj</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24915</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6153_Found</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24952</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6178_NextTileObj</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24979</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6193</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24982</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6196_FillHearts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25008</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L61B0_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25055</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L61DF_CopyPaletteRecord</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25074</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L61F2_ReplaceColors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25142</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6236_NextTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25147</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L623B_ReturnX0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25150</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L623E_TestTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25182</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L625E</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25238</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6296_FindObjAtLocation</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25268</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L62B4_NextObjAtLocation</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25281</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L62C1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25325</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L62ED_LoopRupee</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25448</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L6368_GoToState1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25466</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L637A_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25566</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L63DE_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32792</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L8018_LoopBlock</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32852</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L8054_Loop</Label>
      <Comment> Load and transfer 1 byte to VRAM.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36884</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemo_Phase1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36912</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9030_HandleSubmodes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36956</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L905C_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36969</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9069_LoopFormatSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37054</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L90BE_LoopNameByte</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37086</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemo_Phase1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38122</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L94EA_IncSubphase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38170</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L951A_CopyTitlePalette</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38189</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L952D_ClearVars</Label>
      <Comment> DASM.EXPR: TriforceGlowTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38203</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L953B_DisableObjects</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38267</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L957B_CopyStoryPalette</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38280</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9588_ClearVars</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38298</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemoSubphaseTransferStoryTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38333</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L95BD_SkipTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38379</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L95EB_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38429</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L961D_DecObjYs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38462</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L963E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38495</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L965F_ClearLine</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38553</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9699_CheckNT0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38562</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L96A2_ResetVramLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38611</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L96D3_EndLine</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38687</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L971F_SetNT0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38692</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9724_SetVramLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38697</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9729_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38710</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9736_Next</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38727</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9747_FindDisabled</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38735</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L974F_SetUpObject</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38802</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9792_IncRow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38806</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9796_CenterLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38815</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L979F_LoopObject</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38849</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L97C1_NextObject</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38996</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemoPhase1End_AnimateObjects</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39021</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L986D_CopySprites</Label>
      <Comment> DASM.EXPR: InitialTitleSprites-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39040</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9880_CopyTriforcePalette</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39083</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L98AB_DecGlowTimer</Label>
      <Comment> DASM.EXPR: TriforceGlowTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39145</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L98E9_UpdateSprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39147</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L98EB</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39191</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9917_SetOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39888</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9BD0_UpdateAnimation</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40238</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9D2E_AddE</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40247</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9D37_CopyAddresses</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40502</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E36_CopyTiles</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40519</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E47_OverwriteTitle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40532</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E54_SetTransferBufLenAndIncSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40538</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E5A_CheckSub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40544</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E60_CopySlotTemplates</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40585</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E89_OverwriteEndOption</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40597</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E95_SkipOverwriteEndOption</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40601</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E99_CheckSub2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40607</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9E9F_SelectMenuBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40645</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9EC5_FindInactiveSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40656</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9ED0_FoundInactiveSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40717</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9F0D_LoopSaveSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40791</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9F57_CompareToZelda</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40863</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9F9F</Label>
      <Comment> Reset FileBReadyToSave [$0426].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40889</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9FB9</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40936</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DeleteSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40948</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L9FF4_CopyBlankBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40969</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA009_ClearName</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40993</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeE_HandleDirectionButton</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41005</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA02D_CheckSameButton</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41019</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA03B_CheckRepeat</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41037</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA04D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41084</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA07C_Left</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41124</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA0A4_Down</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41159</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA0C7_Up</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41191</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA0E7_FinishInput</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41199</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA0EF_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41223</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA107_ReturnValue</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41226</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA10A_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41249</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA121_CopyHeaderTemplate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41279</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA13F_CopyHeader</Label>
      <Comment> DASM.EXPR: NameInputCharBuf</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41360</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA190_CopySprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41410</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA1C2_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41423</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA1CF_WriteCursorY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41431</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ModeE_SetNameCursorSpriteX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41449</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA1E9_WriteCursorCoords</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41475</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA203</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41555</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA253_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41639</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA2A7_LoopSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41718</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA2F6_FormatA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41743</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA30F_SumName</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41753</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA319_SumItems</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41771</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA32B_SumWorldFlags</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41782</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA336</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41825</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA361_ClearName</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41834</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA36A_ClearItems</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41849</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA379_ClearWorldFlags</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41859</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA383</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41961</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA3E9_SumName</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41971</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA3F3_SumItems</Label>
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41989</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA405_SumWorldFlags</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42000</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA410</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42043</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA43B_ClearName</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42052</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA444_ClearItems</Label>
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42067</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA453_ClearWorldFlags</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42077</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA45D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42166</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA4B6</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42182</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA4C6_CopySlotLineTemplate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42233</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA4F9_CopyName</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42272</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA520_CopyTemplate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42289</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA531_LoopSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42338</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA562_EmitChar</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42362</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA57A_FindActiveSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42423</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA5B7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42432</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA5C0_WriteCursorSprite</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42460</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA5DC_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42502</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA606_CopyItems</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42521</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA619_CopyWorldFlags</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42531</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA623</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42537</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA629</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42570</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA64A_LoopSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42694</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA6C6_CopyItems</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42732</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA6EC_CopyName</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42767</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA70F_CopyWorldFlags</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42777</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA719</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42783</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA71F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42839</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA757_IncSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42882</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA782_CopyItems</Label>
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42932</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA7B4_CopyName</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42941</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA7BD_CopyWorldFlags</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42951</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA7C7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42957</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA7CD</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42963</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA7D3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43047</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA827_CopyHearts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43264</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode13_Full</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43279</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode13_Sub0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43297</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateEndGameCurtainEffect</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43321</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA939_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43327</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode13_Sub1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43329</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA941</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43352</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA958_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43391</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode13_Sub2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43404</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA98C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43413</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZeldaTextbox</Label>
      <Comment> Returns:&#xD;
 ObjState[1]: 0 if still updating&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43426</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA9A2</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43435</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA9AB</Label>
      <Comment> Replace the low byte of the VRAM address with the one&#xD;
 where the next character should be written.&#xD;
&#xD;
 DASM.EXPR: TextboxCharPtr&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43492</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA9E4</Label>
      <Comment> The index chooses the low VRAM address of the start&#xD;
 of another line:&#xD;
   0: $C4: front of the second line&#xD;
   1: $E4: front of the third line&#xD;
   2: $A4: front of the first line&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43508</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LA9F4_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43509</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode13_Sub3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43519</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode13_Sub4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43571</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAA33_ChangePalette</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43580</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAA3C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43599</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAA4F_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43600</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAA50_AdvanceSubmode</Label>
      <Comment> Play the ending song.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43618</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawLinkZeldaTriforces</Label>
      <Comment> The triforce over Link goes in the room object slot $13.&#xD;
 Set its location $10 pixels above Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43718</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAAC6_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43719</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAAC7_AdvanceSubmode</Label>
      <Comment> Transfer the ending palette, and go to the next submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43836</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdatePeaceTextbox</Label>
      <Comment> Only emit a character once every 8 frames --&#xD;
 when (counter [0412] MOD 8) = 4.&#xD;
&#xD;
 DASM.EXPR: PeaceCharDelayCounter&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43850</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAB4A</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43881</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAB69</Label>
      <Comment> Point to the next character in the string.&#xD;
&#xD;
 DASM.EXPR: PeaceCharIndex&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43899</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAB7B_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43900</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAB7C_AdvanceSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43902</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAB7E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43960</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawAshPile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43990</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LABD6</Label>
      <Comment> Add $80 to the scroll speed fraction.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44002</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LABE2</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44019</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LABF3</Label>
      <Comment> Roll the carry from the comparison above into bit 0.&#xD;
 So, if reached the bottom of a nametable, switch nametables.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44032</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAC00</Label>
      <Comment> If we're not showing the last screen, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44053</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAC15_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44563</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DrawCredits</Label>
      <Comment> Make a transfer record of a full row of blank tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44567</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE17</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44588</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE2C_WriteHorizontalWalls</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44592</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE30</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44598</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE36_WriteSideWalls</Label>
      <Comment> Wall bricks tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44606</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE3E_TerminateRecords</Label>
      <Comment> Put the buffer's end marker -- whether we transfer tiles and&#xD;
 attributes or only tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44643</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE63</Label>
      <Comment> Shift left as many times as the current VRAM line number,&#xD;
 to get the bit that indicates whether this line has text.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44667</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE7B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44682</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE8A</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44703</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAE9F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44733</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAEBD</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44756</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAED4</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44767</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAEDF_IncLine</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44770</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAEE2_IncVramLine</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44786</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAEF2</Label>
      <Comment> If the VRAM line number has not just been incremented to&#xD;
 the reference line number count, then go write NT attributes.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44805</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF05</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44808</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF08_WriteAttributes</Label>
      <Comment> Every 4 rows, we have to transfer NT attributes.&#xD;
 So, when (counter MOD 4) &lt;&gt; 0, skip filling an attribute record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44831</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF1F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44848</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF30</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44867</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF43_IncRow</Label>
      <Comment> Add 1 to the row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44880</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF50</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44890</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwitchProfileToSecondQuest</Label>
      <Comment> Clear $80 bytes of each block of world flags.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44892</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF5C_ClearBlock</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44906</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF6A</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44917</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LAF75</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49233</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LC051_LoopBlockOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>49252</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TransferLevelPatternBlocksUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65548</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1000C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65563</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1001B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65587</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10033</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65604</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10044</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65614</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1004E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65692</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1009C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65699</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L100A3_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65814</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10116_SetInputDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65828</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10124</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65835</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1012B_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65875</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10153</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65900</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1016C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66034</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L101F2_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66146</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10262_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66256</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L102D0</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66302</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L102FE_CheckLinkCollision</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66348</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1032C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66355</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10333_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66377</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10349</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66439</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10387</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66519</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L103D7_DestroyMonster</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66644</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10454_Animate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66670</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1046E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66703</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1048F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66781</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L104DD</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66808</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L104F8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66828</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1050C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66889</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10549</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66901</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10555</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66910</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1055E</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66912</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10560_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67001</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L105B9_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67061</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L105F5_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67112</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10628_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67164</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1065C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67258</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L106BA_LoopAxis</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67275</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L106CB</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67292</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L106DC_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67378</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10732_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67419</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1075B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67479</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10797_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67633</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10831_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67646</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1083E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67689</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10869_UpdateBase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67711</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1087F_CheckBounce</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67759</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L108AF_SetX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67785</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L108C9_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67839</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L108FF_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67875</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10923</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67926</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10956_Animate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67942</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10966</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67978</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1098A</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68041</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L109C9_SetTimerAndAnimate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68073</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L109E9_DrawTektite</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68112</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10A10_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68128</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10A20_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68178</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10A52_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68230</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10A86</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68243</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10A93</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68298</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10ACA_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68318</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10ADE_NoState3Collisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68324</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10AE4_CheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68342</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10AF6_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68412</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B3C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68429</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B4D_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68448</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10B60</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68584</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10BE8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68598</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10BF6_RedLeever_AnimateAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68618</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C0A</Label>
      <Comment> DASM.EXPR: ObjTurnRate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68733</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C7D_LoopObject</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68745</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C89</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68748</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10C8C_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68776</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10CA8_SetHorizontalFlip</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68778</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10CAA_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68820</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10CD4_LoopArmosRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68873</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D09_UseChosenTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68904</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D28</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68929</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D41</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68980</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D74</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69004</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D8C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69005</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10D8D_CheckLinkCollision</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69039</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10DAF_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69040</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PondFairy_HandleOtherStates</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69090</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10DE2_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69265</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10E91_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69389</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10F0D_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69438</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10F3E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69490</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10F72_ReturnFalse</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69532</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10F9C_SetState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69551</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10FAF_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69626</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L10FFA</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69679</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1102F_L_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69695</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1103F_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69716</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11054</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69751</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_SetFlyingStateAnd6Turns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69877</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L110F5_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69888</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11100</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69973</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11155_SetUpToEmerge</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70020</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11184_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70096</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L111D0_SetState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70143</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L111FF_PatchSprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70167</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11217</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70172</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1121C_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70241</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11261</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70301</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1129D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70326</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L112B6_AddPriorityBit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70334</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L112BE</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70355</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L112D3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70448</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11330_FlipDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70577</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L113B1_SetShootTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70625</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L113E1_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70805</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11495</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70868</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L114D4</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70913</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11501_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71019</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1156B_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71029</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11575</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71146</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Digdogger_TurnTowardLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71164</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Digdogger_Turn</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71386</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L116DA_SetTargetSpeed</Label>
      <Comment> DASM.EXPR: Digdogger_ObjTargetSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71402</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L116EA_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71481</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11739_End</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71569</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11791</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71662</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L117EE_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71817</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11889_WriteSprite</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71897</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L118D9_Move</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71921</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L118F1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71935</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L118FF</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72064</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11980_Die</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72073</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11989_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72138</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L119CA</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72186</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L119FA_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72237</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11A2D_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72278</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11A56_NextLoopAxis</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72376</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11AB8_DrawWalking</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72408</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11AD8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72448</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11B00_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72496</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11B30</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72566</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11B76</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72698</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11BFA_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72846</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11C8E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72877</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11CAD_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72982</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11D16_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73148</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11DBC_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73168</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11DD0_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73204</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11DF4_L_Wizzrobe_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73239</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E17_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73300</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E54_Move</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73303</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E57_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73330</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11E72</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73391</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11EAF_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73472</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11F00</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73598</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L11F7E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73624</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ShootMagicShot58</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73778</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12032</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73856</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12080</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74180</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L121C4_CopyDirToHands</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74197</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L121D5</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74268</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1221C_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74271</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1221F_TurnTowardLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74301</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1223D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74328</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12258_LoopHand</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74337</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12261</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74364</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1227C_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74375</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12287</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74515</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12313</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74537</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12329_ChangeDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74668</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L123AC</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74669</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L123AD_SetEyeStateAndShoot</Label>
      <Comment> DASM.EXPR: Gohma_ObjEyeState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74798</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1242E_LoopSprite</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74865</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12471_PlayParryTune</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74947</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L124C3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75061</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12535_SaveNeckBytes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75121</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12571_L_Gleeok_UDiv4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75194</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125BA</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75222</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125D6</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75231</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125DF</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75245</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L125ED</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75268</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12604_KeepSegsBetweenNeighbors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75283</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12613</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75293</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1261D_NextKeepSegsBetweenNeighbors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75303</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12627</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75315</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12633</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75327</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1263F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75377</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12671</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75414</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Gleeok_DecSegmentY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75418</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Gleeok_SetSegmentY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75454</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Gleeok_DecSegmentX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75458</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Gleeok_SetSegmentX</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75485</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L126DD</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75503</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L126EF</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75525</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12705</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75541</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12715</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75627</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1276B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75649</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12781_ResetMetastate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75673</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12799_DestroyFireballs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75770</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L127FA_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75771</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L127FB_Gleeok_DecHeadTimer</Label>
      <Comment> DASM.EXPR: Gleeok_ObjHeadDelay</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75781</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12805_Subtract</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75830</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12836</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75889</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12871</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76127</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1295F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76215</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L129B7_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76266</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L129EA_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76287</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L129FF</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76290</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12A02_DrawAndCheckCollisions</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76317</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12A1D_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76353</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12A41_FindTail</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76399</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12A6F_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76643</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B63_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76667</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12B7B_LoopChildren</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76717</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12BAD_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76741</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12BC5</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76819</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12C13</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76828</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12C1C_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76860</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12C3C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76889</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12C59_Rotate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76912</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12C70_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76997</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12CC5</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77100</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12D2C_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77129</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Ganon_DrawBody</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77132</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12D4C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77178</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12D7A_HandleAshes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77204</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12D94_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77373</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12E3D_LoopRay</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77390</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12E4E_Move</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77393</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12E51</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77618</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12F32_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77694</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12F7E_CopyBytes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77713</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12F91_OverwriteColors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77753</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L12FB9_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77834</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1300A_OddType</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77939</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13073_FindNoDropType</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77949</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1307D_FindDrop0Type</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77961</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13089_FindDrop1Type</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77973</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13095_FindDrop2Type</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78068</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L130F4</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78069</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L130F5_DestroyMonster</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78101</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13115_AnimateFairy</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78174</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1315E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78297</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L_Candle_IncState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78323</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L131F3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78431</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1325F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78441</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13269</Label>
      <Comment> DASM.EXPR: Flyer_ObjSpeed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78458</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_SetFlyingState</Label>
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78461</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1327D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78462</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Flyer_CompareMaxSpeed</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78540</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L132CC_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78584</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L132F8_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78593</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13301</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78599</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13307_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78609</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13311_SetFlyingState1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78632</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13328</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78645</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13335</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78660</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13344_LoopLeft</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78681</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13359_LoopRight</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78703</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1336F_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78744</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13398_SetDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78753</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L133A1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78764</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L133AC_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78842</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L133FA_SetXRotateY</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78914</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13442_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78933</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L13455_Next</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82009</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14059_SelectTransferBufAndIncState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82011</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1405B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82131</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L140D3_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82257</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14151_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82332</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1419C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82380</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L141CC_ReplaceWithF5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82382</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L141CE</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82407</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L141E7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82440</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14208</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82462</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1421E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82465</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14221_ResetVScrollLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82500</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14244</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82567</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14287_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82657</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L142E1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82676</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L142F4_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82701</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1430D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82711</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14317</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82742</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14336</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82746</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1433A_IncSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82748</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1433C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82773</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14355</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82795</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1436B_Vertical</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82839</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14397_CheckIfLit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82861</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L143AD_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82872</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L143B8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82915</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L143E3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82929</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L143F1_LoopRow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82948</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14404_NextLoopRow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83039</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1445F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83089</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14491</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83105</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L144A1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83129</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L144B9</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83232</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14520_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83245</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1452D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83247</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1452F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83280</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14550</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83309</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1456D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83311</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1456F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83339</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1458B_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83340</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1458C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83493</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14625</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83523</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14643</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83853</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1478D_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83854</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1478E_CheckSub2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83896</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L147B8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83902</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode4_GoToSub0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84035</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14843</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84054</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14856</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84057</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14859_PlaceObjects</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84117</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14895</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84152</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L148B8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84184</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L148D8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84217</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L148F9</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84233</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14909_SkipObjects</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84243</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14913</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84281</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14939</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84288</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14940</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84299</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1494B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84317</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1495D_SetType</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84356</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14984</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84365</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1498D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84413</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L149BD</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84459</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L149EB</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84483</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14A03_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84630</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14A96_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84706</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14AE2</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84760</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14B18</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84789</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14B35_AnimateSelection</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84795</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14B3B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84825</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14B59</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84872</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14B88</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84904</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateAndDrawLinkBehindBackground</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84989</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14BFD_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85006</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14C0E_Next</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85017</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14C19_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85030</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14C26_ReturnFalse</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85044</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14C34_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85063</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14C47_Next</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85207</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14CD7_IncSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85232</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14CF0_SetLinkDirAndDraw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85275</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14D1B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85329</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_SetTimerIncSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85333</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14D55_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85375</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14D7F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85484</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14DEC</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85491</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14DF3_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85503</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14DFF_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85615</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14E6F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85617</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14E71_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85670</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldNothing</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85702</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14EC6_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85743</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14EEF</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85762</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14F02_GetRightSideRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85765</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14F05</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85832</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14F48</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85874</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14F72_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85875</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14F73_CheckCaveEdge</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85960</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L14FC8_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86194</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L150B2</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86217</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L150C9_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86242</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L150E2</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86363</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1515B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86366</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1515E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86426</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1519A</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86481</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L151D1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86539</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1520B_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86540</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1520C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86555</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1521B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86595</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15243_SetTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86599</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15247_BlockMovement</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86626</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15262</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86667</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1528B_BlockAtWall</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86674</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15292_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86679</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L15297</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86740</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L152D4</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86861</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1534D</Label>
      <Comment> Silence sample and tune1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91134</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L163FE_LoopDoorBit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91183</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1642F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91324</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L164BC_SetRotatedTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91326</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L164BE_NextLoopRotate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91343</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L164CF_SwapWithVertical</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91461</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16545</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91604</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L165D4_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91660</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1660C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91668</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16614</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91849</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L166C9</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91869</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L166DD</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91978</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1674A_LoopColumnUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92096</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L167C0</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92124</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L167DC_WriteLastTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92172</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1680C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92293</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16885</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92295</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16887_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92300</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1688C_IncSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92330</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L168AA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92478</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1693E_Add20H</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92492</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1694C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92718</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16A2E_LoopColumnOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92761</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16A59_LoopSquareOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92807</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16A87_RestoreSquare</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92869</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16AC5</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92880</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16AD0</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92912</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16AF0_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92938</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16B0A_WriteLastTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92990</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16B3E</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93007</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16B4F</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93112</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16BB8_Write</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93115</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16BBB_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93173</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16BF5</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93175</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16BF7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>93223</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L16C27</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94221</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1700D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94232</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17018_SelectTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94234</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1701A_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94246</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17026</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94312</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17068</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94314</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1706A</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94368</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L170A0</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94379</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L170AB_SetWalkDistance0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94381</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L170AD</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94396</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L170BC</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94412</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L170CC</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94425</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L170D9</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94449</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L170F1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94510</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1712E_SelectTransferBufAndAdvanceSubmode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94517</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17135</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94573</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1716D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94612</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17194</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94642</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L171B2</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94693</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L171E5</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94739</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17213_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94740</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17214_IncHearts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94793</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17249_SelectTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94810</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1725A_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94818</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17262_Add20H</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94826</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1726A</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94865</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17291_SelectTransferBufAndDecCounter</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94869</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17295_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94935</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L172D7_LoopDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94965</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L172F5_NextLoopDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94972</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L172FC_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95011</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17323</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95023</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1732F_SetLinkDirToObjDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95097</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17379</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95111</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17387_SetSpeed</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95116</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1738C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95142</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L173A6</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95147</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L173AB_SetLinkInputDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95187</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L173D3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95205</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L173E5</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95219</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L173F3_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95287</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17437</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95308</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1744C_SetTargetMode</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95339</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1746B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95342</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1746E_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95366</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17486</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95387</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1749B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95439</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L174CF</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95555</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17543</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95600</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17570</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95638</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17596_Add20H</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95646</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1759E</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95672</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L175B8_Rotate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95680</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L175C0</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95719</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L175E7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95729</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L175F1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95751</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17607_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95783</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17627</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95830</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17656</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95834</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1765A_ShiftIntoMask</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95857</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17671_LoopDoorBit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95868</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1767C</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95894</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17696</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95913</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L176A9</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95925</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L176B5_FoundBoomerang</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>95940</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L176C4_LoopDrawItem</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96045</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1772D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96123</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1777B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96196</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177C4_CancelTune</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96199</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177C7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96204</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177CC_LoopItemSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96224</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177E0_CheckNextItem</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96229</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177E5_FoundSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96241</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177F1_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96244</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L177F4</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96275</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17813</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96301</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1782D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96307</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17833</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96313</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17839_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96340</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17854</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96370</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17872_StoreLocation</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>96392</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L17888</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98407</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L18067_Copy</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98521</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L180D9_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98540</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L180EC_Next</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98604</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1812C_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98607</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1812F_ReplaceRoomBytes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106681</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A0B9</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106694</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A0C6</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106699</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A0CB</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106705</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1A0D1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124069</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E4A5_SetPpuMask</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124166</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E506_SetScroll</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124208</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E530_LoopTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124214</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E536</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124246</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E556_LoopRandom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124272</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E570_Update</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124344</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E5B8</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124348</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E5BC_LoopTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124377</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E5D9_LoopAttr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124411</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E5FB_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124430</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E60E_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124494</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E64E_Read</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124621</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E6CD_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124649</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E6E9</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124855</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E7B7_LoopBoomerang</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124870</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E7C6_FindItemOrDrawSword</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124999</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E847_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125017</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E859_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125139</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E8D3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125154</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E8E2_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125273</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E959</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125287</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E967</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125315</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E983_ClearCounts</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125337</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E999_InitSubmodes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125375</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E9BF_SetMirroring</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125378</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E9C2_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125468</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EA1C_UseStartRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125471</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EA1F_SetRoomId</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125562</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EA7A_FindSpecialBoss</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125572</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EA84_NextSpecialBoss</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125611</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EAAB_UseXOrGreenPalette</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125630</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EABE_PatchColors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125641</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EAC9_SelectTransferBufAndFinishInitPlay</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125675</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EAEB_LoopHistory</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125681</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EAF1</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125727</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EB1F_BeginUpdate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125730</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EB22_CheckWhirlwind</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125813</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EB75_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125930</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EBEA_GoToNextModePlayLevelSong</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125938</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EBF2_GoToNextModeResetGridOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125944</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EBF8_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125978</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EC1A_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126394</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EDBA</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126421</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EDD5_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126442</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EDEA_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126527</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE3F_CheckLeftBoundary</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126536</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE48_FetchTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126598</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE86_MatchWalkableTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126608</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EE90_SetTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126644</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EEB4_ReturnTile</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126647</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EEB7_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126682</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EEDA_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126749</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF1D_CheckBlocked</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126766</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF2E</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126791</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF47_SetGridOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126862</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EF8E_FindSecretRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126891</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFAB_FindEmptySlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126904</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFB8_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126927</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFCF_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126953</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFE9_CheckStunned</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126964</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1EFF4_FilterInput</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>126977</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F001_ZeroMovingDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127032</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F038_CheckBlocked</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127053</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F04D_InSubroom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127067</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F05B_SkipSubroom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127168</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F0C0_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127214</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F0EE</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127304</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F148_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127348</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F174</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127381</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F195_ExitX0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127415</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F1B7</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127423</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F1BF</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127437</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F1CD_IncreasingDir</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127462</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F1E6_LoopSearchStep</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127484</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F1FC_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127518</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F21E</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127573</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F255_CheckWarpsAndAnimate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127603</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F273_LoopLadderRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127653</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F2A5_CheckWaterOW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127754</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F30A_ShiftDown2Pixels</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127770</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F31A_WieldingObject</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127817</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F349</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127850</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F36A_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127870</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F37E</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127906</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F3A2_Flash</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127951</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F3CF_WriteMagicSprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127953</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F3D1_WriteSprites</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128017</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F411_DeactivateLinkShot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128019</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F413_DeactivateShot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128080</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F450_ReverseSub</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128132</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F484</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128159</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F49F_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128208</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F4D0_AttractMonsters</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128226</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F4E2_Deactivate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128345</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F559_CheckPlayerArrow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128373</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F575_HandleBlocked</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128376</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F578_AnimateBoomerang</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128402</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F592_SetAttrAndDrawArrow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128422</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5A6_PlayerArrow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128429</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5AD_SetAttr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128466</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5D2_CheckBoomerangBlocked</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128470</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5D6_Deactivate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128480</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5E0</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128504</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F5F8_DrawPlayerWeapon</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128574</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F63E_AnimateBoomerang</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128589</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F64D</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128642</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F682_SetThrowerTimer</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128777</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F709</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128827</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F73B_Draw</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>128915</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F793_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129035</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F80B</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129066</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F82A_SetUpWeaponWithState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129098</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F84A</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129108</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F854_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129365</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F955_CheckState5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129375</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F95F_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129392</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1F970_LoopHotspot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129567</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FA1F_IncMetastate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129574</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FA26_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129664</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FA80</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129672</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FA88</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129736</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FAC8_IncState</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129741</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FACD_CombineStateWith30</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129763</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FAE3</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130234</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FCBA</Label>
      <Comment />
      <Flags>AutoJumpLabel</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130263</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FCD7_Reset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130725</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FEA5_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130749</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FEBD_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130759</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FEC7_End</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130830</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FF0E_CopyBytes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130856</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1FF28_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5514</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Unknown_758A</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7905</Address>
      <AddressType>SaveRam</AddressType>
      <Label>Unknown_7EE1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>31</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>114688</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PcmSamples</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9216</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129972</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateObject_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>212</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>124582</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CalculateNextRoom_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125219</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>40</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125413</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode3_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>127399</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Walker_GetNextAltDir_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130434</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitObject_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>190</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>125754</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>40</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98371</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode2_Submodes_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81935</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuUW_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>81956</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenuOW_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82605</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode7Submodes_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82985</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode7ScrollSubmode_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84970</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CheckSecretTrigger_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85122</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode11Death_Full_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>26</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>85542</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WieldItem_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86149</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeB_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86172</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeC_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86287</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode9_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>86565</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TouchDoor_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92259</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode12EndLevel_Full_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94465</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitModeA_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>22</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66046</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateBlock_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66727</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlKeeseFlight_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66790</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateZolState_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69643</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlFlyingGhiniFlight_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69725</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlPeahatFlight_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70920</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlMoldormFlight_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71316</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Digdogger_ChangeSpeed_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71874</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71942</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateDodongoState1_Bloated_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73095</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateVireState_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73665</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateRedWizzrobe_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74930</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlGleeokHeadFlight_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75381</Address>
      <AddressType>PrgRom</AddressType>
      <Label>Gleeok_StretchNeck_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76724</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlPatraFlight_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76931</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGanon_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78276</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCandle_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78395</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ControlFairyFlight_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36878</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemo_RunTasks_Phase0_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36890</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitDemo_RunTasks_Phase1_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36917</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode0Demo_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37082</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemo_Phase0_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>37092</Address>
      <AddressType>PrgRom</AddressType>
      <Label>AnimateDemo_Phase1_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41618</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode1_Full_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42390</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode1Menu_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42674</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateModeDSave_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43541</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMode13WinGame_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18212</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateCavePerson_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18951</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitUnderworldPerson_Full_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>20</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19186</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPerson_Full_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19259</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonComplex_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19389</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateUnderworldPersonLifeOrMoney_Full_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19572</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateGrumble_Full_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>22196</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoBackgroundPatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2080</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19892</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoSpritePatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2304</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19771</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoPatternBlockAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19775</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoPatternBlockSizes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19779</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DemoPatternVramAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19794</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put block address in [00:01] and size in [03:02].&#xD;
 Load destination VRAM address and set it.&#xD;
 The size and VRAM address have the high byte first.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19827</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop until pattern block index = 2.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19854</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the 16-bit address at [00:01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19867</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement the 16-bit amount at [03:02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19880</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop again if the amount left &lt;&gt; 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19888</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> This block is done. Increment the block index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32780</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonPatternVramAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32774</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonPatternBlockSizes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32768</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonPatternBlockAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36479</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonMiscPatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>224</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>34687</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonBackgroundPatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1792</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32895</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonSpritePatterns</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1792</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32857</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the 16-bit source address at [00:01].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32870</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement the 16-bit amount remaining in [03:02].&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32883</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop until the amount remaining = 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32891</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The block is done. Increment the block index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32797</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put block address in [00:01] and size in [03:02].&#xD;
 Load destination VRAM address and set it.&#xD;
 The size and VRAM address have the high byte first.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>32830</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop until pattern block index = 3.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>108649</Address>
      <AddressType>PrgRom</AddressType>
      <Label>GameTitleTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1121</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>24592</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WhirlwindPrevRoomIdList</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83534</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SpawnPosList0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83543</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SpawnPosList1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83552</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SpawnPosList2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83561</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SpawnPosList3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>9</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>83574</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ObjLists</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>201</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89000</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomLayoutOWCave0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89016</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomLayoutOWCave1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89032</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomLayoutOWCave2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91076</Address>
      <AddressType>PrgRom</AddressType>
      <Label>RoomLayoutUWCellar1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90854</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>30</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90884</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>17</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90901</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>17</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90918</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>23</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90941</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>23</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90964</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>17</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90981</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>90999</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW8</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>26</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91025</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapUW9</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>35</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89101</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>49</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89150</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>66</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89216</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>68</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89284</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>50</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89334</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW5</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>60</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89394</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW6</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>59</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89453</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW7</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>59</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89512</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW8</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>62</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89574</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOW9</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>65</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89639</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOWA</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>69</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89708</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOWB</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>61</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89769</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOWC</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>54</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89823</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOWD</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>66</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89889</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOWE</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>52</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>89941</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ColumnHeapOWF</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>71</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129344</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: BombTimes-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>129310</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombTimes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>25856</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CommonCodeBlock_Bank1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>98588</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: LevelInfoUWQ2ReplacementAddrs-1&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>99236</Address>
      <AddressType>PrgRom</AddressType>
      <Label>LevelInfoUWQ2ReplacementAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>18</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94615</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CellarLadderXs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72111</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoMouthNegativeLimits1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72116</Address>
      <AddressType>PrgRom</AddressType>
      <Label>DodongoMouthPositiveLimits1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107018</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EndingPaletteTransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>19</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>131066</Address>
      <AddressType>PrgRom</AddressType>
      <Label>IsrVector</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7256</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Is bit 2 set?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7261</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If not set, then add 1 to X.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7936</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NotePeriodTable</Label>
      <Comment> Big-endian 16-bit period values.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>114</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7013</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CustomEnvelopeTune1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>32</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>107</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurNoteLowPeriodSq1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurNoteLowPeriodSq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1520</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CurNoteLowPeriodTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6741</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TuneScripts1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>128</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6923</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We've reached the end of the tune.&#xD;
&#xD;
 If tune is "Game Over", then go play it again.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1560</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TunePtr1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>110</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteLengthTune1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>111</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteCounterTune1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6896</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TuneScripts1-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>109</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CustomEnvelopeOffsetTune1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6235</Address>
      <AddressType>PrgRom</AddressType>
      <Label>TuneScripts0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>110</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6379</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TuneScripts0-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6355</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the requested tune is not "heart warning", then go play it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6359</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else only play "heart warning" if nothing else is playing.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6351</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Tune $80 is only a signal to silence the song.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1550</Address>
      <AddressType>InternalRam</AddressType>
      <Label>TunePtr0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6398</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We've reached the end of the tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3424</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>36</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3677</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptItemTaken0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>19</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4516</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptEndLevel0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>89</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3696</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptOverworld0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>621</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4317</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptUnderworld0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>199</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4605</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptLastLevel0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>207</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4812</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptGanon0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>43</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4855</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptEnding0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>404</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6084</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptZelda0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>97</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5259</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongScriptDemo0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>825</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3460</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderDemo0</Label>
      <Comment> Description:&#xD;
 Each song phrase is described by a header in this format:&#xD;
&#xD;
 0: Note length table base&#xD;
 1: Song script address low&#xD;
 2: Song script address high&#xD;
 3: Triangle note offset in script&#xD;
 4: Square 0 note offset in script&#xD;
 5: Noise note offset in script&#xD;
 6: Envelope selector&#xD;
 7: TODO:&#xD;
&#xD;
 Note that the last byte of the "Item taken" header overlaps&#xD;
 "End level", and "End level" overlaps "Overworld".&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3669</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderZelda</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3613</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderEnding0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3581</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderUnderworld0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3541</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderOverworld0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3597</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderLastLevel0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3527</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderItemTaken0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3534</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderEndLevel0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3605</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SongHeaderGanon0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1546</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteOffsetSongSq1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>102</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongScriptPtrLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>103</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongScriptPtrHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1553</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteCounterSongSq1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1552</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteLengthSongSq1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1547</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteOffsetSongSq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1548</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteOffsetSongTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1549</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteOffsetSongNoise</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7587</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The demo/title song ($80) vibrates the pitch.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1555</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteCounterSongSq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1558</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteCounterSongTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1559</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteCounterSongNoise</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1551</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteLengthSongSq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8145</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoteLengthTable0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8153</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoteLengthTable1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8161</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoteLengthTable2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8169</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoteLengthTable3</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8177</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoteLengthTable4</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1524</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteLengthTableBase</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7689</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The demo/title song ($80) vibrates the pitch.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7829</Address>
      <AddressType>PrgRom</AddressType>
      <Label>L1E95_HandleNoise</Label>
      <Comment> If the song is not demo nor ending, then return.&#xD;
 They don't use noise.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1557</Address>
      <AddressType>InternalRam</AddressType>
      <Label>NoteLengthSongTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1525</Address>
      <AddressType>InternalRam</AddressType>
      <Label>FirstNoteIndexSongNoise</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7900</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoiseLengths</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7896</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoisePeriods</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7892</Address>
      <AddressType>PrgRom</AddressType>
      <Label>NoiseVolumes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7865</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> From the original control note, extract an index 0-3&#xD;
 to look up noise parameters.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7851</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We've reached the end of the track. Noise always repeats.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8082</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CustomEnvelopeSong</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>32</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1554</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CustomEnvelopeOffsetSongSq1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1561</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongEnvelopeSelector</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1563</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongVibrationCounterSq1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1564</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongVibrationCounterSq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1556</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CustomEnvelopeOffsetSongSq0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1565</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongVibrationCounterTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1566</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongRepetitionsTrg</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1567</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongRepeatStartOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7736</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Control note &gt;= $F1. The low nibble defines the number of&#xD;
 repetititions of the passage starting at the next offset.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7815</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: [05F1] ?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>108</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SongPhraseIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7342</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the next phrase of the ending song.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7447</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: [05F1]</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1523</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SeaSfxCounter</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1539</Address>
      <AddressType>InternalRam</AddressType>
      <Label>EffectRequest</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1537</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SampleRequest</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1544</Address>
      <AddressType>InternalRam</AddressType>
      <Label>Sample</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6672</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> SFX counter &gt;= $BF. Increase volume fast.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8114</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SwordSfxNotes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6465</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If "heart taken" is requested in tune channel 0, then cancel it.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7929</Address>
      <AddressType>PrgRom</AddressType>
      <Label>StairsSfxNotes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6717</Address>
      <AddressType>PrgRom</AddressType>
      <Label>BombSfxNotes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6626</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: BombSfxNotes-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8129</Address>
      <AddressType>PrgRom</AddressType>
      <Label>FlameSfxNotes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>16</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>8124</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ArrowSfxNotes</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6477</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ArrowSfxNotes-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6555</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: SwordSfxNotes-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6647</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: FlameSfxNotes-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>105</Address>
      <AddressType>InternalRam</AddressType>
      <Label>EffectCounter</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7164</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SampleRates</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>7</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7116</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: SampleRates-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7157</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SampleLengths</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>7</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7128</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: SampleLengths-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7150</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SampleAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>7</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7122</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: SampleAddrs-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1526</Address>
      <AddressType>InternalRam</AddressType>
      <Label>BackgroundSample</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1522</Address>
      <AddressType>InternalRam</AddressType>
      <Label>SampleCounter</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6563</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> $80 is a signal to silence samples and tune 1.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40220</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveFileBAddressSet2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40206</Address>
      <AddressType>PrgRom</AddressType>
      <Label>SaveFileBAddressSet1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3541</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAAddressSet1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3555</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAAddressSet2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>14</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAName2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>10</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAName1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>2</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAName0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>8</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>106</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAItems2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>40</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAItems1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>40</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>26</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAItems0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>40</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>914</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAWorldFlags2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>384</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>530</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAWorldFlags1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>384</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>146</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAWorldFlags0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>384</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1298</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileASlotActive0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1299</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileASlotActive1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1300</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileASlotActive2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1301</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileADeathCount0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1302</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileADeathCount1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1303</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileADeathCount2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1307</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAQuestNumber0</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1308</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAQuestNumber1</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1309</Address>
      <AddressType>SaveRam</AddressType>
      <Label>SaveFileAQuestNumber2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43269</Address>
      <AddressType>PrgRom</AddressType>
      <Label>InitMode13_Full_JumpTable</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>10</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43292</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Zelda is in object slot 1.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4672</Address>
      <AddressType>SaveRam</AddressType>
      <Label>UpdateWorldCurtainEffect_Bank2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43309</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> When the right curtain edge reaches the middle (&lt; $11),&#xD;
 go to the next submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43315</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Why set the timer?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43338</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Point to the front of the first textbox line,&#xD;
 and reset the current character index.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43322</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PlayAreaAttr0TransferBuf</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43353</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ThanksText</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>38</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43783</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PeaceText</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>53</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43551</Address>
      <AddressType>PrgRom</AddressType>
      <Label>EndingFlashColors</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>4</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43405</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ThanksTextboxCharTransferRecTemplate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43424</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the 5 bytes of the textbox character transfer record template&#xD;
 to the dynamic transfer buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43416</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Zelda's timer has not expired, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43420</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set the timer to wait 6 frames after the next character about&#xD;
 to be shown.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43441</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the low VRAM address for the next character.&#xD;
&#xD;
 DASM.EXPR: TextboxCharPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43480</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Determine an index based on the high 2 bits of the character element:&#xD;
   $80: 0&#xD;
   $40: 1&#xD;
   $C0: 2&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43474</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the high 2 bits of character element = 0, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43469</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Play the "heart taken/character" tune.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43466</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> We have a non-space character. Put it in the transfer record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43460</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If the character is $25, then it's a special space. It will still&#xD;
 take up space, but will not take time to show -- meaning that&#xD;
 we'll go look up the next character to transfer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43458</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the current character.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43455</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the index variable to point to the next character&#xD;
 for the next time.&#xD;
&#xD;
 DASM.EXPR: TextboxCharIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43452</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load the person text current character index.&#xD;
&#xD;
 DASM.EXPR: TextboxCharIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43444</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&lt;ThanksText</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43448</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&gt;ThanksText</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43410</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ThanksTextboxLineAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>3</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43498</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If index = 2, then we've reached the end of the text,&#xD;
 and low VRAM address is moved to the front of the first line.&#xD;
 So, advance the state of the person object, and unhalt Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43398</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a delay of $50 frames in the next submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43629</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw triforce over Link.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43666</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw Zelda.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43670</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The triforce over Zelda goes in slot 2.&#xD;
 Set its location $10 pixels above her.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43681</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Draw triforce over Zelda.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43574</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Don't flash until $40 frames have passed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43578</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the level palette transfer buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43589</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Use (timer MOD 4) as an index to look up a color.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43593</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Change element 0 of palette 4 in buffer to change&#xD;
 the background color.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43726</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PeaceTextboxCharTransferRecTemplate</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43731</Address>
      <AddressType>PrgRom</AddressType>
      <Label>PeaceTextboxCharAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>52</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43605</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wait $40 frames at the beginning of the next mode&#xD;
 before showing text.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43609</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set a long timer of $40 ($280 frames) for the whole duration&#xD;
 of the next submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43711</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> There is a delay before showing text.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43705</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once in submode 2, only delay, instead of emitting characters.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43848</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the 5 bytes of the textbox character transfer record template&#xD;
 to the dynamic transfer buf.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43859</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Load a character from the string and copy it to&#xD;
 the transfer record until we read character $FF.&#xD;
&#xD;
 DASM.EXPR: PeaceCharIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43872</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> A regular space takes as much time to emit as any character.&#xD;
 But it makes no sound.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43876</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> "Heart taken/character" tune</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43884</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Replace the low byte of the VRAM address with the one&#xD;
 where the next character should be written.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43890</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Once the low VRAM address rolls over,&#xD;
 increment the high address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43696</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Characters stop emitting when the long timer is $10.&#xD;
 So, keep showing Link and Zelda until it reaches 4.&#xD;
 Then hide them and wait until it reaches 0.&#xD;
&#xD;
 DASM.EXPR: EndingFlashLongTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44608</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The end of the first record: tiles</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44614</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Specify that we're transferring $20 bytes/tiles.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44054</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreditLineVramAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44066</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreditsPagesTextMasks</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>12</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44538</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreditsAttrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>24</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44871</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Skip the last two rows in each cycle.&#xD;
 When (row MOD $20) gets to $1E, add 2.&#xD;
&#xD;
 Again, this is because there are&#xD;
 240 pixels vertically instead of 256.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1290</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CreditsRow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44817</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Attributes for the left and right blocks are 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44825</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The row was already divided by 4. So now it refers to an&#xD;
 NT attribute block row. Look up the attribute byte to use&#xD;
 for almost every block in this NT attribute block row.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44829</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Fill a record with this byte, so the whole NT attribute block&#xD;
 row is changed.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44837</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If tiles are being written to NT 1 (&gt;= $2800), then&#xD;
 write the high byte of NT 1's attribute space (&gt;= $2BC0).&#xD;
 Else write the high byte of NT 0's attribute space (&gt;= $23C0).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44851</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Every attribute block row is at an offset (tile row * 2).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44857</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Add the offset to the low byte of attribute space base&#xD;
 ($23C0 or $2BC0); and write it to the record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44862</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> 8 bytes in the attribute row record.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44611</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The end of the second record: NT attributes</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44078</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreditsTextAddrsLo</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>23</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44101</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreditsTextAddrsHi</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>23</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44692</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> First read the length of the string.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44696</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The length of the string</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44698</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Second, read the offset where the first character goes&#xD;
 in the line.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44702</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Loop over each character in the rest of the credits source record.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44708</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the source pointer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44709</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the destination pointer.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44710</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Decrement the count remaining.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44124</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreditsTextLines</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>414</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1294</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CreditsLineIndex</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44714</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If line index &lt;&gt; $11, go increment.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44725</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Line index = $11, prepare to read the player's name.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44731</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the player's name at offset 9 in string to transfer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44745</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Format the death count for the current save slot.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44754</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Copy the decimal death count at offset 19 in string to transfer.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44573</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> No wall tiles go in row 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44578</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Rows 1 and $2E get horizontal wall tiles.&#xD;
 Rows 2 to $2D get side walls.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44590</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Wall bricks tile</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1292</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CreditsVramPage</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44619</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Write the high byte of the current VRAM page.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1293</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CreditsVramLine</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44628</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The line number will be used to shift the task mask below.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44632</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Multiply the VRAM line number by $20 to get the low VRAM address.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44640</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Get the mask for the current VRAM page.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44649</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The mask inidcates that it should have text.&#xD;
 But if line index &gt;= $17, then it doesn't.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44656</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In the first quest, don't consider line numbers &gt;= $10.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44672</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In the second quest, skip lines $C to $F.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44773</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> In each VRAM page there are 8 lines, except in ones where&#xD;
 (page MOD 4) = 3. This means $23xx and $2Bxx.&#xD;
 These pages have 6 lines.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44791</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Else roll over the VRAM line to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44796</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Increment the VRAM page number.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44800</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If it has reached $C, then roll it over to 0.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1291</Address>
      <AddressType>InternalRam</AddressType>
      <Label>CreditsTileOffset</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43997</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Carry over to the tile offset and current V-scroll.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44008</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we've reached the bottom of a nametable, then&#xD;
 roll over current V-scroll to 0, and increase number of&#xD;
 screens scrolled.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44022</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the quest number in Y register.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43968</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreditsLastScreenList</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43970</Address>
      <AddressType>PrgRom</AddressType>
      <Label>CreditsLastVscrollList</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>2</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44040</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If we haven't scrolled the last amount in the last screen,&#xD;
 then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44047</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> But if we have, then go to the next submode, and set a timer&#xD;
 to wait $40 frames in the next submode.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43906</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Put the triforce in object slot 2 at location ($78, $88).&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43916</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Triforce item ID</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43923</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Ganon object type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43963</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Ganon-ashes frame image</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43921</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reuse object slot 2 for the ash pile.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43931</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Don't let the player skip ahead for a little while.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43935</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> If Start hasn't been pressed, then return.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43941</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Start was pressed. We'll transition to mode $D to save.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44884</Address>
      <AddressType>PrgRom</AddressType>
      <Label>WorldFlagBlockAddrs</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>6</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44915</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Clear $28 byte block of items.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>44923</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set 3 full hearts and heart containers.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7481</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> DASM.EXPR: SwordDamagePoints-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>82006</Address>
      <AddressType>PrgRom</AddressType>
      <Label>UpdateMenu_Return</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5048</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C28_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4671</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6AAF_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5136</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C80_TakeRupee</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7272</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L74D8_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7837</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L770D_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>84769</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set Y for selection sprite.&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76944</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Unnamed label is too far&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3222</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6506_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3312</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6560_CheckSubtract</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3390</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L65AE_FormatKeyCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3398</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L65B6_FormatBombCount</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3689</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L66D9_WriteHighChars</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3799</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6747_EmitChar</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3780</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6734_CheckPartial</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3770</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L672A_CheckOccupiedSlot</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3845</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6775_LoopSprite</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3867</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L678B_NextSprite</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3859</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6783_AddPriority</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6700</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L729C_Exit2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3696</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L66E0_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4117</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6885_Loop</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4165</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L68B5_ReturnBlocked</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4290</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6932_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4411</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L69AB_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>1627</Address>
      <AddressType>InternalRam</AddressType>
      <Label>InvCandle</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4430</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L69BE_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4573</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6A4D_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4668</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6AAC_SetAttr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4667</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6AAB_PopSetAttr</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4650</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> DASM.EXPR: LevelMasks-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4723</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6AE3_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>4688</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6AC0_LoopColumn</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5045</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6C25_SetItemValue</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5194</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6CBA_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5222</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6CD6_FillHeartPartial</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5291</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6D1B_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5382</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6D76_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5346</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6D52_CopyPalette</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5383</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6D77_ReturnDone</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5464</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DC8_CheckMountainMaze</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5455</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DBF_Mismatch</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5448</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DB8_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5446</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DB6_SetNextRoom</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>5478</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L6DD6_Match</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6485</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L71C5_Narrow</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6506</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L71DA_Wide</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6517</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L71E5__Slim</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6653</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L726D_CheckLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6684</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L728C_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6969</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L73A9_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6970</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L73AA_HarmLink</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7387</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L754B_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7370</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L753A_CheckCollision</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7461</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7595_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7626</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L763A_Exit</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7715</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7693_ReturnValue</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>7904</Address>
      <AddressType>SaveRam</AddressType>
      <Label>L7750_Exit2</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91837</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Door sound</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65689</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjTurnTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65785</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjTurnTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65798</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65918</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65928</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65992</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66000</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjRefId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65996</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjRefId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>65790</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66143</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjPushTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66408</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Shot_ObjBounceDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66419</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Shot_ObjBounceDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66432</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Shot_ObjBounceDir</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66464</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjPosFracY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66472</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjDirToTargetX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66477</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjDirToTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66492</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjQSpeedX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66498</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjQSpeedY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66530</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjPosFracX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66536</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjPosFracX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66547</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjPosFracY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66553</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Fireball_ObjPosFracY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66609</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66618</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66754</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>66759</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjTurns</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67027</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjTurnRate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67200</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Statue_ObjFireballTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67218</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Statue_ObjFireballTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67462</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67521</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjTurnRate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67589</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67622</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67897</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjReversalCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67911</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67920</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjSpeedWholeY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67936</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjReversalCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>67947</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjReversalCount</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68146</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjSpeedFracY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68154</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjSpeedWholeY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68170</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjSpeedWholeY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68175</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Jumper_ObjSpeedFracY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>68199</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjTurnRate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69117</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjAngleWhole+2</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjAngleWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78955</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjAngleWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjAngleFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78945</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjAngleFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69752</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69757</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjTurns</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70004</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Wallmaster_ObjTilesCrossed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70263</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Wallmaster_ObjStep</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70269</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Wallmaster_ObjStep</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70291</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Wallmaster_ObjStep</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70297</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Wallmaster_ObjStep</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70614</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjWantsToShoot</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70643</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Moldorm_ObjBounceDir+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70666</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeed+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70671</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjFlyingState+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70763</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70768</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjTargetSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>70985</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Moldorm_ObjBounceDir</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71003</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Moldorm_ObjOldDir+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71016</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Moldorm_ObjOldDir</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71030</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71035</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjTurns</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71113</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjIsChild</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71118</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjSpeedFlag</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71209</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjCurPart</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71240</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjCurPart</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71289</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjIsChild</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71300</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjIsChild</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71325</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71336</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71331</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjTargetSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71339</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjTargetSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71355</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71368</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjTargetSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71373</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71376</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjTargetSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71391</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjTargetSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71399</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Digdogger_ObjTargetSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71678</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Aquamentus_ObjFireballOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71686</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Aquamentus_ObjFireballOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71694</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Aquamentus_ObjFireballOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71715</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Aquamentus_ObjFireballOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71901</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjTurnRate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71966</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Dodongo_ObjBloatedTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>71986</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Dodongo_ObjBombHits</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72011</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Dodongo_ObjBloatedSubstate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72234</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Dodongo_ObjBloatedSubstate</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72727</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PolsVoice_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72736</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PolsVoice_ObjTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72768</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PolsVoice_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72776</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PolsVoice_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72791</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PolsVoice_ObjTargetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72803</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PolsVoice_ObjSpeedWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>72947</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjCaptureTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73019</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjCaptureTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73216</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjRemDistance</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73453</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjRemDistance</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73461</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: BlueWizzrobe_ObjTurnCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74031</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjFrame+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74074</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjSpeedFrac+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74115</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74144</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjSpeedWhole+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74152</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_SegmentJustDied</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74182</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_BounceDir</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74210</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_BounceDir</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74231</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74388</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjSpeedAccum</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74391</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjSpeedAccum</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74467</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjFrameAccum</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74470</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjFrameAccum</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74551</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjMoveAccum</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74604</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjDistTraveled</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74610</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjSprints</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74613</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjSprints</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74621</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjGoStraight</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74631</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjEyeOpenTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74638</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjNextOpenEyeCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74646</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjNextOpenEyeCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74679</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjShootTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74699</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjEyeAnimCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74708</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjEyeAnimCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74711</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gohma_ObjEyeState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76063</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Lamnola_Type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76069</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Lamnola_Speed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76097</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76357</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Lamnola_Type</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76593</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Lamnola_Speed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76608</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Lamnola_Speed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76623</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Lamnola_Speed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76638</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Lamnola_Speed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76651</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjOffsetX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76654</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjOffsetY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76698</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjAngleWhole+3</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76703</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Patra_ObjManeuverIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76708</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Patra_ObjManeuverIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76742</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76747</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjTurns</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76801</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjAngleWhole</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77017</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ScenePhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77022</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjAnimationFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77078</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjAnimationFrame</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77083</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjRemDistance</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77143</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjPhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77268</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjCloudDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77424</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjCloudDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77433</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjCloudDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77442</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjCloudDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77451</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjCloudDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77656</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjCloudDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>130207</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Item_ObjMonsterType</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78054</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Item_ObjItemLifetime</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78059</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Item_ObjItemId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78338</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeed</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78352</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjTurns</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78355</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjDistTraveled</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78358</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78405</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78410</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjTurns</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78428</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjFlyingState</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78478</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78481</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjSpeedFrac</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>78596</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Moldorm_ObjBounceDir</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75015</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadInfo</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75071</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadInfo</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75538</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_WrithingCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75691</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadSpeedX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75701</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadSpeedY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75712</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadDirChangeCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75721</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadDirChangeCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75727</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadDirCounterH</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75736</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadDirCounterH</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75739</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadSpeedX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75744</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadSpeedX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75750</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadDirCounterV</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75759</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadDirCounterV</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75762</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadSpeedY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75767</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_ObjHeadSpeedY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75820</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_WrithingCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>75825</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_WrithingCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73878</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_NeckXs0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73881</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_NeckXs1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73884</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_NeckXs2</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73887</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_NeckXs3</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73895</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_NeckYs0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73898</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_NeckYs1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73901</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_NeckYs2</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73904</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleeok_NeckYs3</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73933</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo1+GLEEOK_SPEEDY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73936</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo2+GLEEOK_SPEEDX</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73939</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo3+GLEEOK_SPEEDY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73944</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo0+GLEEOK_DIRCOUNTERV</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73947</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo1+GLEEOK_DIRCOUNTERV</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73950</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo2+GLEEOK_DIRCOUNTERV</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73953</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo3+GLEEOK_DIRCOUNTERV</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73957</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo0+GLEEOK_DIRCOUNTERH</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73960</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo1+GLEEOK_DIRCOUNTERH</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73963</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo2+GLEEOK_DIRCOUNTERH</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73966</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo3+GLEEOK_DIRCOUNTERH</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73970</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo1+GLEEOK_DELAY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73974</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo2+GLEEOK_DELAY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>73980</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Gleook_HeadInfo3+GLEEOK_DELAY</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76832</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjOffsetX+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>76840</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Flyer_ObjOffsetY+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>77302</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Ganon_ObjCloudDist</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17926</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextSelector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17948</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveItemIds</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17958</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CavePrices</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>17992</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveFlags</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18065</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: MoneyGameAmounts</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18073</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18079</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18359</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveFlags</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>74136</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Manhandla_ObjSpeedFrac+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18332</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveCurPriceIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18335</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveCurPriceOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18399</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveCurPriceOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18405</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveCurPriceIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18541</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18640</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CavePrices</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18666</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CavePrices</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18714</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveItemIds</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18735</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CaveFlags</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18779</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextSelector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18785</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18790</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18851</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CavePrices</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18866</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: MoneyGameAmounts+0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18874</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: MoneyGameAmounts+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18882</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: MoneyGameAmounts+2</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18891</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: MoneyGameAmounts</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18943</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>18996</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextSelector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19017</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextSelector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19023</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19066</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextSelector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19097</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextSelector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19133</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextSelector</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19139</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>19194</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PersonTextIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6697</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> DASM.EXPR: ObjCaptureTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>36867</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: DemoPhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38195</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: DemoPhase0Subphase1Cycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38741</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: DemoItemIds</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38757</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: DemoItemIds</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38768</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: DemoItemIds</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>38989</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: DemoPhase</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39024</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: Sprites-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39060</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TriforceGlowTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39075</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TriforceGlowTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39114</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs+0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39119</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39124</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs+2</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39142</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: InitializedWaterfallAnimation</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39160</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39163</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39172</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39810</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: DemoPhase0Subphase1Cycle</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39127</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> TODO: Are these used?&#xD;
</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40250</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40770</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40775</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40781</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40818</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $0426</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40727</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset FileBReadyToSave [$0426].</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>40821</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Set IsSaveSlotActive in file B.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41118</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41134</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41153</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41169</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41188</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: CharBoardIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41241</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: NameCharOffset</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41334</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: NameInputCharBuf+1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41536</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> Reset InitializedNameField and NameCharOffset.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42063</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42081</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42083</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42004</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>42006</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>41985</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: $C0</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43340</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TextboxCharPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43345</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TextboxCharIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43495</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TextboxCharPtr</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43611</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: EndingFlashLongTimer</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43839</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PeaceCharDelayCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43527</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PeaceCharDelayCounter</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>43530</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: PeaceCharIndex</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6491</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The sound of one step lasts $C frames.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>6663</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> The volume begins and ends at $10.</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39868</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: DemoPhase0Subphase1Delays-1</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>69295</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TileObjRoomId</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>94297</Address>
      <AddressType>PrgRom</AddressType>
      <Label>ObjectRoomBoundsUW</Label>
      <Comment />
      <Flags>None</Flags>
      <Length>5</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>3595</Address>
      <AddressType>SaveRam</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&gt;WorldFlags</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39129</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs+3</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39134</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs+4</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39139</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: TitleWaveYs+5</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39822</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&lt;DemoPhase0Subphase1Palettes</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>39828</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&gt;DemoPhase0Subphase1Palettes</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91206</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&gt;WallTileList</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91281</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&lt;(WallTileList + $4E)</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>91944</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&gt;RoomLayoutsUW</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
    <CodeLabel>
      <Address>92988</Address>
      <AddressType>PrgRom</AddressType>
      <Label />
      <Comment> DASM.EXPR: #&gt;ColumnHeapUWCellar</Comment>
      <Flags>None</Flags>
      <Length>1</Length>
    </CodeLabel>
  </Labels>
  <TblMappings />
</DebugWorkspace>